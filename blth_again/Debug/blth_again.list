
blth_again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08009d38  08009d38  00019d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a270  0800a270  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a270  0800a270  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a270  0800a270  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a274  0800a274  0001a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001d4  0800a44c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800a44c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000898e  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001937  00000000  00000000  00028bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  0002a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000579  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011050  00000000  00000000  0002b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fe3  00000000  00000000  0003c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062738  00000000  00000000  000461e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d00  00000000  00000000  000a891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ab61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d1c 	.word	0x08009d1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08009d1c 	.word	0x08009d1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff39 	bl	8002334 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb92 	bl	8001bf4 <__aeabi_dsub>
 80004d0:	f001 ff30 	bl	8002334 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 f8a1 	bl	8001670 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 ff64 	bl	8002400 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 f898 	bl	8001670 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb54 	bl	8001bf4 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 ff1d 	bl	80023a0 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 f881 	bl	8001670 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 ff44 	bl	8002400 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f91e 	bl	80007bc <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fdiv>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0245      	lsls	r5, r0, #9
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	0047      	lsls	r7, r0, #1
 8000596:	1c0c      	adds	r4, r1, #0
 8000598:	0a6d      	lsrs	r5, r5, #9
 800059a:	0e3f      	lsrs	r7, r7, #24
 800059c:	0fc6      	lsrs	r6, r0, #31
 800059e:	2f00      	cmp	r7, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fdiv+0x1c>
 80005a2:	e06f      	b.n	8000684 <__aeabi_fdiv+0xfc>
 80005a4:	2fff      	cmp	r7, #255	; 0xff
 80005a6:	d100      	bne.n	80005aa <__aeabi_fdiv+0x22>
 80005a8:	e074      	b.n	8000694 <__aeabi_fdiv+0x10c>
 80005aa:	2300      	movs	r3, #0
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	4699      	mov	r9, r3
 80005b0:	469a      	mov	sl, r3
 80005b2:	00ed      	lsls	r5, r5, #3
 80005b4:	04d2      	lsls	r2, r2, #19
 80005b6:	4315      	orrs	r5, r2
 80005b8:	3f7f      	subs	r7, #127	; 0x7f
 80005ba:	0263      	lsls	r3, r4, #9
 80005bc:	0a5b      	lsrs	r3, r3, #9
 80005be:	4698      	mov	r8, r3
 80005c0:	0063      	lsls	r3, r4, #1
 80005c2:	0e1b      	lsrs	r3, r3, #24
 80005c4:	0fe4      	lsrs	r4, r4, #31
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d04d      	beq.n	8000666 <__aeabi_fdiv+0xde>
 80005ca:	2bff      	cmp	r3, #255	; 0xff
 80005cc:	d045      	beq.n	800065a <__aeabi_fdiv+0xd2>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	00d2      	lsls	r2, r2, #3
 80005d4:	04c9      	lsls	r1, r1, #19
 80005d6:	4311      	orrs	r1, r2
 80005d8:	4688      	mov	r8, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	3b7f      	subs	r3, #127	; 0x7f
 80005de:	0031      	movs	r1, r6
 80005e0:	1aff      	subs	r7, r7, r3
 80005e2:	464b      	mov	r3, r9
 80005e4:	4061      	eors	r1, r4
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d900      	bls.n	80005ee <__aeabi_fdiv+0x66>
 80005ec:	e0b8      	b.n	8000760 <__aeabi_fdiv+0x1d8>
 80005ee:	4870      	ldr	r0, [pc, #448]	; (80007b0 <__aeabi_fdiv+0x228>)
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	58c3      	ldr	r3, [r0, r3]
 80005f4:	469f      	mov	pc, r3
 80005f6:	2300      	movs	r3, #0
 80005f8:	4698      	mov	r8, r3
 80005fa:	0026      	movs	r6, r4
 80005fc:	4645      	mov	r5, r8
 80005fe:	4692      	mov	sl, r2
 8000600:	4653      	mov	r3, sl
 8000602:	2b02      	cmp	r3, #2
 8000604:	d100      	bne.n	8000608 <__aeabi_fdiv+0x80>
 8000606:	e08d      	b.n	8000724 <__aeabi_fdiv+0x19c>
 8000608:	2b03      	cmp	r3, #3
 800060a:	d100      	bne.n	800060e <__aeabi_fdiv+0x86>
 800060c:	e0a1      	b.n	8000752 <__aeabi_fdiv+0x1ca>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d018      	beq.n	8000644 <__aeabi_fdiv+0xbc>
 8000612:	003b      	movs	r3, r7
 8000614:	337f      	adds	r3, #127	; 0x7f
 8000616:	2b00      	cmp	r3, #0
 8000618:	dd6d      	ble.n	80006f6 <__aeabi_fdiv+0x16e>
 800061a:	076a      	lsls	r2, r5, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 800061e:	220f      	movs	r2, #15
 8000620:	402a      	ands	r2, r5
 8000622:	2a04      	cmp	r2, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 8000626:	3504      	adds	r5, #4
 8000628:	012a      	lsls	r2, r5, #4
 800062a:	d503      	bpl.n	8000634 <__aeabi_fdiv+0xac>
 800062c:	4b61      	ldr	r3, [pc, #388]	; (80007b4 <__aeabi_fdiv+0x22c>)
 800062e:	401d      	ands	r5, r3
 8000630:	003b      	movs	r3, r7
 8000632:	3380      	adds	r3, #128	; 0x80
 8000634:	2bfe      	cmp	r3, #254	; 0xfe
 8000636:	dd00      	ble.n	800063a <__aeabi_fdiv+0xb2>
 8000638:	e074      	b.n	8000724 <__aeabi_fdiv+0x19c>
 800063a:	01aa      	lsls	r2, r5, #6
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	b2d8      	uxtb	r0, r3
 8000640:	e002      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000642:	000e      	movs	r6, r1
 8000644:	2000      	movs	r0, #0
 8000646:	2200      	movs	r2, #0
 8000648:	05c0      	lsls	r0, r0, #23
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4310      	orrs	r0, r2
 800064e:	4330      	orrs	r0, r6
 8000650:	bce0      	pop	{r5, r6, r7}
 8000652:	46ba      	mov	sl, r7
 8000654:	46b1      	mov	r9, r6
 8000656:	46a8      	mov	r8, r5
 8000658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065a:	4643      	mov	r3, r8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d13f      	bne.n	80006e0 <__aeabi_fdiv+0x158>
 8000660:	2202      	movs	r2, #2
 8000662:	3fff      	subs	r7, #255	; 0xff
 8000664:	e003      	b.n	800066e <__aeabi_fdiv+0xe6>
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d12d      	bne.n	80006c8 <__aeabi_fdiv+0x140>
 800066c:	2201      	movs	r2, #1
 800066e:	0031      	movs	r1, r6
 8000670:	464b      	mov	r3, r9
 8000672:	4061      	eors	r1, r4
 8000674:	b2c9      	uxtb	r1, r1
 8000676:	4313      	orrs	r3, r2
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d838      	bhi.n	80006ee <__aeabi_fdiv+0x166>
 800067c:	484e      	ldr	r0, [pc, #312]	; (80007b8 <__aeabi_fdiv+0x230>)
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	58c3      	ldr	r3, [r0, r3]
 8000682:	469f      	mov	pc, r3
 8000684:	2d00      	cmp	r5, #0
 8000686:	d113      	bne.n	80006b0 <__aeabi_fdiv+0x128>
 8000688:	2304      	movs	r3, #4
 800068a:	4699      	mov	r9, r3
 800068c:	3b03      	subs	r3, #3
 800068e:	2700      	movs	r7, #0
 8000690:	469a      	mov	sl, r3
 8000692:	e792      	b.n	80005ba <__aeabi_fdiv+0x32>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d105      	bne.n	80006a4 <__aeabi_fdiv+0x11c>
 8000698:	2308      	movs	r3, #8
 800069a:	4699      	mov	r9, r3
 800069c:	3b06      	subs	r3, #6
 800069e:	27ff      	movs	r7, #255	; 0xff
 80006a0:	469a      	mov	sl, r3
 80006a2:	e78a      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006a4:	230c      	movs	r3, #12
 80006a6:	4699      	mov	r9, r3
 80006a8:	3b09      	subs	r3, #9
 80006aa:	27ff      	movs	r7, #255	; 0xff
 80006ac:	469a      	mov	sl, r3
 80006ae:	e784      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006b0:	0028      	movs	r0, r5
 80006b2:	f001 ff99 	bl	80025e8 <__clzsi2>
 80006b6:	2776      	movs	r7, #118	; 0x76
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409d      	lsls	r5, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	427f      	negs	r7, r7
 80006c0:	4699      	mov	r9, r3
 80006c2:	469a      	mov	sl, r3
 80006c4:	1a3f      	subs	r7, r7, r0
 80006c6:	e778      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006c8:	4640      	mov	r0, r8
 80006ca:	f001 ff8d 	bl	80025e8 <__clzsi2>
 80006ce:	4642      	mov	r2, r8
 80006d0:	1f43      	subs	r3, r0, #5
 80006d2:	409a      	lsls	r2, r3
 80006d4:	2376      	movs	r3, #118	; 0x76
 80006d6:	425b      	negs	r3, r3
 80006d8:	4690      	mov	r8, r2
 80006da:	1a1b      	subs	r3, r3, r0
 80006dc:	2200      	movs	r2, #0
 80006de:	e77e      	b.n	80005de <__aeabi_fdiv+0x56>
 80006e0:	2303      	movs	r3, #3
 80006e2:	464a      	mov	r2, r9
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4691      	mov	r9, r2
 80006e8:	33fc      	adds	r3, #252	; 0xfc
 80006ea:	2203      	movs	r2, #3
 80006ec:	e777      	b.n	80005de <__aeabi_fdiv+0x56>
 80006ee:	000e      	movs	r6, r1
 80006f0:	20ff      	movs	r0, #255	; 0xff
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7a8      	b.n	8000648 <__aeabi_fdiv+0xc0>
 80006f6:	2201      	movs	r2, #1
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b1b      	cmp	r3, #27
 80006fc:	dca2      	bgt.n	8000644 <__aeabi_fdiv+0xbc>
 80006fe:	379e      	adds	r7, #158	; 0x9e
 8000700:	002a      	movs	r2, r5
 8000702:	40bd      	lsls	r5, r7
 8000704:	40da      	lsrs	r2, r3
 8000706:	1e6b      	subs	r3, r5, #1
 8000708:	419d      	sbcs	r5, r3
 800070a:	4315      	orrs	r5, r2
 800070c:	076a      	lsls	r2, r5, #29
 800070e:	d004      	beq.n	800071a <__aeabi_fdiv+0x192>
 8000710:	220f      	movs	r2, #15
 8000712:	402a      	ands	r2, r5
 8000714:	2a04      	cmp	r2, #4
 8000716:	d000      	beq.n	800071a <__aeabi_fdiv+0x192>
 8000718:	3504      	adds	r5, #4
 800071a:	016a      	lsls	r2, r5, #5
 800071c:	d544      	bpl.n	80007a8 <__aeabi_fdiv+0x220>
 800071e:	2001      	movs	r0, #1
 8000720:	2200      	movs	r2, #0
 8000722:	e791      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000724:	20ff      	movs	r0, #255	; 0xff
 8000726:	2200      	movs	r2, #0
 8000728:	e78e      	b.n	8000648 <__aeabi_fdiv+0xc0>
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	2600      	movs	r6, #0
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	03d2      	lsls	r2, r2, #15
 8000732:	e789      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000734:	2300      	movs	r3, #0
 8000736:	4698      	mov	r8, r3
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	03d2      	lsls	r2, r2, #15
 800073c:	4215      	tst	r5, r2
 800073e:	d008      	beq.n	8000752 <__aeabi_fdiv+0x1ca>
 8000740:	4643      	mov	r3, r8
 8000742:	4213      	tst	r3, r2
 8000744:	d105      	bne.n	8000752 <__aeabi_fdiv+0x1ca>
 8000746:	431a      	orrs	r2, r3
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	0026      	movs	r6, r4
 800074c:	20ff      	movs	r0, #255	; 0xff
 800074e:	0a52      	lsrs	r2, r2, #9
 8000750:	e77a      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	03d2      	lsls	r2, r2, #15
 8000756:	432a      	orrs	r2, r5
 8000758:	0252      	lsls	r2, r2, #9
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	0a52      	lsrs	r2, r2, #9
 800075e:	e773      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000760:	4642      	mov	r2, r8
 8000762:	016b      	lsls	r3, r5, #5
 8000764:	0155      	lsls	r5, r2, #5
 8000766:	42ab      	cmp	r3, r5
 8000768:	d21a      	bcs.n	80007a0 <__aeabi_fdiv+0x218>
 800076a:	201b      	movs	r0, #27
 800076c:	2200      	movs	r2, #0
 800076e:	3f01      	subs	r7, #1
 8000770:	2601      	movs	r6, #1
 8000772:	001c      	movs	r4, r3
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	2c00      	cmp	r4, #0
 800077a:	db01      	blt.n	8000780 <__aeabi_fdiv+0x1f8>
 800077c:	429d      	cmp	r5, r3
 800077e:	d801      	bhi.n	8000784 <__aeabi_fdiv+0x1fc>
 8000780:	1b5b      	subs	r3, r3, r5
 8000782:	4332      	orrs	r2, r6
 8000784:	3801      	subs	r0, #1
 8000786:	2800      	cmp	r0, #0
 8000788:	d1f3      	bne.n	8000772 <__aeabi_fdiv+0x1ea>
 800078a:	1e58      	subs	r0, r3, #1
 800078c:	4183      	sbcs	r3, r0
 800078e:	4313      	orrs	r3, r2
 8000790:	001d      	movs	r5, r3
 8000792:	003b      	movs	r3, r7
 8000794:	337f      	adds	r3, #127	; 0x7f
 8000796:	000e      	movs	r6, r1
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd00      	ble.n	800079e <__aeabi_fdiv+0x216>
 800079c:	e73d      	b.n	800061a <__aeabi_fdiv+0x92>
 800079e:	e7aa      	b.n	80006f6 <__aeabi_fdiv+0x16e>
 80007a0:	201a      	movs	r0, #26
 80007a2:	2201      	movs	r2, #1
 80007a4:	1b5b      	subs	r3, r3, r5
 80007a6:	e7e3      	b.n	8000770 <__aeabi_fdiv+0x1e8>
 80007a8:	01aa      	lsls	r2, r5, #6
 80007aa:	2000      	movs	r0, #0
 80007ac:	0a52      	lsrs	r2, r2, #9
 80007ae:	e74b      	b.n	8000648 <__aeabi_fdiv+0xc0>
 80007b0:	08009d4c 	.word	0x08009d4c
 80007b4:	f7ffffff 	.word	0xf7ffffff
 80007b8:	08009d8c 	.word	0x08009d8c

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 febb 	bl	80025e8 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fdb6 	bl	80025e8 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa63 	bl	80025e8 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 fa46 	bl	80025e8 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	08009dcc 	.word	0x08009dcc
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f977 	bl	80025e8 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f968 	bl	80025e8 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdf9 	bl	80025e8 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fdd1 	bl	80025e8 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd64 	bl	80025e8 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd56 	bl	80025e8 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc91 	bl	80025e8 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fb2a 	bl	80025e8 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f91a 	bl	80025e8 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8ef 	bl	80025e8 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_f2d>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	0242      	lsls	r2, r0, #9
 8002450:	0043      	lsls	r3, r0, #1
 8002452:	0fc4      	lsrs	r4, r0, #31
 8002454:	20fe      	movs	r0, #254	; 0xfe
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	0a55      	lsrs	r5, r2, #9
 800245c:	4208      	tst	r0, r1
 800245e:	d00c      	beq.n	800247a <__aeabi_f2d+0x2e>
 8002460:	21e0      	movs	r1, #224	; 0xe0
 8002462:	0089      	lsls	r1, r1, #2
 8002464:	468c      	mov	ip, r1
 8002466:	076d      	lsls	r5, r5, #29
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	4463      	add	r3, ip
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	4313      	orrs	r3, r2
 8002470:	07e4      	lsls	r4, r4, #31
 8002472:	4323      	orrs	r3, r4
 8002474:	0028      	movs	r0, r5
 8002476:	0019      	movs	r1, r3
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <__aeabi_f2d+0x5c>
 800247e:	2d00      	cmp	r5, #0
 8002480:	d01b      	beq.n	80024ba <__aeabi_f2d+0x6e>
 8002482:	0028      	movs	r0, r5
 8002484:	f000 f8b0 	bl	80025e8 <__clzsi2>
 8002488:	280a      	cmp	r0, #10
 800248a:	dc1c      	bgt.n	80024c6 <__aeabi_f2d+0x7a>
 800248c:	230b      	movs	r3, #11
 800248e:	002a      	movs	r2, r5
 8002490:	1a1b      	subs	r3, r3, r0
 8002492:	40da      	lsrs	r2, r3
 8002494:	0003      	movs	r3, r0
 8002496:	3315      	adds	r3, #21
 8002498:	409d      	lsls	r5, r3
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <__aeabi_f2d+0x88>)
 800249c:	0312      	lsls	r2, r2, #12
 800249e:	1a1b      	subs	r3, r3, r0
 80024a0:	055b      	lsls	r3, r3, #21
 80024a2:	0b12      	lsrs	r2, r2, #12
 80024a4:	0d5b      	lsrs	r3, r3, #21
 80024a6:	e7e1      	b.n	800246c <__aeabi_f2d+0x20>
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d009      	beq.n	80024c0 <__aeabi_f2d+0x74>
 80024ac:	0b13      	lsrs	r3, r2, #12
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	431a      	orrs	r2, r3
 80024b4:	076d      	lsls	r5, r5, #29
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <__aeabi_f2d+0x8c>)
 80024b8:	e7d8      	b.n	800246c <__aeabi_f2d+0x20>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2200      	movs	r2, #0
 80024be:	e7d5      	b.n	800246c <__aeabi_f2d+0x20>
 80024c0:	2200      	movs	r2, #0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <__aeabi_f2d+0x8c>)
 80024c4:	e7d2      	b.n	800246c <__aeabi_f2d+0x20>
 80024c6:	0003      	movs	r3, r0
 80024c8:	002a      	movs	r2, r5
 80024ca:	3b0b      	subs	r3, #11
 80024cc:	409a      	lsls	r2, r3
 80024ce:	2500      	movs	r5, #0
 80024d0:	e7e3      	b.n	800249a <__aeabi_f2d+0x4e>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	00000389 	.word	0x00000389
 80024d8:	000007ff 	.word	0x000007ff

080024dc <__aeabi_d2f>:
 80024dc:	0002      	movs	r2, r0
 80024de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e0:	004b      	lsls	r3, r1, #1
 80024e2:	030d      	lsls	r5, r1, #12
 80024e4:	0f40      	lsrs	r0, r0, #29
 80024e6:	0d5b      	lsrs	r3, r3, #21
 80024e8:	0fcc      	lsrs	r4, r1, #31
 80024ea:	0a6d      	lsrs	r5, r5, #9
 80024ec:	493a      	ldr	r1, [pc, #232]	; (80025d8 <__aeabi_d2f+0xfc>)
 80024ee:	4305      	orrs	r5, r0
 80024f0:	1c58      	adds	r0, r3, #1
 80024f2:	00d7      	lsls	r7, r2, #3
 80024f4:	4208      	tst	r0, r1
 80024f6:	d00a      	beq.n	800250e <__aeabi_d2f+0x32>
 80024f8:	4938      	ldr	r1, [pc, #224]	; (80025dc <__aeabi_d2f+0x100>)
 80024fa:	1859      	adds	r1, r3, r1
 80024fc:	29fe      	cmp	r1, #254	; 0xfe
 80024fe:	dd16      	ble.n	800252e <__aeabi_d2f+0x52>
 8002500:	20ff      	movs	r0, #255	; 0xff
 8002502:	2200      	movs	r2, #0
 8002504:	05c0      	lsls	r0, r0, #23
 8002506:	4310      	orrs	r0, r2
 8002508:	07e4      	lsls	r4, r4, #31
 800250a:	4320      	orrs	r0, r4
 800250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <__aeabi_d2f+0x44>
 8002512:	433d      	orrs	r5, r7
 8002514:	d026      	beq.n	8002564 <__aeabi_d2f+0x88>
 8002516:	2205      	movs	r2, #5
 8002518:	0192      	lsls	r2, r2, #6
 800251a:	0a52      	lsrs	r2, r2, #9
 800251c:	b2d8      	uxtb	r0, r3
 800251e:	e7f1      	b.n	8002504 <__aeabi_d2f+0x28>
 8002520:	432f      	orrs	r7, r5
 8002522:	d0ed      	beq.n	8002500 <__aeabi_d2f+0x24>
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	03d2      	lsls	r2, r2, #15
 8002528:	20ff      	movs	r0, #255	; 0xff
 800252a:	432a      	orrs	r2, r5
 800252c:	e7ea      	b.n	8002504 <__aeabi_d2f+0x28>
 800252e:	2900      	cmp	r1, #0
 8002530:	dd1b      	ble.n	800256a <__aeabi_d2f+0x8e>
 8002532:	0192      	lsls	r2, r2, #6
 8002534:	1e50      	subs	r0, r2, #1
 8002536:	4182      	sbcs	r2, r0
 8002538:	00ed      	lsls	r5, r5, #3
 800253a:	0f7f      	lsrs	r7, r7, #29
 800253c:	432a      	orrs	r2, r5
 800253e:	433a      	orrs	r2, r7
 8002540:	0753      	lsls	r3, r2, #29
 8002542:	d047      	beq.n	80025d4 <__aeabi_d2f+0xf8>
 8002544:	230f      	movs	r3, #15
 8002546:	4013      	ands	r3, r2
 8002548:	2b04      	cmp	r3, #4
 800254a:	d000      	beq.n	800254e <__aeabi_d2f+0x72>
 800254c:	3204      	adds	r2, #4
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	04db      	lsls	r3, r3, #19
 8002552:	4013      	ands	r3, r2
 8002554:	d03e      	beq.n	80025d4 <__aeabi_d2f+0xf8>
 8002556:	1c48      	adds	r0, r1, #1
 8002558:	29fe      	cmp	r1, #254	; 0xfe
 800255a:	d0d1      	beq.n	8002500 <__aeabi_d2f+0x24>
 800255c:	0192      	lsls	r2, r2, #6
 800255e:	0a52      	lsrs	r2, r2, #9
 8002560:	b2c0      	uxtb	r0, r0
 8002562:	e7cf      	b.n	8002504 <__aeabi_d2f+0x28>
 8002564:	2000      	movs	r0, #0
 8002566:	2200      	movs	r2, #0
 8002568:	e7cc      	b.n	8002504 <__aeabi_d2f+0x28>
 800256a:	000a      	movs	r2, r1
 800256c:	3217      	adds	r2, #23
 800256e:	db2f      	blt.n	80025d0 <__aeabi_d2f+0xf4>
 8002570:	2680      	movs	r6, #128	; 0x80
 8002572:	0436      	lsls	r6, r6, #16
 8002574:	432e      	orrs	r6, r5
 8002576:	251e      	movs	r5, #30
 8002578:	1a6d      	subs	r5, r5, r1
 800257a:	2d1f      	cmp	r5, #31
 800257c:	dd11      	ble.n	80025a2 <__aeabi_d2f+0xc6>
 800257e:	2202      	movs	r2, #2
 8002580:	4252      	negs	r2, r2
 8002582:	1a52      	subs	r2, r2, r1
 8002584:	0031      	movs	r1, r6
 8002586:	40d1      	lsrs	r1, r2
 8002588:	2d20      	cmp	r5, #32
 800258a:	d004      	beq.n	8002596 <__aeabi_d2f+0xba>
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <__aeabi_d2f+0x104>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	409e      	lsls	r6, r3
 8002594:	4337      	orrs	r7, r6
 8002596:	003a      	movs	r2, r7
 8002598:	1e53      	subs	r3, r2, #1
 800259a:	419a      	sbcs	r2, r3
 800259c:	430a      	orrs	r2, r1
 800259e:	2100      	movs	r1, #0
 80025a0:	e7ce      	b.n	8002540 <__aeabi_d2f+0x64>
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <__aeabi_d2f+0x108>)
 80025a4:	0038      	movs	r0, r7
 80025a6:	4694      	mov	ip, r2
 80025a8:	4463      	add	r3, ip
 80025aa:	4098      	lsls	r0, r3
 80025ac:	003a      	movs	r2, r7
 80025ae:	1e41      	subs	r1, r0, #1
 80025b0:	4188      	sbcs	r0, r1
 80025b2:	409e      	lsls	r6, r3
 80025b4:	40ea      	lsrs	r2, r5
 80025b6:	4330      	orrs	r0, r6
 80025b8:	4302      	orrs	r2, r0
 80025ba:	2100      	movs	r1, #0
 80025bc:	0753      	lsls	r3, r2, #29
 80025be:	d1c1      	bne.n	8002544 <__aeabi_d2f+0x68>
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0013      	movs	r3, r2
 80025c4:	04c9      	lsls	r1, r1, #19
 80025c6:	2001      	movs	r0, #1
 80025c8:	400b      	ands	r3, r1
 80025ca:	420a      	tst	r2, r1
 80025cc:	d1c6      	bne.n	800255c <__aeabi_d2f+0x80>
 80025ce:	e7a3      	b.n	8002518 <__aeabi_d2f+0x3c>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e7a0      	b.n	8002516 <__aeabi_d2f+0x3a>
 80025d4:	000b      	movs	r3, r1
 80025d6:	e79f      	b.n	8002518 <__aeabi_d2f+0x3c>
 80025d8:	000007fe 	.word	0x000007fe
 80025dc:	fffffc80 	.word	0xfffffc80
 80025e0:	fffffca2 	.word	0xfffffca2
 80025e4:	fffffc82 	.word	0xfffffc82

080025e8 <__clzsi2>:
 80025e8:	211c      	movs	r1, #28
 80025ea:	2301      	movs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d301      	bcc.n	80025f6 <__clzsi2+0xe>
 80025f2:	0c00      	lsrs	r0, r0, #16
 80025f4:	3910      	subs	r1, #16
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d301      	bcc.n	8002600 <__clzsi2+0x18>
 80025fc:	0a00      	lsrs	r0, r0, #8
 80025fe:	3908      	subs	r1, #8
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0x22>
 8002606:	0900      	lsrs	r0, r0, #4
 8002608:	3904      	subs	r1, #4
 800260a:	a202      	add	r2, pc, #8	; (adr r2, 8002614 <__clzsi2+0x2c>)
 800260c:	5c10      	ldrb	r0, [r2, r0]
 800260e:	1840      	adds	r0, r0, r1
 8002610:	4770      	bx	lr
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	02020304 	.word	0x02020304
 8002618:	01010101 	.word	0x01010101
	...

08002624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002628:	f000 fbe0 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262c:	f000 f81a 	bl	8002664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002630:	f000 f8d8 	bl	80027e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002634:	f000 f8a6 	bl	8002784 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002638:	f000 f874 	bl	8002724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <main+0x34>)
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <main+0x38>)
 8002640:	2201      	movs	r2, #1
 8002642:	0018      	movs	r0, r3
 8002644:	f001 fd56 	bl	80040f4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *)"Enter ML:- ", 11, HAL_MAX_DELAY);
 8002648:	2301      	movs	r3, #1
 800264a:	425b      	negs	r3, r3
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <main+0x3c>)
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <main+0x38>)
 8002650:	220b      	movs	r2, #11
 8002652:	f001 fcaf 	bl	8003fb4 <HAL_UART_Transmit>
//  HAL_UART_Transmit(&huart1, (uint8_t *)123, 3, 10);
  while (1)
 8002656:	e7fe      	b.n	8002656 <main+0x32>
 8002658:	20000300 	.word	0x20000300
 800265c:	200001f0 	.word	0x200001f0
 8002660:	08009d38 	.word	0x08009d38

08002664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b097      	sub	sp, #92	; 0x5c
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	2428      	movs	r4, #40	; 0x28
 800266c:	193b      	adds	r3, r7, r4
 800266e:	0018      	movs	r0, r3
 8002670:	2330      	movs	r3, #48	; 0x30
 8002672:	001a      	movs	r2, r3
 8002674:	2100      	movs	r1, #0
 8002676:	f003 fe75 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267a:	2318      	movs	r3, #24
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	0018      	movs	r0, r3
 8002680:	2310      	movs	r3, #16
 8002682:	001a      	movs	r2, r3
 8002684:	2100      	movs	r1, #0
 8002686:	f003 fe6d 	bl	8006364 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	0018      	movs	r0, r3
 800268e:	2314      	movs	r3, #20
 8002690:	001a      	movs	r2, r3
 8002692:	2100      	movs	r1, #0
 8002694:	f003 fe66 	bl	8006364 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002698:	0021      	movs	r1, r4
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2201      	movs	r2, #1
 80026a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2202      	movs	r2, #2
 80026aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	0252      	lsls	r2, r2, #9
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	0352      	lsls	r2, r2, #13
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 fedf 	bl	8003488 <HAL_RCC_OscConfig>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d001      	beq.n	80026d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80026ce:	f000 f9ad 	bl	8002a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d2:	2118      	movs	r1, #24
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2207      	movs	r2, #7
 80026d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2202      	movs	r2, #2
 80026de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2101      	movs	r1, #1
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 f9e7 	bl	8003ac4 <HAL_RCC_ClockConfig>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80026fa:	f000 f997 	bl	8002a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	0018      	movs	r0, r3
 800270e:	f001 fb1f 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d001      	beq.n	800271a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002716:	f000 f989 	bl	8002a2c <Error_Handler>
  }
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b017      	add	sp, #92	; 0x5c
 8002720:	bd90      	pop	{r4, r7, pc}
	...

08002724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_USART1_UART_Init+0x58>)
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <MX_USART1_UART_Init+0x5c>)
 800272c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002730:	2296      	movs	r2, #150	; 0x96
 8002732:	0192      	lsls	r2, r2, #6
 8002734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_USART1_UART_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_USART1_UART_Init+0x58>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_USART1_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_USART1_UART_Init+0x58>)
 8002768:	0018      	movs	r0, r3
 800276a:	f001 fbcf 	bl	8003f0c <HAL_UART_Init>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002772:	f000 f95b 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200001f0 	.word	0x200001f0
 8002780:	40013800 	.word	0x40013800

08002784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <MX_USART2_UART_Init+0x58>)
 800278a:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <MX_USART2_UART_Init+0x5c>)
 800278c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <MX_USART2_UART_Init+0x58>)
 8002790:	2296      	movs	r2, #150	; 0x96
 8002792:	0192      	lsls	r2, r2, #6
 8002794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_USART2_UART_Init+0x58>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_USART2_UART_Init+0x58>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <MX_USART2_UART_Init+0x58>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 fb9f 	bl	8003f0c <HAL_UART_Init>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027d2:	f000 f92b 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000278 	.word	0x20000278
 80027e0:	40004400 	.word	0x40004400

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	2414      	movs	r4, #20
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	0018      	movs	r0, r3
 80027f0:	2314      	movs	r3, #20
 80027f2:	001a      	movs	r2, r3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f003 fdb5 	bl	8006364 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <MX_GPIO_Init+0x118>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <MX_GPIO_Init+0x118>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0309      	lsls	r1, r1, #12
 8002804:	430a      	orrs	r2, r1
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <MX_GPIO_Init+0x118>)
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	031b      	lsls	r3, r3, #12
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <MX_GPIO_Init+0x118>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <MX_GPIO_Init+0x118>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	03c9      	lsls	r1, r1, #15
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <MX_GPIO_Init+0x118>)
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	03db      	lsls	r3, r3, #15
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	4b32      	ldr	r3, [pc, #200]	; (80028fc <MX_GPIO_Init+0x118>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <MX_GPIO_Init+0x118>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0289      	lsls	r1, r1, #10
 800283c:	430a      	orrs	r2, r1
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <MX_GPIO_Init+0x118>)
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <MX_GPIO_Init+0x118>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <MX_GPIO_Init+0x118>)
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	02c9      	lsls	r1, r1, #11
 8002858:	430a      	orrs	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <MX_GPIO_Init+0x118>)
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	4013      	ands	r3, r2
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800286a:	2390      	movs	r3, #144	; 0x90
 800286c:	05db      	lsls	r3, r3, #23
 800286e:	2200      	movs	r2, #0
 8002870:	2120      	movs	r1, #32
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fdea 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <MX_GPIO_Init+0x11c>)
 800287a:	2200      	movs	r2, #0
 800287c:	2108      	movs	r1, #8
 800287e:	0018      	movs	r0, r3
 8002880:	f000 fde4 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0192      	lsls	r2, r2, #6
 800288a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	2284      	movs	r2, #132	; 0x84
 8002890:	0392      	lsls	r2, r2, #14
 8002892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800289a:	193b      	adds	r3, r7, r4
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <MX_GPIO_Init+0x120>)
 800289e:	0019      	movs	r1, r3
 80028a0:	0010      	movs	r0, r2
 80028a2:	f000 fc63 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	2220      	movs	r2, #32
 80028aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	2201      	movs	r2, #1
 80028b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028be:	193a      	adds	r2, r7, r4
 80028c0:	2390      	movs	r3, #144	; 0x90
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	0011      	movs	r1, r2
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 fc50 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028cc:	0021      	movs	r1, r4
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2208      	movs	r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2201      	movs	r2, #1
 80028d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <MX_GPIO_Init+0x11c>)
 80028ea:	0019      	movs	r1, r3
 80028ec:	0010      	movs	r0, r2
 80028ee:	f000 fc3d 	bl	800316c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b00b      	add	sp, #44	; 0x2c
 80028f8:	bd90      	pop	{r4, r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000400 	.word	0x48000400
 8002904:	48000800 	.word	0x48000800

08002908 <HAL_UART_RxCpltCallback>:

float rxFloat = 0.0;
_Bool decimalPointEncountered = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <HAL_UART_RxCpltCallback+0x104>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d000      	beq.n	800291c <HAL_UART_RxCpltCallback+0x14>
 800291a:	e072      	b.n	8002a02 <HAL_UART_RxCpltCallback+0xfa>
    {
        if (rxData != '\n') // Ascii value of 'N' is 78 (N for NO)
 800291c:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b0a      	cmp	r3, #10
 8002922:	d04b      	beq.n	80029bc <HAL_UART_RxCpltCallback+0xb4>
        {
            // Check if the received character is a digit or a decimal point
            if ((rxData >= '0' && rxData <= '9') || rxData == '.')
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b2f      	cmp	r3, #47	; 0x2f
 800292a:	d903      	bls.n	8002934 <HAL_UART_RxCpltCallback+0x2c>
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b39      	cmp	r3, #57	; 0x39
 8002932:	d903      	bls.n	800293c <HAL_UART_RxCpltCallback+0x34>
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b2e      	cmp	r3, #46	; 0x2e
 800293a:	d15c      	bne.n	80029f6 <HAL_UART_RxCpltCallback+0xee>
            {
                if (rxData == '.')
 800293c:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b2e      	cmp	r3, #46	; 0x2e
 8002942:	d10a      	bne.n	800295a <HAL_UART_RxCpltCallback+0x52>
                {
                    if (!decimalPointEncountered)
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_UART_RxCpltCallback+0x10c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4053      	eors	r3, r2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d051      	beq.n	80029f6 <HAL_UART_RxCpltCallback+0xee>
                    {
                        decimalPointEncountered = 1;
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_UART_RxCpltCallback+0x10c>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e04d      	b.n	80029f6 <HAL_UART_RxCpltCallback+0xee>
                        // (you may want to set an error flag or take appropriate action)
                    }
                }
                else
                {
                    rxFloat = rxFloat * 10.0 + (rxData - '0');
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c18      	adds	r0, r3, #0
 8002960:	f7ff fd74 	bl	800244c <__aeabi_f2d>
 8002964:	2200      	movs	r2, #0
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_UART_RxCpltCallback+0x114>)
 8002968:	f7fe fe82 	bl	8001670 <__aeabi_dmul>
 800296c:	0002      	movs	r2, r0
 800296e:	000b      	movs	r3, r1
 8002970:	0014      	movs	r4, r2
 8002972:	001d      	movs	r5, r3
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	3b30      	subs	r3, #48	; 0x30
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff fd10 	bl	80023a0 <__aeabi_i2d>
 8002980:	0002      	movs	r2, r0
 8002982:	000b      	movs	r3, r1
 8002984:	0020      	movs	r0, r4
 8002986:	0029      	movs	r1, r5
 8002988:	f7fd ff18 	bl	80007bc <__aeabi_dadd>
 800298c:	0002      	movs	r2, r0
 800298e:	000b      	movs	r3, r1
 8002990:	0010      	movs	r0, r2
 8002992:	0019      	movs	r1, r3
 8002994:	f7ff fda2 	bl	80024dc <__aeabi_d2f>
 8002998:	1c02      	adds	r2, r0, #0
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 800299c:	601a      	str	r2, [r3, #0]
                    if (decimalPointEncountered)
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_UART_RxCpltCallback+0x10c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d027      	beq.n	80029f6 <HAL_UART_RxCpltCallback+0xee>
                    {
                        // Adjust for decimal places
                        rxFloat /= 10.0;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	491d      	ldr	r1, [pc, #116]	; (8002a20 <HAL_UART_RxCpltCallback+0x118>)
 80029ac:	1c18      	adds	r0, r3, #0
 80029ae:	f7fd fdeb 	bl	8000588 <__aeabi_fdiv>
 80029b2:	1c03      	adds	r3, r0, #0
 80029b4:	1c1a      	adds	r2, r3, #0
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e01c      	b.n	80029f6 <HAL_UART_RxCpltCallback+0xee>
            // Your other code goes here
        }
        else // Ascii value of 'Y' is 89 (Y for YES)
        {
            char buffer[20];  // Adjust the buffer size as needed
            sprintf(buffer, "%.2f\n", rxFloat);  // %.2f limits the output to 2 decimal places
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c18      	adds	r0, r3, #0
 80029c2:	f7ff fd43 	bl	800244c <__aeabi_f2d>
 80029c6:	0002      	movs	r2, r0
 80029c8:	000b      	movs	r3, r1
 80029ca:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_UART_RxCpltCallback+0x11c>)
 80029cc:	240c      	movs	r4, #12
 80029ce:	1938      	adds	r0, r7, r4
 80029d0:	f003 fc5c 	bl	800628c <siprintf>

            // Transmit the float value
            HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 10);
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fd fb96 	bl	8000108 <strlen>
 80029dc:	0003      	movs	r3, r0
 80029de:	b29a      	uxth	r2, r3
 80029e0:	1939      	adds	r1, r7, r4
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <HAL_UART_RxCpltCallback+0x120>)
 80029e4:	230a      	movs	r3, #10
 80029e6:	f001 fae5 	bl	8003fb4 <HAL_UART_Transmit>

//            dispense(rxFloat);
            rxFloat = 0.0;  // Reset the float value
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_UART_RxCpltCallback+0x110>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
            decimalPointEncountered = 0;  // Reset the flag
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_UART_RxCpltCallback+0x10c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, &rxData, 1); // Enable interrupt receive again
 80029f6:	4906      	ldr	r1, [pc, #24]	; (8002a10 <HAL_UART_RxCpltCallback+0x108>)
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_UART_RxCpltCallback+0x120>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 fb79 	bl	80040f4 <HAL_UART_Receive_IT>
    }
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b008      	add	sp, #32
 8002a08:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	20000300 	.word	0x20000300
 8002a14:	20000308 	.word	0x20000308
 8002a18:	20000304 	.word	0x20000304
 8002a1c:	40240000 	.word	0x40240000
 8002a20:	41200000 	.word	0x41200000
 8002a24:	08009d44 	.word	0x08009d44
 8002a28:	200001f0 	.word	0x200001f0

08002a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a30:	b672      	cpsid	i
}
 8002a32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <Error_Handler+0x8>
	...

08002a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_MspInit+0x44>)
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_MspInit+0x44>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	430a      	orrs	r2, r1
 8002a48:	619a      	str	r2, [r3, #24]
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_MspInit+0x44>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_MspInit+0x44>)
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_MspInit+0x44>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0549      	lsls	r1, r1, #21
 8002a60:	430a      	orrs	r2, r1
 8002a62:	61da      	str	r2, [r3, #28]
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_MspInit+0x44>)
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	055b      	lsls	r3, r3, #21
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08d      	sub	sp, #52	; 0x34
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	241c      	movs	r4, #28
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	2314      	movs	r3, #20
 8002a90:	001a      	movs	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f003 fc66 	bl	8006364 <memset>
  if(huart->Instance==USART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a41      	ldr	r2, [pc, #260]	; (8002ba4 <HAL_UART_MspInit+0x124>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	01c9      	lsls	r1, r1, #7
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	01db      	lsls	r3, r3, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	0289      	lsls	r1, r1, #10
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	615a      	str	r2, [r3, #20]
 8002acc:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	22c0      	movs	r2, #192	; 0xc0
 8002ade:	00d2      	lsls	r2, r2, #3
 8002ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	0021      	movs	r1, r4
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2203      	movs	r2, #3
 8002af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2201      	movs	r2, #1
 8002afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	187a      	adds	r2, r7, r1
 8002afe:	2390      	movs	r3, #144	; 0x90
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	0011      	movs	r1, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 fb31 	bl	800316c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	201b      	movs	r0, #27
 8002b10:	f000 fa7c 	bl	800300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b14:	201b      	movs	r0, #27
 8002b16:	f000 fa8e 	bl	8003036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b1a:	e03f      	b.n	8002b9c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_UART_MspInit+0x12c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d13a      	bne.n	8002b9c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0289      	lsls	r1, r1, #10
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0289      	lsls	r1, r1, #10
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_UART_MspInit+0x128>)
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b5e:	211c      	movs	r1, #28
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	220c      	movs	r2, #12
 8002b64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2202      	movs	r2, #2
 8002b6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2203      	movs	r2, #3
 8002b76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	187a      	adds	r2, r7, r1
 8002b80:	2390      	movs	r3, #144	; 0x90
 8002b82:	05db      	lsls	r3, r3, #23
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 faf0 	bl	800316c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	201c      	movs	r0, #28
 8002b92:	f000 fa3b 	bl	800300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b96:	201c      	movs	r0, #28
 8002b98:	f000 fa4d 	bl	8003036 <HAL_NVIC_EnableIRQ>
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b00d      	add	sp, #52	; 0x34
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40004400 	.word	0x40004400

08002bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <NMI_Handler+0x4>

08002bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bba:	e7fe      	b.n	8002bba <HardFault_Handler+0x4>

08002bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 f952 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <USART1_IRQHandler+0x14>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f001 fadc 	bl	80041a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	200001f0 	.word	0x200001f0

08002bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <USART2_IRQHandler+0x14>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 fad0 	bl	80041a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	20000278 	.word	0x20000278

08002c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_kill>:

int _kill(int pid, int sig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c26:	f003 fbf7 	bl	8006418 <__errno>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	2216      	movs	r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	425b      	negs	r3, r3
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_exit>:

void _exit (int status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c44:	2301      	movs	r3, #1
 8002c46:	425a      	negs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff ffe5 	bl	8002c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c52:	e7fe      	b.n	8002c52 <_exit+0x16>

08002c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00a      	b.n	8002c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c66:	e000      	b.n	8002c6a <_read+0x16>
 8002c68:	bf00      	nop
 8002c6a:	0001      	movs	r1, r0
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	60ba      	str	r2, [r7, #8]
 8002c72:	b2ca      	uxtb	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dbf0      	blt.n	8002c66 <_read+0x12>
  }

  return len;
 8002c84:	687b      	ldr	r3, [r7, #4]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e009      	b.n	8002cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	60ba      	str	r2, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	e000      	b.n	8002cae <_write+0x20>
 8002cac:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf1      	blt.n	8002ca0 <_write+0x12>
  }
  return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b006      	add	sp, #24
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_close>:

int _close(int file)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	425b      	negs	r3, r3
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	0192      	lsls	r2, r2, #6
 8002cea:	605a      	str	r2, [r3, #4]
  return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_isatty>:

int _isatty(int file)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f003 fb62 	bl	8006418 <__errno>
 8002d54:	0003      	movs	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	18d2      	adds	r2, r2, r3
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20004000 	.word	0x20004000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	2000030c 	.word	0x2000030c
 8002d88:	20000460 	.word	0x20000460

08002d8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d9c:	f7ff fff6 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da2:	490d      	ldr	r1, [pc, #52]	; (8002dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <LoopForever+0xe>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db8:	4c0a      	ldr	r4, [pc, #40]	; (8002de4 <LoopForever+0x16>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dc6:	f003 fb2d 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dca:	f7ff fc2b 	bl	8002624 <main>

08002dce <LoopForever>:

LoopForever:
    b LoopForever
 8002dce:	e7fe      	b.n	8002dce <LoopForever>
  ldr   r0, =_estack
 8002dd0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ddc:	0800a278 	.word	0x0800a278
  ldr r2, =_sbss
 8002de0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002de4:	20000460 	.word	0x20000460

08002de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_IRQHandler>
	...

08002dec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_Init+0x24>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_Init+0x24>)
 8002df6:	2110      	movs	r1, #16
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f000 f809 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e02:	f7ff fe19 	bl	8002a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_InitTick+0x5c>)
 8002e1e:	681c      	ldr	r4, [r3, #0]
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_InitTick+0x60>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	0019      	movs	r1, r3
 8002e26:	23fa      	movs	r3, #250	; 0xfa
 8002e28:	0098      	lsls	r0, r3, #2
 8002e2a:	f7fd f989 	bl	8000140 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	0019      	movs	r1, r3
 8002e32:	0020      	movs	r0, r4
 8002e34:	f7fd f984 	bl	8000140 <__udivsi3>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f90b 	bl	8003056 <HAL_SYSTICK_Config>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e00f      	b.n	8002e68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d80b      	bhi.n	8002e66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f8d8 	bl	800300c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_InitTick+0x64>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b003      	add	sp, #12
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000008 	.word	0x20000008
 8002e78:	20000004 	.word	0x20000004

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	001a      	movs	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	20000310 	.word	0x20000310

08002ea0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	20000310 	.word	0x20000310

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0002      	movs	r2, r0
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec6:	d809      	bhi.n	8002edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	001a      	movs	r2, r3
 8002ece:	231f      	movs	r3, #31
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_EnableIRQ+0x30>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4091      	lsls	r1, r2
 8002ed8:	000a      	movs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	0002      	movs	r2, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b7f      	cmp	r3, #127	; 0x7f
 8002efc:	d828      	bhi.n	8002f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <__NVIC_SetPriority+0xd4>)
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	33c0      	adds	r3, #192	; 0xc0
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	589b      	ldr	r3, [r3, r2]
 8002f0e:	1dfa      	adds	r2, r7, #7
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	0011      	movs	r1, r2
 8002f14:	2203      	movs	r2, #3
 8002f16:	400a      	ands	r2, r1
 8002f18:	00d2      	lsls	r2, r2, #3
 8002f1a:	21ff      	movs	r1, #255	; 0xff
 8002f1c:	4091      	lsls	r1, r2
 8002f1e:	000a      	movs	r2, r1
 8002f20:	43d2      	mvns	r2, r2
 8002f22:	401a      	ands	r2, r3
 8002f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	2303      	movs	r3, #3
 8002f36:	4003      	ands	r3, r0
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f3c:	481f      	ldr	r0, [pc, #124]	; (8002fbc <__NVIC_SetPriority+0xd4>)
 8002f3e:	1dfb      	adds	r3, r7, #7
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	430a      	orrs	r2, r1
 8002f48:	33c0      	adds	r3, #192	; 0xc0
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f4e:	e031      	b.n	8002fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f50:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <__NVIC_SetPriority+0xd8>)
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	0019      	movs	r1, r3
 8002f58:	230f      	movs	r3, #15
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	3b08      	subs	r3, #8
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3306      	adds	r3, #6
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	18d3      	adds	r3, r2, r3
 8002f66:	3304      	adds	r3, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1dfa      	adds	r2, r7, #7
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	2203      	movs	r2, #3
 8002f72:	400a      	ands	r2, r1
 8002f74:	00d2      	lsls	r2, r2, #3
 8002f76:	21ff      	movs	r1, #255	; 0xff
 8002f78:	4091      	lsls	r1, r2
 8002f7a:	000a      	movs	r2, r1
 8002f7c:	43d2      	mvns	r2, r2
 8002f7e:	401a      	ands	r2, r3
 8002f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	401a      	ands	r2, r3
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	2303      	movs	r3, #3
 8002f92:	4003      	ands	r3, r0
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <__NVIC_SetPriority+0xd8>)
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	001c      	movs	r4, r3
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	4023      	ands	r3, r4
 8002fa4:	3b08      	subs	r3, #8
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18c3      	adds	r3, r0, r3
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b003      	add	sp, #12
 8002fba:	bd90      	pop	{r4, r7, pc}
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d301      	bcc.n	8002fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e010      	b.n	8002ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <SysTick_Config+0x44>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	2103      	movs	r1, #3
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff ff7c 	bl	8002ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <SysTick_Config+0x44>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <SysTick_Config+0x44>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	210f      	movs	r1, #15
 8003018:	187b      	adds	r3, r7, r1
 800301a:	1c02      	adds	r2, r0, #0
 800301c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	187b      	adds	r3, r7, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b25b      	sxtb	r3, r3
 8003026:	0011      	movs	r1, r2
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff ff5d 	bl	8002ee8 <__NVIC_SetPriority>
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	0002      	movs	r2, r0
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b25b      	sxtb	r3, r3
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff33 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff ffaf 	bl	8002fc4 <SysTick_Config>
 8003066:	0003      	movs	r3, r0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	5c9b      	ldrb	r3, [r3, r2]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d008      	beq.n	8003096 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e020      	b.n	80030d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	210e      	movs	r1, #14
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2101      	movs	r1, #1
 80030b2:	438a      	bics	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2101      	movs	r1, #1
 80030c0:	4091      	lsls	r1, r2
 80030c2:	000a      	movs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	210f      	movs	r1, #15
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d006      	beq.n	800310a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e028      	b.n	800315c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	210e      	movs	r1, #14
 8003116:	438a      	bics	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2101      	movs	r1, #1
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2221      	movs	r2, #33	; 0x21
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	0010      	movs	r0, r2
 800315a:	4798      	blx	r3
    }
  }
  return status;
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e14f      	b.n	800341c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4091      	lsls	r1, r2
 8003186:	000a      	movs	r2, r1
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <HAL_GPIO_Init+0x28>
 8003192:	e140      	b.n	8003416 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	4013      	ands	r3, r2
 800319c:	2b01      	cmp	r3, #1
 800319e:	d005      	beq.n	80031ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	43da      	mvns	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	0013      	movs	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e2:	2201      	movs	r2, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	43da      	mvns	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	2201      	movs	r2, #1
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	4013      	ands	r3, r2
 8003216:	2b03      	cmp	r3, #3
 8003218:	d017      	beq.n	800324a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	4013      	ands	r3, r2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d123      	bne.n	800329e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	58d3      	ldr	r3, [r2, r3]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2207      	movs	r2, #7
 8003268:	4013      	ands	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2107      	movs	r1, #7
 8003282:	400b      	ands	r3, r1
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	401a      	ands	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_GPIO_Init+0x174>
 80032de:	e09a      	b.n	8003416 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e0:	4b54      	ldr	r3, [pc, #336]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	589b      	ldr	r3, [r3, r2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2203      	movs	r2, #3
 800330a:	4013      	ands	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	43da      	mvns	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	2390      	movs	r3, #144	; 0x90
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	429a      	cmp	r2, r3
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1e2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_GPIO_Init+0x2d0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1de>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_GPIO_Init+0x2d4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1da>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a42      	ldr	r2, [pc, #264]	; (8003444 <HAL_GPIO_Init+0x2d8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1d6>
 800333e:	2303      	movs	r3, #3
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 8003342:	2305      	movs	r3, #5
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 800334e:	2300      	movs	r3, #0
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	2103      	movs	r1, #3
 8003354:	400a      	ands	r2, r1
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	4093      	lsls	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003360:	4935      	ldr	r1, [pc, #212]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43da      	mvns	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	035b      	lsls	r3, r3, #13
 8003386:	4013      	ands	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	4013      	ands	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80033c2:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	4013      	ands	r3, r2
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	025b      	lsls	r3, r3, #9
 8003404:	4013      	ands	r3, r2
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	40da      	lsrs	r2, r3
 8003424:	1e13      	subs	r3, r2, #0
 8003426:	d000      	beq.n	800342a <HAL_GPIO_Init+0x2be>
 8003428:	e6a8      	b.n	800317c <HAL_GPIO_Init+0x10>
  } 
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b006      	add	sp, #24
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40010000 	.word	0x40010000
 800343c:	48000400 	.word	0x48000400
 8003440:	48000800 	.word	0x48000800
 8003444:	48000c00 	.word	0x48000c00
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	0008      	movs	r0, r1
 8003456:	0011      	movs	r1, r2
 8003458:	1cbb      	adds	r3, r7, #2
 800345a:	1c02      	adds	r2, r0, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	1c7b      	adds	r3, r7, #1
 8003460:	1c0a      	adds	r2, r1, #0
 8003462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003464:	1c7b      	adds	r3, r7, #1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800346c:	1cbb      	adds	r3, r7, #2
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003474:	e003      	b.n	800347e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003476:	1cbb      	adds	r3, r7, #2
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e305      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d100      	bne.n	80034a6 <HAL_RCC_OscConfig+0x1e>
 80034a4:	e08d      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034a6:	4bc5      	ldr	r3, [pc, #788]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	220c      	movs	r2, #12
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00e      	beq.n	80034d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b2:	4bc2      	ldr	r3, [pc, #776]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	220c      	movs	r2, #12
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x64>
 80034be:	4bbf      	ldr	r3, [pc, #764]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	401a      	ands	r2, r3
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4bba      	ldr	r3, [pc, #744]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	d100      	bne.n	80034de <HAL_RCC_OscConfig+0x56>
 80034dc:	e070      	b.n	80035c0 <HAL_RCC_OscConfig+0x138>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d000      	beq.n	80034e8 <HAL_RCC_OscConfig+0x60>
 80034e6:	e06b      	b.n	80035c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e2dc      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x7c>
 80034f4:	4bb1      	ldr	r3, [pc, #708]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4bb0      	ldr	r3, [pc, #704]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	0249      	lsls	r1, r1, #9
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e02f      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x9e>
 800350c:	4bab      	ldr	r3, [pc, #684]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003512:	49ab      	ldr	r1, [pc, #684]	; (80037c0 <HAL_RCC_OscConfig+0x338>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4ba8      	ldr	r3, [pc, #672]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4ba7      	ldr	r3, [pc, #668]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800351e:	49a9      	ldr	r1, [pc, #676]	; (80037c4 <HAL_RCC_OscConfig+0x33c>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e01e      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d10e      	bne.n	800354c <HAL_RCC_OscConfig+0xc4>
 800352e:	4ba3      	ldr	r3, [pc, #652]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4ba2      	ldr	r3, [pc, #648]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	02c9      	lsls	r1, r1, #11
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b9f      	ldr	r3, [pc, #636]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b9e      	ldr	r3, [pc, #632]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	0249      	lsls	r1, r1, #9
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 800354c:	4b9b      	ldr	r3, [pc, #620]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b9a      	ldr	r3, [pc, #616]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003552:	499b      	ldr	r1, [pc, #620]	; (80037c0 <HAL_RCC_OscConfig+0x338>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	4b98      	ldr	r3, [pc, #608]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b97      	ldr	r3, [pc, #604]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800355e:	4999      	ldr	r1, [pc, #612]	; (80037c4 <HAL_RCC_OscConfig+0x33c>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d014      	beq.n	8003596 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7ff fc98 	bl	8002ea0 <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003576:	f7ff fc93 	bl	8002ea0 <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e28e      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	4013      	ands	r3, r2
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0xee>
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7ff fc83 	bl	8002ea0 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a0:	f7ff fc7e 	bl	8002ea0 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e279      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	4013      	ands	r3, r2
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x118>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d100      	bne.n	80035ce <HAL_RCC_OscConfig+0x146>
 80035cc:	e06c      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035ce:	4b7b      	ldr	r3, [pc, #492]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	220c      	movs	r2, #12
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035d8:	4b78      	ldr	r3, [pc, #480]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	220c      	movs	r2, #12
 80035de:	4013      	ands	r3, r2
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d11f      	bne.n	8003624 <HAL_RCC_OscConfig+0x19c>
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	401a      	ands	r2, r3
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d116      	bne.n	8003624 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	4b71      	ldr	r3, [pc, #452]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x184>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e24c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	22f8      	movs	r2, #248	; 0xf8
 8003612:	4393      	bics	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00da      	lsls	r2, r3, #3
 800361c:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	e041      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d024      	beq.n	8003676 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003632:	2101      	movs	r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff fc32 	bl	8002ea0 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7ff fc2d 	bl	8002ea0 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e228      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d0f1      	beq.n	8003642 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b57      	ldr	r3, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	22f8      	movs	r2, #248	; 0xf8
 8003664:	4393      	bics	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e018      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800367c:	2101      	movs	r1, #1
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7ff fc0d 	bl	8002ea0 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368c:	f7ff fc08 	bl	8002ea0 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e203      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	d1f1      	bne.n	800368c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	4013      	ands	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7ff fbeb 	bl	8002ea0 <HAL_GetTick>
 80036ca:	0003      	movs	r3, r0
 80036cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d0:	f7ff fbe6 	bl	8002ea0 <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1e1      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d0f1      	beq.n	80036d0 <HAL_RCC_OscConfig+0x248>
 80036ec:	e018      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	438a      	bics	r2, r1
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7ff fbd1 	bl	8002ea0 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003704:	f7ff fbcc 	bl	8002ea0 <HAL_GetTick>
 8003708:	0002      	movs	r2, r0
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1c7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2202      	movs	r2, #2
 800371c:	4013      	ands	r3, r2
 800371e:	d1f1      	bne.n	8003704 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	4013      	ands	r3, r2
 8003728:	d100      	bne.n	800372c <HAL_RCC_OscConfig+0x2a4>
 800372a:	e0b5      	b.n	8003898 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	201f      	movs	r0, #31
 800372e:	183b      	adds	r3, r7, r0
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	055b      	lsls	r3, r3, #21
 800373c:	4013      	ands	r3, r2
 800373e:	d110      	bne.n	8003762 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0549      	lsls	r1, r1, #21
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	055b      	lsls	r3, r3, #21
 8003756:	4013      	ands	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800375c:	183b      	adds	r3, r7, r0
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d11a      	bne.n	80037a4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0049      	lsls	r1, r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377c:	f7ff fb90 	bl	8002ea0 <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7ff fb8b 	bl	8002ea0 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	; 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e186      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10f      	bne.n	80037cc <HAL_RCC_OscConfig+0x344>
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	430a      	orrs	r2, r1
 80037b6:	621a      	str	r2, [r3, #32]
 80037b8:	e036      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	40021000 	.word	0x40021000
 80037c0:	fffeffff 	.word	0xfffeffff
 80037c4:	fffbffff 	.word	0xfffbffff
 80037c8:	40007000 	.word	0x40007000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10c      	bne.n	80037ee <HAL_RCC_OscConfig+0x366>
 80037d4:	4bb6      	ldr	r3, [pc, #728]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4bb5      	ldr	r3, [pc, #724]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	621a      	str	r2, [r3, #32]
 80037e0:	4bb3      	ldr	r3, [pc, #716]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	4bb2      	ldr	r3, [pc, #712]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037e6:	2104      	movs	r1, #4
 80037e8:	438a      	bics	r2, r1
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x388>
 80037f6:	4bae      	ldr	r3, [pc, #696]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	4bad      	ldr	r3, [pc, #692]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037fc:	2104      	movs	r1, #4
 80037fe:	430a      	orrs	r2, r1
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	4bab      	ldr	r3, [pc, #684]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	4baa      	ldr	r3, [pc, #680]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003808:	2101      	movs	r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	621a      	str	r2, [r3, #32]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 8003810:	4ba7      	ldr	r3, [pc, #668]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	4ba6      	ldr	r3, [pc, #664]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003816:	2101      	movs	r1, #1
 8003818:	438a      	bics	r2, r1
 800381a:	621a      	str	r2, [r3, #32]
 800381c:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	4ba3      	ldr	r3, [pc, #652]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d014      	beq.n	800385a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7ff fb36 	bl	8002ea0 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7ff fb31 	bl	8002ea0 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a9b      	ldr	r2, [pc, #620]	; (8003ab4 <HAL_RCC_OscConfig+0x62c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e12b      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	4b98      	ldr	r3, [pc, #608]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x3b2>
 8003858:	e013      	b.n	8003882 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7ff fb21 	bl	8002ea0 <HAL_GetTick>
 800385e:	0003      	movs	r3, r0
 8003860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	e009      	b.n	8003878 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7ff fb1c 	bl	8002ea0 <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	4a91      	ldr	r2, [pc, #580]	; (8003ab4 <HAL_RCC_OscConfig+0x62c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e116      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003882:	231f      	movs	r3, #31
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	4b87      	ldr	r3, [pc, #540]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003892:	4989      	ldr	r1, [pc, #548]	; (8003ab8 <HAL_RCC_OscConfig+0x630>)
 8003894:	400a      	ands	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2210      	movs	r2, #16
 800389e:	4013      	ands	r3, r2
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d12a      	bne.n	8003900 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038aa:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038b0:	2104      	movs	r1, #4
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80038b6:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ba:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038bc:	2101      	movs	r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff faed 	bl	8002ea0 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038cc:	f7ff fae8 	bl	8002ea0 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0e3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038de:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	2202      	movs	r2, #2
 80038e4:	4013      	ands	r3, r2
 80038e6:	d0f1      	beq.n	80038cc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	22f8      	movs	r2, #248	; 0xf8
 80038ee:	4393      	bics	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	4b6d      	ldr	r3, [pc, #436]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
 80038fe:	e034      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	3305      	adds	r3, #5
 8003906:	d111      	bne.n	800392c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800390a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	22f8      	movs	r2, #248	; 0xf8
 800391a:	4393      	bics	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800392c:	4b60      	ldr	r3, [pc, #384]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800392e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003930:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003932:	2104      	movs	r1, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003938:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800393a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393c:	4b5c      	ldr	r3, [pc, #368]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7ff faac 	bl	8002ea0 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800394e:	f7ff faa7 	bl	8002ea0 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0a2      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d1f1      	bne.n	800394e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d100      	bne.n	8003974 <HAL_RCC_OscConfig+0x4ec>
 8003972:	e097      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	220c      	movs	r2, #12
 800397a:	4013      	ands	r3, r2
 800397c:	2b08      	cmp	r3, #8
 800397e:	d100      	bne.n	8003982 <HAL_RCC_OscConfig+0x4fa>
 8003980:	e06b      	b.n	8003a5a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d14c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003990:	494a      	ldr	r1, [pc, #296]	; (8003abc <HAL_RCC_OscConfig+0x634>)
 8003992:	400a      	ands	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7ff fa83 	bl	8002ea0 <HAL_GetTick>
 800399a:	0003      	movs	r3, r0
 800399c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7ff fa7e 	bl	8002ea0 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e079      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	049b      	lsls	r3, r3, #18
 80039ba:	4013      	ands	r3, r2
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	220f      	movs	r2, #15
 80039c4:	4393      	bics	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a3a      	ldr	r2, [pc, #232]	; (8003ac0 <HAL_RCC_OscConfig+0x638>)
 80039d8:	4013      	ands	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	0449      	lsls	r1, r1, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7ff fa51 	bl	8002ea0 <HAL_GetTick>
 80039fe:	0003      	movs	r3, r0
 8003a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7ff fa4c 	bl	8002ea0 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e047      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	049b      	lsls	r3, r3, #18
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x57c>
 8003a22:	e03f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a2a:	4924      	ldr	r1, [pc, #144]	; (8003abc <HAL_RCC_OscConfig+0x634>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7ff fa36 	bl	8002ea0 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7ff fa31 	bl	8002ea0 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e02c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	049b      	lsls	r3, r3, #18
 8003a54:	4013      	ands	r3, r2
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5b2>
 8003a58:	e024      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e01f      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	23c0      	movs	r3, #192	; 0xc0
 8003a76:	025b      	lsls	r3, r3, #9
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d10e      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	220f      	movs	r2, #15
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	23f0      	movs	r3, #240	; 0xf0
 8003a94:	039b      	lsls	r3, r3, #14
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b008      	add	sp, #32
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	efffffff 	.word	0xefffffff
 8003abc:	feffffff 	.word	0xfeffffff
 8003ac0:	ffc27fff 	.word	0xffc27fff

08003ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b3      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d911      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4393      	bics	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	4013      	ands	r3, r2
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e09a      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	d015      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d006      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b24:	21e0      	movs	r1, #224	; 0xe0
 8003b26:	00c9      	lsls	r1, r1, #3
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	22f0      	movs	r2, #240	; 0xf0
 8003b32:	4393      	bics	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	029b      	lsls	r3, r3, #10
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d114      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06e      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	049b      	lsls	r3, r3, #18
 8003b72:	4013      	ands	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e062      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e05b      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7ff f980 	bl	8002ea0 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7ff f97b 	bl	8002ea0 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_RCC_ClockConfig+0x18c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e042      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1ec      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d211      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e020      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_RCC_ClockConfig+0x190>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c1c:	f000 f820 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c20:	0001      	movs	r1, r0
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	220f      	movs	r2, #15
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x194>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	000a      	movs	r2, r1
 8003c32:	40da      	lsrs	r2, r3
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x198>)
 8003c36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7ff f8eb 	bl	8002e14 <HAL_InitTick>
  
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	00001388 	.word	0x00001388
 8003c54:	fffff8ff 	.word	0xfffff8ff
 8003c58:	08009e0c 	.word	0x08009e0c
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c7a:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	220c      	movs	r2, #12
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x30>
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8e:	e02e      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c92:	613b      	str	r3, [r7, #16]
      break;
 8003c94:	e02e      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0c9b      	lsrs	r3, r3, #18
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	220f      	movs	r2, #15
 8003caa:	4013      	ands	r3, r2
 8003cac:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xac>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	23c0      	movs	r3, #192	; 0xc0
 8003cb6:	025b      	lsls	r3, r3, #9
 8003cb8:	401a      	ands	r2, r3
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	025b      	lsls	r3, r3, #9
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	480f      	ldr	r0, [pc, #60]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cc6:	f7fc fa3b 	bl	8000140 <__udivsi3>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4353      	muls	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	480a      	ldr	r0, [pc, #40]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cda:	f7fc fa31 	bl	8000140 <__udivsi3>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4353      	muls	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
      break;
 8003cec:	e002      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cf0:	613b      	str	r3, [r7, #16]
      break;
 8003cf2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cf4:	693b      	ldr	r3, [r7, #16]
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	40021000 	.word	0x40021000
 8003d04:	007a1200 	.word	0x007a1200
 8003d08:	08009e24 	.word	0x08009e24
 8003d0c:	08009e34 	.word	0x08009e34

08003d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d14:	4b02      	ldr	r3, [pc, #8]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d28:	f7ff fff2 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d2c:	0001      	movs	r1, r0
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	2207      	movs	r2, #7
 8003d36:	4013      	ands	r3, r2
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d3a:	5cd3      	ldrb	r3, [r2, r3]
 8003d3c:	40d9      	lsrs	r1, r3
 8003d3e:	000b      	movs	r3, r1
}    
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	08009e1c 	.word	0x08009e1c

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003d6c:	e08e      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2017      	movs	r0, #23
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d76:	4b5f      	ldr	r3, [pc, #380]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	055b      	lsls	r3, r3, #21
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d110      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0549      	lsls	r1, r1, #21
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	61da      	str	r2, [r3, #28]
 8003d90:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	055b      	lsls	r3, r3, #21
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	183b      	adds	r3, r7, r0
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b54      	ldr	r3, [pc, #336]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	d11a      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db0:	4b51      	ldr	r3, [pc, #324]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	0049      	lsls	r1, r1, #1
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff f86f 	bl	8002ea0 <HAL_GetTick>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7ff f86a 	bl	8002ea0 <HAL_GetTick>
 8003dcc:	0002      	movs	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e087      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de6:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003de8:	6a1a      	ldr	r2, [r3, #32]
 8003dea:	23c0      	movs	r3, #192	; 0xc0
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d034      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	23c0      	movs	r3, #192	; 0xc0
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d02c      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e08:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	0249      	lsls	r1, r1, #9
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e26:	4936      	ldr	r1, [pc, #216]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7ff f831 	bl	8002ea0 <HAL_GetTick>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e009      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7ff f82c 	bl	8002ea0 <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e048      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e58:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a25      	ldr	r2, [pc, #148]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e72:	430a      	orrs	r2, r1
 8003e74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e76:	2317      	movs	r3, #23
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e86:	4920      	ldr	r1, [pc, #128]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4013      	ands	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	2210      	movs	r2, #16
 8003eba:	4393      	bics	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	029b      	lsls	r3, r3, #10
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	4393      	bics	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b006      	add	sp, #24
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	fffffcff 	.word	0xfffffcff
 8003f00:	fffeffff 	.word	0xfffeffff
 8003f04:	00001388 	.word	0x00001388
 8003f08:	efffffff 	.word	0xefffffff

08003f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e044      	b.n	8003fa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2278      	movs	r2, #120	; 0x78
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fe fda5 	bl	8002a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2224      	movs	r2, #36	; 0x24
 8003f3a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2101      	movs	r1, #1
 8003f48:	438a      	bics	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fc0c 	bl	800476c <UART_SetConfig>
 8003f54:	0003      	movs	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e024      	b.n	8003fa8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 fd57 	bl	8004a1c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	490d      	ldr	r1, [pc, #52]	; (8003fb0 <HAL_UART_Init+0xa4>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2108      	movs	r1, #8
 8003f8a:	438a      	bics	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 fdef 	bl	8004b84 <UART_CheckIdleState>
 8003fa6:	0003      	movs	r3, r0
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	fffff7ff 	.word	0xfffff7ff

08003fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	1dbb      	adds	r3, r7, #6
 8003fc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d000      	beq.n	8003fce <HAL_UART_Transmit+0x1a>
 8003fcc:	e08d      	b.n	80040ea <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_UART_Transmit+0x28>
 8003fd4:	1dbb      	adds	r3, r7, #6
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e085      	b.n	80040ec <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	015b      	lsls	r3, r3, #5
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d109      	bne.n	8004000 <HAL_UART_Transmit+0x4c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e075      	b.n	80040ec <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2284      	movs	r2, #132	; 0x84
 8004004:	2100      	movs	r1, #0
 8004006:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2221      	movs	r2, #33	; 0x21
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400e:	f7fe ff47 	bl	8002ea0 <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1dba      	adds	r2, r7, #6
 800401a:	2150      	movs	r1, #80	; 0x50
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1dba      	adds	r2, r7, #6
 8004024:	2152      	movs	r1, #82	; 0x52
 8004026:	8812      	ldrh	r2, [r2, #0]
 8004028:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	015b      	lsls	r3, r3, #5
 8004032:	429a      	cmp	r2, r3
 8004034:	d108      	bne.n	8004048 <HAL_UART_Transmit+0x94>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e003      	b.n	8004050 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004050:	e030      	b.n	80040b4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	0013      	movs	r3, r2
 800405c:	2200      	movs	r2, #0
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	f000 fe38 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d004      	beq.n	8004072 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e03c      	b.n	80040ec <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	05d2      	lsls	r2, r2, #23
 8004082:	0dd2      	lsrs	r2, r2, #23
 8004084:	b292      	uxth	r2, r2
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	3302      	adds	r3, #2
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e008      	b.n	80040a2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b292      	uxth	r2, r2
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2252      	movs	r2, #82	; 0x52
 80040a6:	5a9b      	ldrh	r3, [r3, r2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b299      	uxth	r1, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2252      	movs	r2, #82	; 0x52
 80040b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2252      	movs	r2, #82	; 0x52
 80040b8:	5a9b      	ldrh	r3, [r3, r2]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1c8      	bne.n	8004052 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	0013      	movs	r3, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	f000 fe01 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e005      	b.n	80040ec <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b008      	add	sp, #32
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	1dbb      	adds	r3, r7, #6
 8004100:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2280      	movs	r2, #128	; 0x80
 8004106:	589b      	ldr	r3, [r3, r2]
 8004108:	2b20      	cmp	r3, #32
 800410a:	d145      	bne.n	8004198 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_UART_Receive_IT+0x26>
 8004112:	1dbb      	adds	r3, r7, #6
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e03d      	b.n	800419a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	015b      	lsls	r3, r3, #5
 8004126:	429a      	cmp	r2, r3
 8004128:	d109      	bne.n	800413e <HAL_UART_Receive_IT+0x4a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d105      	bne.n	800413e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2201      	movs	r2, #1
 8004136:	4013      	ands	r3, r2
 8004138:	d001      	beq.n	800413e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e02d      	b.n	800419a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	4013      	ands	r3, r2
 8004150:	d019      	beq.n	8004186 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	613b      	str	r3, [r7, #16]
  return(result);
 8004158:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	04c9      	lsls	r1, r1, #19
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 fe0a 	bl	8004da8 <UART_Start_Receive_IT>
 8004194:	0003      	movs	r3, r0
 8004196:	e000      	b.n	800419a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b008      	add	sp, #32
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b0ab      	sub	sp, #172	; 0xac
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	22a4      	movs	r2, #164	; 0xa4
 80041b4:	18b9      	adds	r1, r7, r2
 80041b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	20a0      	movs	r0, #160	; 0xa0
 80041c0:	1839      	adds	r1, r7, r0
 80041c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	219c      	movs	r1, #156	; 0x9c
 80041cc:	1879      	adds	r1, r7, r1
 80041ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041d0:	0011      	movs	r1, r2
 80041d2:	18bb      	adds	r3, r7, r2
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a99      	ldr	r2, [pc, #612]	; (800443c <HAL_UART_IRQHandler+0x298>)
 80041d8:	4013      	ands	r3, r2
 80041da:	2298      	movs	r2, #152	; 0x98
 80041dc:	18bc      	adds	r4, r7, r2
 80041de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80041e0:	18bb      	adds	r3, r7, r2
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2220      	movs	r2, #32
 80041ee:	4013      	ands	r3, r2
 80041f0:	d00f      	beq.n	8004212 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2220      	movs	r2, #32
 80041f8:	4013      	ands	r3, r2
 80041fa:	d00a      	beq.n	8004212 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004200:	2b00      	cmp	r3, #0
 8004202:	d100      	bne.n	8004206 <HAL_UART_IRQHandler+0x62>
 8004204:	e286      	b.n	8004714 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	0010      	movs	r0, r2
 800420e:	4798      	blx	r3
      }
      return;
 8004210:	e280      	b.n	8004714 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004212:	2398      	movs	r3, #152	; 0x98
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d100      	bne.n	800421e <HAL_UART_IRQHandler+0x7a>
 800421c:	e114      	b.n	8004448 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421e:	239c      	movs	r3, #156	; 0x9c
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2201      	movs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	d106      	bne.n	8004238 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800422a:	23a0      	movs	r3, #160	; 0xa0
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a83      	ldr	r2, [pc, #524]	; (8004440 <HAL_UART_IRQHandler+0x29c>)
 8004232:	4013      	ands	r3, r2
 8004234:	d100      	bne.n	8004238 <HAL_UART_IRQHandler+0x94>
 8004236:	e107      	b.n	8004448 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004238:	23a4      	movs	r3, #164	; 0xa4
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d012      	beq.n	800426a <HAL_UART_IRQHandler+0xc6>
 8004244:	23a0      	movs	r3, #160	; 0xa0
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2284      	movs	r2, #132	; 0x84
 800425e:	589b      	ldr	r3, [r3, r2]
 8004260:	2201      	movs	r2, #1
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2184      	movs	r1, #132	; 0x84
 8004268:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800426a:	23a4      	movs	r3, #164	; 0xa4
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d011      	beq.n	800429a <HAL_UART_IRQHandler+0xf6>
 8004276:	239c      	movs	r3, #156	; 0x9c
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d00b      	beq.n	800429a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2284      	movs	r2, #132	; 0x84
 800428e:	589b      	ldr	r3, [r3, r2]
 8004290:	2204      	movs	r2, #4
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2184      	movs	r1, #132	; 0x84
 8004298:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800429a:	23a4      	movs	r3, #164	; 0xa4
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2204      	movs	r2, #4
 80042a2:	4013      	ands	r3, r2
 80042a4:	d011      	beq.n	80042ca <HAL_UART_IRQHandler+0x126>
 80042a6:	239c      	movs	r3, #156	; 0x9c
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2201      	movs	r2, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	d00b      	beq.n	80042ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2284      	movs	r2, #132	; 0x84
 80042be:	589b      	ldr	r3, [r3, r2]
 80042c0:	2202      	movs	r2, #2
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2184      	movs	r1, #132	; 0x84
 80042c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042ca:	23a4      	movs	r3, #164	; 0xa4
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2208      	movs	r2, #8
 80042d2:	4013      	ands	r3, r2
 80042d4:	d017      	beq.n	8004306 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d6:	23a0      	movs	r3, #160	; 0xa0
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2220      	movs	r2, #32
 80042de:	4013      	ands	r3, r2
 80042e0:	d105      	bne.n	80042ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042e2:	239c      	movs	r3, #156	; 0x9c
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042ec:	d00b      	beq.n	8004306 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2208      	movs	r2, #8
 80042f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2284      	movs	r2, #132	; 0x84
 80042fa:	589b      	ldr	r3, [r3, r2]
 80042fc:	2208      	movs	r2, #8
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2184      	movs	r1, #132	; 0x84
 8004304:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004306:	23a4      	movs	r3, #164	; 0xa4
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4013      	ands	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_UART_IRQHandler+0x198>
 8004314:	23a0      	movs	r3, #160	; 0xa0
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	04db      	lsls	r3, r3, #19
 800431e:	4013      	ands	r3, r2
 8004320:	d00c      	beq.n	800433c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2284      	movs	r2, #132	; 0x84
 8004330:	589b      	ldr	r3, [r3, r2]
 8004332:	2220      	movs	r2, #32
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2184      	movs	r1, #132	; 0x84
 800433a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2284      	movs	r2, #132	; 0x84
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d100      	bne.n	8004348 <HAL_UART_IRQHandler+0x1a4>
 8004346:	e1e7      	b.n	8004718 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004348:	23a4      	movs	r3, #164	; 0xa4
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2220      	movs	r2, #32
 8004350:	4013      	ands	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004354:	23a0      	movs	r3, #160	; 0xa0
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2220      	movs	r2, #32
 800435c:	4013      	ands	r3, r2
 800435e:	d008      	beq.n	8004372 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	0010      	movs	r0, r2
 8004370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2284      	movs	r2, #132	; 0x84
 8004376:	589b      	ldr	r3, [r3, r2]
 8004378:	2194      	movs	r1, #148	; 0x94
 800437a:	187a      	adds	r2, r7, r1
 800437c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2240      	movs	r2, #64	; 0x40
 8004386:	4013      	ands	r3, r2
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d004      	beq.n	8004396 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800438c:	187b      	adds	r3, r7, r1
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2228      	movs	r2, #40	; 0x28
 8004392:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004394:	d047      	beq.n	8004426 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 fdcf 	bl	8004f3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d137      	bne.n	800441c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ac:	f3ef 8310 	mrs	r3, PRIMASK
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80043b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b4:	2090      	movs	r0, #144	; 0x90
 80043b6:	183a      	adds	r2, r7, r0
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	2301      	movs	r3, #1
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2140      	movs	r1, #64	; 0x40
 80043d2:	438a      	bics	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <HAL_UART_IRQHandler+0x2a0>)
 80043f2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fe fe71 	bl	80030e0 <HAL_DMA_Abort_IT>
 80043fe:	1e03      	subs	r3, r0, #0
 8004400:	d01a      	beq.n	8004438 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	0018      	movs	r0, r3
 800440e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e012      	b.n	8004438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f000 f995 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441a:	e00d      	b.n	8004438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f990 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e008      	b.n	8004438 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f98b 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2284      	movs	r2, #132	; 0x84
 8004432:	2100      	movs	r1, #0
 8004434:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004436:	e16f      	b.n	8004718 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	46c0      	nop			; (mov r8, r8)
    return;
 800443a:	e16d      	b.n	8004718 <HAL_UART_IRQHandler+0x574>
 800443c:	0000080f 	.word	0x0000080f
 8004440:	04000120 	.word	0x04000120
 8004444:	08005005 	.word	0x08005005

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b01      	cmp	r3, #1
 800444e:	d000      	beq.n	8004452 <HAL_UART_IRQHandler+0x2ae>
 8004450:	e139      	b.n	80046c6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004452:	23a4      	movs	r3, #164	; 0xa4
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	4013      	ands	r3, r2
 800445c:	d100      	bne.n	8004460 <HAL_UART_IRQHandler+0x2bc>
 800445e:	e132      	b.n	80046c6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004460:	23a0      	movs	r3, #160	; 0xa0
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2210      	movs	r2, #16
 8004468:	4013      	ands	r3, r2
 800446a:	d100      	bne.n	800446e <HAL_UART_IRQHandler+0x2ca>
 800446c:	e12b      	b.n	80046c6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2240      	movs	r2, #64	; 0x40
 800447e:	4013      	ands	r3, r2
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d000      	beq.n	8004486 <HAL_UART_IRQHandler+0x2e2>
 8004484:	e09f      	b.n	80045c6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	217e      	movs	r1, #126	; 0x7e
 8004490:	187b      	adds	r3, r7, r1
 8004492:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004494:	187b      	adds	r3, r7, r1
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d100      	bne.n	800449e <HAL_UART_IRQHandler+0x2fa>
 800449c:	e13e      	b.n	800471c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2258      	movs	r2, #88	; 0x58
 80044a2:	5a9b      	ldrh	r3, [r3, r2]
 80044a4:	187a      	adds	r2, r7, r1
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d300      	bcc.n	80044ae <HAL_UART_IRQHandler+0x30a>
 80044ac:	e136      	b.n	800471c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	187a      	adds	r2, r7, r1
 80044b2:	215a      	movs	r1, #90	; 0x5a
 80044b4:	8812      	ldrh	r2, [r2, #0]
 80044b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d06f      	beq.n	80045a2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80044cc:	2301      	movs	r3, #1
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4992      	ldr	r1, [pc, #584]	; (800472c <HAL_UART_IRQHandler+0x588>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	677b      	str	r3, [r7, #116]	; 0x74
 80044fe:	2301      	movs	r3, #1
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	438a      	bics	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
 800451a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8310 	mrs	r3, PRIMASK
 800452a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800452c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	673b      	str	r3, [r7, #112]	; 0x70
 8004530:	2301      	movs	r3, #1
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2140      	movs	r1, #64	; 0x40
 8004548:	438a      	bics	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004552:	f383 8810 	msr	PRIMASK, r3
}
 8004556:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	2120      	movs	r1, #32
 800455e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004566:	f3ef 8310 	mrs	r3, PRIMASK
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004570:	2301      	movs	r3, #1
 8004572:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004576:	f383 8810 	msr	PRIMASK, r3
}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2110      	movs	r1, #16
 8004588:	438a      	bics	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	0018      	movs	r0, r3
 800459e:	f7fe fd67 	bl	8003070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2258      	movs	r2, #88	; 0x58
 80045ac:	5a9a      	ldrh	r2, [r3, r2]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	215a      	movs	r1, #90	; 0x5a
 80045b2:	5a5b      	ldrh	r3, [r3, r1]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0011      	movs	r1, r2
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f8c8 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c4:	e0aa      	b.n	800471c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2258      	movs	r2, #88	; 0x58
 80045ca:	5a99      	ldrh	r1, [r3, r2]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	225a      	movs	r2, #90	; 0x5a
 80045d0:	5a9b      	ldrh	r3, [r3, r2]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	208e      	movs	r0, #142	; 0x8e
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	1a8a      	subs	r2, r1, r2
 80045da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	225a      	movs	r2, #90	; 0x5a
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d100      	bne.n	80045ea <HAL_UART_IRQHandler+0x446>
 80045e8:	e09a      	b.n	8004720 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80045ea:	183b      	adds	r3, r7, r0
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d100      	bne.n	80045f4 <HAL_UART_IRQHandler+0x450>
 80045f2:	e095      	b.n	8004720 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f4:	f3ef 8310 	mrs	r3, PRIMASK
 80045f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80045fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	2488      	movs	r4, #136	; 0x88
 80045fe:	193a      	adds	r2, r7, r4
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	2301      	movs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4945      	ldr	r1, [pc, #276]	; (8004730 <HAL_UART_IRQHandler+0x58c>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	193b      	adds	r3, r7, r4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f383 8810 	msr	PRIMASK, r3
}
 800462a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8310 	mrs	r3, PRIMASK
 8004630:	61bb      	str	r3, [r7, #24]
  return(result);
 8004632:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	2484      	movs	r4, #132	; 0x84
 8004636:	193a      	adds	r2, r7, r4
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	438a      	bics	r2, r1
 8004654:	609a      	str	r2, [r3, #8]
 8004656:	193b      	adds	r3, r7, r4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	2120      	movs	r1, #32
 800466a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004678:	f3ef 8310 	mrs	r3, PRIMASK
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	2480      	movs	r4, #128	; 0x80
 8004682:	193a      	adds	r2, r7, r4
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	2301      	movs	r3, #1
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2110      	movs	r1, #16
 800469e:	438a      	bics	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0011      	movs	r1, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f848 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c4:	e02c      	b.n	8004720 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046c6:	23a4      	movs	r3, #164	; 0xa4
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	4013      	ands	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046d2:	23a0      	movs	r3, #160	; 0xa0
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	4013      	ands	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01e      	beq.n	8004724 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	0010      	movs	r0, r2
 80046ee:	4798      	blx	r3
    }
    return;
 80046f0:	e018      	b.n	8004724 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046f2:	23a4      	movs	r3, #164	; 0xa4
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	4013      	ands	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_UART_IRQHandler+0x582>
 80046fe:	23a0      	movs	r3, #160	; 0xa0
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	4013      	ands	r3, r2
 8004708:	d00d      	beq.n	8004726 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fc90 	bl	8005032 <UART_EndTransmit_IT>
    return;
 8004712:	e008      	b.n	8004726 <HAL_UART_IRQHandler+0x582>
      return;
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	e006      	b.n	8004726 <HAL_UART_IRQHandler+0x582>
    return;
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	e004      	b.n	8004726 <HAL_UART_IRQHandler+0x582>
      return;
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	e002      	b.n	8004726 <HAL_UART_IRQHandler+0x582>
      return;
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	e000      	b.n	8004726 <HAL_UART_IRQHandler+0x582>
    return;
 8004724:	46c0      	nop			; (mov r8, r8)
  }

}
 8004726:	46bd      	mov	sp, r7
 8004728:	b02b      	add	sp, #172	; 0xac
 800472a:	bd90      	pop	{r4, r7, pc}
 800472c:	fffffeff 	.word	0xfffffeff
 8004730:	fffffedf 	.word	0xfffffedf

08004734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	000a      	movs	r2, r1
 800475e:	1cbb      	adds	r3, r7, #2
 8004760:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004774:	231e      	movs	r3, #30
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a97      	ldr	r2, [pc, #604]	; (80049f8 <UART_SetConfig+0x28c>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a92      	ldr	r2, [pc, #584]	; (80049fc <UART_SetConfig+0x290>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	0019      	movs	r1, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a89      	ldr	r2, [pc, #548]	; (8004a00 <UART_SetConfig+0x294>)
 80047da:	4013      	ands	r3, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a85      	ldr	r2, [pc, #532]	; (8004a04 <UART_SetConfig+0x298>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d127      	bne.n	8004842 <UART_SetConfig+0xd6>
 80047f2:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <UART_SetConfig+0x29c>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	2203      	movs	r2, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d00d      	beq.n	800481a <UART_SetConfig+0xae>
 80047fe:	d81b      	bhi.n	8004838 <UART_SetConfig+0xcc>
 8004800:	2b02      	cmp	r3, #2
 8004802:	d014      	beq.n	800482e <UART_SetConfig+0xc2>
 8004804:	d818      	bhi.n	8004838 <UART_SetConfig+0xcc>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <UART_SetConfig+0xa4>
 800480a:	2b01      	cmp	r3, #1
 800480c:	d00a      	beq.n	8004824 <UART_SetConfig+0xb8>
 800480e:	e013      	b.n	8004838 <UART_SetConfig+0xcc>
 8004810:	231f      	movs	r3, #31
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e035      	b.n	8004886 <UART_SetConfig+0x11a>
 800481a:	231f      	movs	r3, #31
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e030      	b.n	8004886 <UART_SetConfig+0x11a>
 8004824:	231f      	movs	r3, #31
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	2204      	movs	r2, #4
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e02b      	b.n	8004886 <UART_SetConfig+0x11a>
 800482e:	231f      	movs	r3, #31
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2208      	movs	r2, #8
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e026      	b.n	8004886 <UART_SetConfig+0x11a>
 8004838:	231f      	movs	r3, #31
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2210      	movs	r2, #16
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e021      	b.n	8004886 <UART_SetConfig+0x11a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a71      	ldr	r2, [pc, #452]	; (8004a0c <UART_SetConfig+0x2a0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d104      	bne.n	8004856 <UART_SetConfig+0xea>
 800484c:	231f      	movs	r3, #31
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e017      	b.n	8004886 <UART_SetConfig+0x11a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6d      	ldr	r2, [pc, #436]	; (8004a10 <UART_SetConfig+0x2a4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d104      	bne.n	800486a <UART_SetConfig+0xfe>
 8004860:	231f      	movs	r3, #31
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e00d      	b.n	8004886 <UART_SetConfig+0x11a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a69      	ldr	r2, [pc, #420]	; (8004a14 <UART_SetConfig+0x2a8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d104      	bne.n	800487e <UART_SetConfig+0x112>
 8004874:	231f      	movs	r3, #31
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e003      	b.n	8004886 <UART_SetConfig+0x11a>
 800487e:	231f      	movs	r3, #31
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2210      	movs	r2, #16
 8004884:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	429a      	cmp	r2, r3
 8004890:	d15c      	bne.n	800494c <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8004892:	231f      	movs	r3, #31
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d015      	beq.n	80048c8 <UART_SetConfig+0x15c>
 800489c:	dc18      	bgt.n	80048d0 <UART_SetConfig+0x164>
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d00d      	beq.n	80048be <UART_SetConfig+0x152>
 80048a2:	dc15      	bgt.n	80048d0 <UART_SetConfig+0x164>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <UART_SetConfig+0x142>
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d005      	beq.n	80048b8 <UART_SetConfig+0x14c>
 80048ac:	e010      	b.n	80048d0 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7ff fa39 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 80048b2:	0003      	movs	r3, r0
 80048b4:	61bb      	str	r3, [r7, #24]
        break;
 80048b6:	e012      	b.n	80048de <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b57      	ldr	r3, [pc, #348]	; (8004a18 <UART_SetConfig+0x2ac>)
 80048ba:	61bb      	str	r3, [r7, #24]
        break;
 80048bc:	e00f      	b.n	80048de <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7ff f9cf 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 80048c2:	0003      	movs	r3, r0
 80048c4:	61bb      	str	r3, [r7, #24]
        break;
 80048c6:	e00a      	b.n	80048de <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	61bb      	str	r3, [r7, #24]
        break;
 80048ce:	e006      	b.n	80048de <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d4:	231e      	movs	r3, #30
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
        break;
 80048dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d100      	bne.n	80048e6 <UART_SetConfig+0x17a>
 80048e4:	e07a      	b.n	80049dc <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	18d2      	adds	r2, r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	0019      	movs	r1, r3
 80048f8:	0010      	movs	r0, r2
 80048fa:	f7fb fc21 	bl	8000140 <__udivsi3>
 80048fe:	0003      	movs	r3, r0
 8004900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b0f      	cmp	r3, #15
 8004906:	d91c      	bls.n	8004942 <UART_SetConfig+0x1d6>
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	025b      	lsls	r3, r3, #9
 800490e:	429a      	cmp	r2, r3
 8004910:	d217      	bcs.n	8004942 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	b29a      	uxth	r2, r3
 8004916:	200e      	movs	r0, #14
 8004918:	183b      	adds	r3, r7, r0
 800491a:	210f      	movs	r1, #15
 800491c:	438a      	bics	r2, r1
 800491e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	2207      	movs	r2, #7
 8004928:	4013      	ands	r3, r2
 800492a:	b299      	uxth	r1, r3
 800492c:	183b      	adds	r3, r7, r0
 800492e:	183a      	adds	r2, r7, r0
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	183a      	adds	r2, r7, r0
 800493c:	8812      	ldrh	r2, [r2, #0]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e04c      	b.n	80049dc <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8004942:	231e      	movs	r3, #30
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e047      	b.n	80049dc <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494c:	231f      	movs	r3, #31
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d015      	beq.n	8004982 <UART_SetConfig+0x216>
 8004956:	dc18      	bgt.n	800498a <UART_SetConfig+0x21e>
 8004958:	2b04      	cmp	r3, #4
 800495a:	d00d      	beq.n	8004978 <UART_SetConfig+0x20c>
 800495c:	dc15      	bgt.n	800498a <UART_SetConfig+0x21e>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <UART_SetConfig+0x1fc>
 8004962:	2b02      	cmp	r3, #2
 8004964:	d005      	beq.n	8004972 <UART_SetConfig+0x206>
 8004966:	e010      	b.n	800498a <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7ff f9dc 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 800496c:	0003      	movs	r3, r0
 800496e:	61bb      	str	r3, [r7, #24]
        break;
 8004970:	e012      	b.n	8004998 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <UART_SetConfig+0x2ac>)
 8004974:	61bb      	str	r3, [r7, #24]
        break;
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004978:	f7ff f972 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 800497c:	0003      	movs	r3, r0
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e00a      	b.n	8004998 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e006      	b.n	8004998 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498e:	231e      	movs	r3, #30
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
        break;
 8004996:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01e      	beq.n	80049dc <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	085a      	lsrs	r2, r3, #1
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	18d2      	adds	r2, r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0019      	movs	r1, r3
 80049ae:	0010      	movs	r0, r2
 80049b0:	f7fb fbc6 	bl	8000140 <__udivsi3>
 80049b4:	0003      	movs	r3, r0
 80049b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d90a      	bls.n	80049d4 <UART_SetConfig+0x268>
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	025b      	lsls	r3, r3, #9
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d205      	bcs.n	80049d4 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e003      	b.n	80049dc <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80049d4:	231e      	movs	r3, #30
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049e8:	231e      	movs	r3, #30
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b008      	add	sp, #32
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	efff69f3 	.word	0xefff69f3
 80049fc:	ffffcfff 	.word	0xffffcfff
 8004a00:	fffff4ff 	.word	0xfffff4ff
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40004400 	.word	0x40004400
 8004a10:	40004800 	.word	0x40004800
 8004a14:	40004c00 	.word	0x40004c00
 8004a18:	007a1200 	.word	0x007a1200

08004a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a4a      	ldr	r2, [pc, #296]	; (8004b60 <UART_AdvFeatureConfig+0x144>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <UART_AdvFeatureConfig+0x148>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a3b      	ldr	r2, [pc, #236]	; (8004b68 <UART_AdvFeatureConfig+0x14c>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2208      	movs	r2, #8
 8004a90:	4013      	ands	r3, r2
 8004a92:	d00b      	beq.n	8004aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4a34      	ldr	r2, [pc, #208]	; (8004b6c <UART_AdvFeatureConfig+0x150>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <UART_AdvFeatureConfig+0x154>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <UART_AdvFeatureConfig+0x158>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2240      	movs	r2, #64	; 0x40
 8004af6:	4013      	ands	r3, r2
 8004af8:	d01d      	beq.n	8004b36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <UART_AdvFeatureConfig+0x15c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	035b      	lsls	r3, r3, #13
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d10b      	bne.n	8004b36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <UART_AdvFeatureConfig+0x160>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <UART_AdvFeatureConfig+0x164>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	fffdffff 	.word	0xfffdffff
 8004b64:	fffeffff 	.word	0xfffeffff
 8004b68:	fffbffff 	.word	0xfffbffff
 8004b6c:	ffff7fff 	.word	0xffff7fff
 8004b70:	ffffefff 	.word	0xffffefff
 8004b74:	ffffdfff 	.word	0xffffdfff
 8004b78:	ffefffff 	.word	0xffefffff
 8004b7c:	ff9fffff 	.word	0xff9fffff
 8004b80:	fff7ffff 	.word	0xfff7ffff

08004b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b092      	sub	sp, #72	; 0x48
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2284      	movs	r2, #132	; 0x84
 8004b90:	2100      	movs	r1, #0
 8004b92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b94:	f7fe f984 	bl	8002ea0 <HAL_GetTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d12c      	bne.n	8004c04 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	0391      	lsls	r1, r2, #14
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4a46      	ldr	r2, [pc, #280]	; (8004ccc <UART_CheckIdleState+0x148>)
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f000 f88c 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d021      	beq.n	8004c04 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bca:	2301      	movs	r3, #1
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	f383 8810 	msr	PRIMASK, r3
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	438a      	bics	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2278      	movs	r2, #120	; 0x78
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e05f      	b.n	8004cc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d146      	bne.n	8004ca0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	03d1      	lsls	r1, r2, #15
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <UART_CheckIdleState+0x148>)
 8004c1c:	9200      	str	r2, [sp, #0]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f000 f858 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d03b      	beq.n	8004ca0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
 8004c32:	2301      	movs	r3, #1
 8004c34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4921      	ldr	r1, [pc, #132]	; (8004cd0 <UART_CheckIdleState+0x14c>)
 8004c4a:	400a      	ands	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	438a      	bics	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f383 8810 	msr	PRIMASK, r3
}
 8004c8a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	2120      	movs	r1, #32
 8004c92:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2278      	movs	r2, #120	; 0x78
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e011      	b.n	8004cc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	2120      	movs	r1, #32
 8004cac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2278      	movs	r2, #120	; 0x78
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b010      	add	sp, #64	; 0x40
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	01ffffff 	.word	0x01ffffff
 8004cd0:	fffffedf 	.word	0xfffffedf

08004cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	1dfb      	adds	r3, r7, #7
 8004ce2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce4:	e04b      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d048      	beq.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cec:	f7fe f8d8 	bl	8002ea0 <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e04b      	b.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d035      	beq.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d111      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2208      	movs	r2, #8
 8004d26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f000 f906 	bl	8004f3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2284      	movs	r2, #132	; 0x84
 8004d34:	2108      	movs	r1, #8
 8004d36:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2278      	movs	r2, #120	; 0x78
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e02c      	b.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	401a      	ands	r2, r3
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d112      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2280      	movs	r2, #128	; 0x80
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 f8e9 	bl	8004f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2284      	movs	r2, #132	; 0x84
 8004d6e:	2120      	movs	r1, #32
 8004d70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2278      	movs	r2, #120	; 0x78
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e00f      	b.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	425a      	negs	r2, r3
 8004d8e:	4153      	adcs	r3, r2
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	001a      	movs	r2, r3
 8004d94:	1dfb      	adds	r3, r7, #7
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d0a4      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b090      	sub	sp, #64	; 0x40
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	1dbb      	adds	r3, r7, #6
 8004db4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1dba      	adds	r2, r7, #6
 8004dc0:	2158      	movs	r1, #88	; 0x58
 8004dc2:	8812      	ldrh	r2, [r2, #0]
 8004dc4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1dba      	adds	r2, r7, #6
 8004dca:	215a      	movs	r1, #90	; 0x5a
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	015b      	lsls	r3, r3, #5
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d10d      	bne.n	8004dfe <UART_Start_Receive_IT+0x56>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <UART_Start_Receive_IT+0x4c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	225c      	movs	r2, #92	; 0x5c
 8004dee:	4950      	ldr	r1, [pc, #320]	; (8004f30 <UART_Start_Receive_IT+0x188>)
 8004df0:	5299      	strh	r1, [r3, r2]
 8004df2:	e02e      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	225c      	movs	r2, #92	; 0x5c
 8004df8:	21ff      	movs	r1, #255	; 0xff
 8004dfa:	5299      	strh	r1, [r3, r2]
 8004dfc:	e029      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <UART_Start_Receive_IT+0x7a>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <UART_Start_Receive_IT+0x70>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	225c      	movs	r2, #92	; 0x5c
 8004e12:	21ff      	movs	r1, #255	; 0xff
 8004e14:	5299      	strh	r1, [r3, r2]
 8004e16:	e01c      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	225c      	movs	r2, #92	; 0x5c
 8004e1c:	217f      	movs	r1, #127	; 0x7f
 8004e1e:	5299      	strh	r1, [r3, r2]
 8004e20:	e017      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	055b      	lsls	r3, r3, #21
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d10d      	bne.n	8004e4a <UART_Start_Receive_IT+0xa2>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <UART_Start_Receive_IT+0x98>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	225c      	movs	r2, #92	; 0x5c
 8004e3a:	217f      	movs	r1, #127	; 0x7f
 8004e3c:	5299      	strh	r1, [r3, r2]
 8004e3e:	e008      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	225c      	movs	r2, #92	; 0x5c
 8004e44:	213f      	movs	r1, #63	; 0x3f
 8004e46:	5299      	strh	r1, [r3, r2]
 8004e48:	e003      	b.n	8004e52 <UART_Start_Receive_IT+0xaa>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	225c      	movs	r2, #92	; 0x5c
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2284      	movs	r2, #132	; 0x84
 8004e56:	2100      	movs	r1, #0
 8004e58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	2122      	movs	r1, #34	; 0x22
 8004e60:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e62:	f3ef 8310 	mrs	r3, PRIMASK
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	f383 8810 	msr	PRIMASK, r3
}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2101      	movs	r1, #1
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d107      	bne.n	8004eb0 <UART_Start_Receive_IT+0x108>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <UART_Start_Receive_IT+0x18c>)
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
 8004eae:	e002      	b.n	8004eb6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <UART_Start_Receive_IT+0x190>)
 8004eb4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d019      	beq.n	8004ef2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	2301      	movs	r3, #1
 8004eca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2190      	movs	r1, #144	; 0x90
 8004ee0:	0049      	lsls	r1, r1, #1
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	e018      	b.n	8004f24 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2120      	movs	r1, #32
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b010      	add	sp, #64	; 0x40
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	000001ff 	.word	0x000001ff
 8004f34:	08005241 	.word	0x08005241
 8004f38:	08005089 	.word	0x08005089

08004f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08e      	sub	sp, #56	; 0x38
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	617b      	str	r3, [r7, #20]
  return(result);
 8004f4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4926      	ldr	r1, [pc, #152]	; (8005000 <UART_EndRxTransfer+0xc4>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f76:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	2301      	movs	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	438a      	bics	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			; (mov r8, r8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	438a      	bics	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b00e      	add	sp, #56	; 0x38
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	fffffedf 	.word	0xfffffedf

08005004 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	225a      	movs	r2, #90	; 0x5a
 8005016:	2100      	movs	r1, #0
 8005018:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2252      	movs	r2, #82	; 0x52
 800501e:	2100      	movs	r1, #0
 8005020:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff fb8d 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005040:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	2301      	movs	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2140      	movs	r1, #64	; 0x40
 800505c:	438a      	bics	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f7ff fb5a 	bl	8004734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b006      	add	sp, #24
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b094      	sub	sp, #80	; 0x50
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005090:	204e      	movs	r0, #78	; 0x4e
 8005092:	183b      	adds	r3, r7, r0
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	215c      	movs	r1, #92	; 0x5c
 8005098:	5a52      	ldrh	r2, [r2, r1]
 800509a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2280      	movs	r2, #128	; 0x80
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b22      	cmp	r3, #34	; 0x22
 80050a4:	d000      	beq.n	80050a8 <UART_RxISR_8BIT+0x20>
 80050a6:	e0ba      	b.n	800521e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	214c      	movs	r1, #76	; 0x4c
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80050b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b2d9      	uxtb	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	400a      	ands	r2, r1
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225a      	movs	r2, #90	; 0x5a
 80050d8:	5a9b      	ldrh	r3, [r3, r2]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b299      	uxth	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225a      	movs	r2, #90	; 0x5a
 80050e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	225a      	movs	r2, #90	; 0x5a
 80050ea:	5a9b      	ldrh	r3, [r3, r2]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <UART_RxISR_8BIT+0x6c>
 80050f2:	e09c      	b.n	800522e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f4:	f3ef 8310 	mrs	r3, PRIMASK
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fe:	2301      	movs	r3, #1
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4948      	ldr	r1, [pc, #288]	; (8005238 <UART_RxISR_8BIT+0x1b0>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	647b      	str	r3, [r7, #68]	; 0x44
 8005130:	2301      	movs	r3, #1
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	2120      	movs	r1, #32
 800515e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	4013      	ands	r3, r2
 8005178:	d018      	beq.n	80051ac <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517a:	f3ef 8310 	mrs	r3, PRIMASK
 800517e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005180:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005182:	643b      	str	r3, [r7, #64]	; 0x40
 8005184:	2301      	movs	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4928      	ldr	r1, [pc, #160]	; (800523c <UART_RxISR_8BIT+0x1b4>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f383 8810 	msr	PRIMASK, r3
}
 80051aa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d12f      	bne.n	8005214 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ba:	f3ef 8310 	mrs	r3, PRIMASK
 80051be:	60fb      	str	r3, [r7, #12]
  return(result);
 80051c0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	2301      	movs	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2110      	movs	r1, #16
 80051dc:	438a      	bics	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	2210      	movs	r2, #16
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d103      	bne.n	8005202 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2210      	movs	r2, #16
 8005200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2258      	movs	r2, #88	; 0x58
 8005206:	5a9a      	ldrh	r2, [r3, r2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0011      	movs	r1, r2
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff faa1 	bl	8004754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005212:	e00c      	b.n	800522e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f7fd fb76 	bl	8002908 <HAL_UART_RxCpltCallback>
}
 800521c:	e007      	b.n	800522e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2108      	movs	r1, #8
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b014      	add	sp, #80	; 0x50
 8005234:	bd80      	pop	{r7, pc}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	fffffedf 	.word	0xfffffedf
 800523c:	fbffffff 	.word	0xfbffffff

08005240 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b094      	sub	sp, #80	; 0x50
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005248:	204e      	movs	r0, #78	; 0x4e
 800524a:	183b      	adds	r3, r7, r0
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	215c      	movs	r1, #92	; 0x5c
 8005250:	5a52      	ldrh	r2, [r2, r1]
 8005252:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	589b      	ldr	r3, [r3, r2]
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d000      	beq.n	8005260 <UART_RxISR_16BIT+0x20>
 800525e:	e0ba      	b.n	80053d6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	214c      	movs	r1, #76	; 0x4c
 8005266:	187b      	adds	r3, r7, r1
 8005268:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800526a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005272:	187b      	adds	r3, r7, r1
 8005274:	183a      	adds	r2, r7, r0
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	4013      	ands	r3, r2
 800527c:	b29a      	uxth	r2, r3
 800527e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005280:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	225a      	movs	r2, #90	; 0x5a
 8005290:	5a9b      	ldrh	r3, [r3, r2]
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b299      	uxth	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	225a      	movs	r2, #90	; 0x5a
 800529c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	225a      	movs	r2, #90	; 0x5a
 80052a2:	5a9b      	ldrh	r3, [r3, r2]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d000      	beq.n	80052ac <UART_RxISR_16BIT+0x6c>
 80052aa:	e09c      	b.n	80053e6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ac:	f3ef 8310 	mrs	r3, PRIMASK
 80052b0:	623b      	str	r3, [r7, #32]
  return(result);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	2301      	movs	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f383 8810 	msr	PRIMASK, r3
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4948      	ldr	r1, [pc, #288]	; (80053f0 <UART_RxISR_16BIT+0x1b0>)
 80052ce:	400a      	ands	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	f383 8810 	msr	PRIMASK, r3
}
 80052dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	2301      	movs	r3, #1
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2101      	movs	r1, #1
 8005300:	438a      	bics	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	2120      	movs	r1, #32
 8005316:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	4013      	ands	r3, r2
 8005330:	d018      	beq.n	8005364 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005332:	f3ef 8310 	mrs	r3, PRIMASK
 8005336:	617b      	str	r3, [r7, #20]
  return(result);
 8005338:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	2301      	movs	r3, #1
 800533e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4928      	ldr	r1, [pc, #160]	; (80053f4 <UART_RxISR_16BIT+0x1b4>)
 8005354:	400a      	ands	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f383 8810 	msr	PRIMASK, r3
}
 8005362:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005368:	2b01      	cmp	r3, #1
 800536a:	d12f      	bne.n	80053cc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	60bb      	str	r3, [r7, #8]
  return(result);
 8005378:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
 800537c:	2301      	movs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2110      	movs	r1, #16
 8005394:	438a      	bics	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	2210      	movs	r2, #16
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d103      	bne.n	80053ba <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2258      	movs	r2, #88	; 0x58
 80053be:	5a9a      	ldrh	r2, [r3, r2]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7ff f9c5 	bl	8004754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053ca:	e00c      	b.n	80053e6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f7fd fa9a 	bl	8002908 <HAL_UART_RxCpltCallback>
}
 80053d4:	e007      	b.n	80053e6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2108      	movs	r1, #8
 80053e2:	430a      	orrs	r2, r1
 80053e4:	619a      	str	r2, [r3, #24]
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b014      	add	sp, #80	; 0x50
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	fffffedf 	.word	0xfffffedf
 80053f4:	fbffffff 	.word	0xfbffffff

080053f8 <__cvt>:
 80053f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fa:	001e      	movs	r6, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	0014      	movs	r4, r2
 8005400:	b08b      	sub	sp, #44	; 0x2c
 8005402:	429e      	cmp	r6, r3
 8005404:	da04      	bge.n	8005410 <__cvt+0x18>
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	0609      	lsls	r1, r1, #24
 800540a:	1873      	adds	r3, r6, r1
 800540c:	001e      	movs	r6, r3
 800540e:	232d      	movs	r3, #45	; 0x2d
 8005410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005412:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	2320      	movs	r3, #32
 8005418:	2203      	movs	r2, #3
 800541a:	439f      	bics	r7, r3
 800541c:	2f46      	cmp	r7, #70	; 0x46
 800541e:	d007      	beq.n	8005430 <__cvt+0x38>
 8005420:	003b      	movs	r3, r7
 8005422:	3b45      	subs	r3, #69	; 0x45
 8005424:	4259      	negs	r1, r3
 8005426:	414b      	adcs	r3, r1
 8005428:	9910      	ldr	r1, [sp, #64]	; 0x40
 800542a:	3a01      	subs	r2, #1
 800542c:	18cb      	adds	r3, r1, r3
 800542e:	9310      	str	r3, [sp, #64]	; 0x40
 8005430:	ab09      	add	r3, sp, #36	; 0x24
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	ab08      	add	r3, sp, #32
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800543a:	9200      	str	r2, [sp, #0]
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005440:	0022      	movs	r2, r4
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	0033      	movs	r3, r6
 8005446:	f001 f8b3 	bl	80065b0 <_dtoa_r>
 800544a:	0005      	movs	r5, r0
 800544c:	2f47      	cmp	r7, #71	; 0x47
 800544e:	d102      	bne.n	8005456 <__cvt+0x5e>
 8005450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005452:	07db      	lsls	r3, r3, #31
 8005454:	d528      	bpl.n	80054a8 <__cvt+0xb0>
 8005456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005458:	18eb      	adds	r3, r5, r3
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	2f46      	cmp	r7, #70	; 0x46
 800545e:	d114      	bne.n	800548a <__cvt+0x92>
 8005460:	782b      	ldrb	r3, [r5, #0]
 8005462:	2b30      	cmp	r3, #48	; 0x30
 8005464:	d10c      	bne.n	8005480 <__cvt+0x88>
 8005466:	2200      	movs	r2, #0
 8005468:	2300      	movs	r3, #0
 800546a:	0020      	movs	r0, r4
 800546c:	0031      	movs	r1, r6
 800546e:	f7fa ffed 	bl	800044c <__aeabi_dcmpeq>
 8005472:	2800      	cmp	r0, #0
 8005474:	d104      	bne.n	8005480 <__cvt+0x88>
 8005476:	2301      	movs	r3, #1
 8005478:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005482:	9a07      	ldr	r2, [sp, #28]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	18d3      	adds	r3, r2, r3
 8005488:	9307      	str	r3, [sp, #28]
 800548a:	2200      	movs	r2, #0
 800548c:	2300      	movs	r3, #0
 800548e:	0020      	movs	r0, r4
 8005490:	0031      	movs	r1, r6
 8005492:	f7fa ffdb 	bl	800044c <__aeabi_dcmpeq>
 8005496:	2800      	cmp	r0, #0
 8005498:	d001      	beq.n	800549e <__cvt+0xa6>
 800549a:	9b07      	ldr	r3, [sp, #28]
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	2230      	movs	r2, #48	; 0x30
 80054a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a2:	9907      	ldr	r1, [sp, #28]
 80054a4:	428b      	cmp	r3, r1
 80054a6:	d306      	bcc.n	80054b6 <__cvt+0xbe>
 80054a8:	0028      	movs	r0, r5
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054ae:	1b5b      	subs	r3, r3, r5
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	b00b      	add	sp, #44	; 0x2c
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b6:	1c59      	adds	r1, r3, #1
 80054b8:	9109      	str	r1, [sp, #36]	; 0x24
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e7f0      	b.n	80054a0 <__cvt+0xa8>

080054be <__exponent>:
 80054be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c0:	1c83      	adds	r3, r0, #2
 80054c2:	b087      	sub	sp, #28
 80054c4:	9303      	str	r3, [sp, #12]
 80054c6:	0005      	movs	r5, r0
 80054c8:	000c      	movs	r4, r1
 80054ca:	232b      	movs	r3, #43	; 0x2b
 80054cc:	7002      	strb	r2, [r0, #0]
 80054ce:	2900      	cmp	r1, #0
 80054d0:	da01      	bge.n	80054d6 <__exponent+0x18>
 80054d2:	424c      	negs	r4, r1
 80054d4:	3302      	adds	r3, #2
 80054d6:	706b      	strb	r3, [r5, #1]
 80054d8:	2c09      	cmp	r4, #9
 80054da:	dd2f      	ble.n	800553c <__exponent+0x7e>
 80054dc:	270a      	movs	r7, #10
 80054de:	ab04      	add	r3, sp, #16
 80054e0:	1dde      	adds	r6, r3, #7
 80054e2:	0020      	movs	r0, r4
 80054e4:	0039      	movs	r1, r7
 80054e6:	9601      	str	r6, [sp, #4]
 80054e8:	f7fa ff9a 	bl	8000420 <__aeabi_idivmod>
 80054ec:	3e01      	subs	r6, #1
 80054ee:	3130      	adds	r1, #48	; 0x30
 80054f0:	0020      	movs	r0, r4
 80054f2:	7031      	strb	r1, [r6, #0]
 80054f4:	0039      	movs	r1, r7
 80054f6:	9402      	str	r4, [sp, #8]
 80054f8:	f7fa feac 	bl	8000254 <__divsi3>
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	0004      	movs	r4, r0
 8005500:	2b63      	cmp	r3, #99	; 0x63
 8005502:	dcee      	bgt.n	80054e2 <__exponent+0x24>
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	3430      	adds	r4, #48	; 0x30
 8005508:	1e9a      	subs	r2, r3, #2
 800550a:	0013      	movs	r3, r2
 800550c:	9903      	ldr	r1, [sp, #12]
 800550e:	7014      	strb	r4, [r2, #0]
 8005510:	a804      	add	r0, sp, #16
 8005512:	3007      	adds	r0, #7
 8005514:	4298      	cmp	r0, r3
 8005516:	d80c      	bhi.n	8005532 <__exponent+0x74>
 8005518:	2300      	movs	r3, #0
 800551a:	4282      	cmp	r2, r0
 800551c:	d804      	bhi.n	8005528 <__exponent+0x6a>
 800551e:	aa04      	add	r2, sp, #16
 8005520:	3309      	adds	r3, #9
 8005522:	189b      	adds	r3, r3, r2
 8005524:	9a01      	ldr	r2, [sp, #4]
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	9a03      	ldr	r2, [sp, #12]
 800552a:	18d3      	adds	r3, r2, r3
 800552c:	1b58      	subs	r0, r3, r5
 800552e:	b007      	add	sp, #28
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	7818      	ldrb	r0, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	7008      	strb	r0, [r1, #0]
 8005538:	3101      	adds	r1, #1
 800553a:	e7e9      	b.n	8005510 <__exponent+0x52>
 800553c:	2330      	movs	r3, #48	; 0x30
 800553e:	3430      	adds	r4, #48	; 0x30
 8005540:	70ab      	strb	r3, [r5, #2]
 8005542:	70ec      	strb	r4, [r5, #3]
 8005544:	1d2b      	adds	r3, r5, #4
 8005546:	e7f1      	b.n	800552c <__exponent+0x6e>

08005548 <_printf_float>:
 8005548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554a:	b095      	sub	sp, #84	; 0x54
 800554c:	000c      	movs	r4, r1
 800554e:	9208      	str	r2, [sp, #32]
 8005550:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	0007      	movs	r7, r0
 8005556:	f000 ff0d 	bl	8006374 <_localeconv_r>
 800555a:	6803      	ldr	r3, [r0, #0]
 800555c:	0018      	movs	r0, r3
 800555e:	930c      	str	r3, [sp, #48]	; 0x30
 8005560:	f7fa fdd2 	bl	8000108 <strlen>
 8005564:	2300      	movs	r3, #0
 8005566:	9312      	str	r3, [sp, #72]	; 0x48
 8005568:	7e23      	ldrb	r3, [r4, #24]
 800556a:	2207      	movs	r2, #7
 800556c:	930a      	str	r3, [sp, #40]	; 0x28
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	900d      	str	r0, [sp, #52]	; 0x34
 8005572:	930b      	str	r3, [sp, #44]	; 0x2c
 8005574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005576:	682b      	ldr	r3, [r5, #0]
 8005578:	05c9      	lsls	r1, r1, #23
 800557a:	d547      	bpl.n	800560c <_printf_float+0xc4>
 800557c:	189b      	adds	r3, r3, r2
 800557e:	4393      	bics	r3, r2
 8005580:	001a      	movs	r2, r3
 8005582:	3208      	adds	r2, #8
 8005584:	602a      	str	r2, [r5, #0]
 8005586:	681e      	ldr	r6, [r3, #0]
 8005588:	685d      	ldr	r5, [r3, #4]
 800558a:	0032      	movs	r2, r6
 800558c:	002b      	movs	r3, r5
 800558e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005590:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005592:	2201      	movs	r2, #1
 8005594:	006b      	lsls	r3, r5, #1
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	930e      	str	r3, [sp, #56]	; 0x38
 800559a:	0030      	movs	r0, r6
 800559c:	4bab      	ldr	r3, [pc, #684]	; (800584c <_printf_float+0x304>)
 800559e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80055a0:	4252      	negs	r2, r2
 80055a2:	f7fc fea9 	bl	80022f8 <__aeabi_dcmpun>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d132      	bne.n	8005610 <_printf_float+0xc8>
 80055aa:	2201      	movs	r2, #1
 80055ac:	0030      	movs	r0, r6
 80055ae:	4ba7      	ldr	r3, [pc, #668]	; (800584c <_printf_float+0x304>)
 80055b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80055b2:	4252      	negs	r2, r2
 80055b4:	f7fa ff5a 	bl	800046c <__aeabi_dcmple>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d129      	bne.n	8005610 <_printf_float+0xc8>
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	0030      	movs	r0, r6
 80055c2:	0029      	movs	r1, r5
 80055c4:	f7fa ff48 	bl	8000458 <__aeabi_dcmplt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d003      	beq.n	80055d4 <_printf_float+0x8c>
 80055cc:	0023      	movs	r3, r4
 80055ce:	222d      	movs	r2, #45	; 0x2d
 80055d0:	3343      	adds	r3, #67	; 0x43
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d6:	4d9e      	ldr	r5, [pc, #632]	; (8005850 <_printf_float+0x308>)
 80055d8:	2b47      	cmp	r3, #71	; 0x47
 80055da:	d900      	bls.n	80055de <_printf_float+0x96>
 80055dc:	4d9d      	ldr	r5, [pc, #628]	; (8005854 <_printf_float+0x30c>)
 80055de:	2303      	movs	r3, #3
 80055e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	3301      	adds	r3, #1
 80055e6:	439a      	bics	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	6022      	str	r2, [r4, #0]
 80055ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f0:	0021      	movs	r1, r4
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	0038      	movs	r0, r7
 80055f6:	9b08      	ldr	r3, [sp, #32]
 80055f8:	aa13      	add	r2, sp, #76	; 0x4c
 80055fa:	f000 f9fb 	bl	80059f4 <_printf_common>
 80055fe:	3001      	adds	r0, #1
 8005600:	d000      	beq.n	8005604 <_printf_float+0xbc>
 8005602:	e0a3      	b.n	800574c <_printf_float+0x204>
 8005604:	2001      	movs	r0, #1
 8005606:	4240      	negs	r0, r0
 8005608:	b015      	add	sp, #84	; 0x54
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560c:	3307      	adds	r3, #7
 800560e:	e7b6      	b.n	800557e <_printf_float+0x36>
 8005610:	0032      	movs	r2, r6
 8005612:	002b      	movs	r3, r5
 8005614:	0030      	movs	r0, r6
 8005616:	0029      	movs	r1, r5
 8005618:	f7fc fe6e 	bl	80022f8 <__aeabi_dcmpun>
 800561c:	2800      	cmp	r0, #0
 800561e:	d00b      	beq.n	8005638 <_printf_float+0xf0>
 8005620:	2d00      	cmp	r5, #0
 8005622:	da03      	bge.n	800562c <_printf_float+0xe4>
 8005624:	0023      	movs	r3, r4
 8005626:	222d      	movs	r2, #45	; 0x2d
 8005628:	3343      	adds	r3, #67	; 0x43
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562e:	4d8a      	ldr	r5, [pc, #552]	; (8005858 <_printf_float+0x310>)
 8005630:	2b47      	cmp	r3, #71	; 0x47
 8005632:	d9d4      	bls.n	80055de <_printf_float+0x96>
 8005634:	4d89      	ldr	r5, [pc, #548]	; (800585c <_printf_float+0x314>)
 8005636:	e7d2      	b.n	80055de <_printf_float+0x96>
 8005638:	2220      	movs	r2, #32
 800563a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	4391      	bics	r1, r2
 8005640:	910e      	str	r1, [sp, #56]	; 0x38
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	d14a      	bne.n	80056dc <_printf_float+0x194>
 8005646:	3307      	adds	r3, #7
 8005648:	6063      	str	r3, [r4, #4]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4313      	orrs	r3, r2
 8005652:	2200      	movs	r2, #0
 8005654:	9206      	str	r2, [sp, #24]
 8005656:	aa12      	add	r2, sp, #72	; 0x48
 8005658:	9205      	str	r2, [sp, #20]
 800565a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	9204      	str	r2, [sp, #16]
 8005660:	aa11      	add	r2, sp, #68	; 0x44
 8005662:	9203      	str	r2, [sp, #12]
 8005664:	2223      	movs	r2, #35	; 0x23
 8005666:	a908      	add	r1, sp, #32
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	1852      	adds	r2, r2, r1
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0032      	movs	r2, r6
 8005674:	002b      	movs	r3, r5
 8005676:	0038      	movs	r0, r7
 8005678:	f7ff febe 	bl	80053f8 <__cvt>
 800567c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800567e:	0005      	movs	r5, r0
 8005680:	2b47      	cmp	r3, #71	; 0x47
 8005682:	d109      	bne.n	8005698 <_printf_float+0x150>
 8005684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005686:	1cda      	adds	r2, r3, #3
 8005688:	db02      	blt.n	8005690 <_printf_float+0x148>
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	4293      	cmp	r3, r2
 800568e:	dd49      	ble.n	8005724 <_printf_float+0x1dc>
 8005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005692:	3b02      	subs	r3, #2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	930a      	str	r3, [sp, #40]	; 0x28
 8005698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800569c:	2b65      	cmp	r3, #101	; 0x65
 800569e:	d824      	bhi.n	80056ea <_printf_float+0x1a2>
 80056a0:	0020      	movs	r0, r4
 80056a2:	001a      	movs	r2, r3
 80056a4:	3901      	subs	r1, #1
 80056a6:	3050      	adds	r0, #80	; 0x50
 80056a8:	9111      	str	r1, [sp, #68]	; 0x44
 80056aa:	f7ff ff08 	bl	80054be <__exponent>
 80056ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80056b2:	1813      	adds	r3, r2, r0
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	2a01      	cmp	r2, #1
 80056b8:	dc02      	bgt.n	80056c0 <_printf_float+0x178>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	07d2      	lsls	r2, r2, #31
 80056be:	d501      	bpl.n	80056c4 <_printf_float+0x17c>
 80056c0:	3301      	adds	r3, #1
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	2323      	movs	r3, #35	; 0x23
 80056c6:	aa08      	add	r2, sp, #32
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d100      	bne.n	80056d2 <_printf_float+0x18a>
 80056d0:	e78d      	b.n	80055ee <_printf_float+0xa6>
 80056d2:	0023      	movs	r3, r4
 80056d4:	222d      	movs	r2, #45	; 0x2d
 80056d6:	3343      	adds	r3, #67	; 0x43
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e788      	b.n	80055ee <_printf_float+0xa6>
 80056dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056de:	2a47      	cmp	r2, #71	; 0x47
 80056e0:	d1b3      	bne.n	800564a <_printf_float+0x102>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1b1      	bne.n	800564a <_printf_float+0x102>
 80056e6:	3301      	adds	r3, #1
 80056e8:	e7ae      	b.n	8005648 <_printf_float+0x100>
 80056ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ec:	2b66      	cmp	r3, #102	; 0x66
 80056ee:	d11b      	bne.n	8005728 <_printf_float+0x1e0>
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	2900      	cmp	r1, #0
 80056f4:	dd09      	ble.n	800570a <_printf_float+0x1c2>
 80056f6:	6121      	str	r1, [r4, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <_printf_float+0x1ba>
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	07d2      	lsls	r2, r2, #31
 8005700:	d50b      	bpl.n	800571a <_printf_float+0x1d2>
 8005702:	3301      	adds	r3, #1
 8005704:	185b      	adds	r3, r3, r1
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	e007      	b.n	800571a <_printf_float+0x1d2>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <_printf_float+0x1ce>
 800570e:	2201      	movs	r2, #1
 8005710:	6821      	ldr	r1, [r4, #0]
 8005712:	4211      	tst	r1, r2
 8005714:	d000      	beq.n	8005718 <_printf_float+0x1d0>
 8005716:	1c9a      	adds	r2, r3, #2
 8005718:	6122      	str	r2, [r4, #16]
 800571a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800571c:	65a3      	str	r3, [r4, #88]	; 0x58
 800571e:	2300      	movs	r3, #0
 8005720:	930b      	str	r3, [sp, #44]	; 0x2c
 8005722:	e7cf      	b.n	80056c4 <_printf_float+0x17c>
 8005724:	2367      	movs	r3, #103	; 0x67
 8005726:	930a      	str	r3, [sp, #40]	; 0x28
 8005728:	9911      	ldr	r1, [sp, #68]	; 0x44
 800572a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800572c:	4299      	cmp	r1, r3
 800572e:	db06      	blt.n	800573e <_printf_float+0x1f6>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	6121      	str	r1, [r4, #16]
 8005734:	07db      	lsls	r3, r3, #31
 8005736:	d5f0      	bpl.n	800571a <_printf_float+0x1d2>
 8005738:	3101      	adds	r1, #1
 800573a:	6121      	str	r1, [r4, #16]
 800573c:	e7ed      	b.n	800571a <_printf_float+0x1d2>
 800573e:	2201      	movs	r2, #1
 8005740:	2900      	cmp	r1, #0
 8005742:	dc01      	bgt.n	8005748 <_printf_float+0x200>
 8005744:	1892      	adds	r2, r2, r2
 8005746:	1a52      	subs	r2, r2, r1
 8005748:	189b      	adds	r3, r3, r2
 800574a:	e7dc      	b.n	8005706 <_printf_float+0x1be>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	0553      	lsls	r3, r2, #21
 8005750:	d408      	bmi.n	8005764 <_printf_float+0x21c>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	002a      	movs	r2, r5
 8005756:	0038      	movs	r0, r7
 8005758:	9908      	ldr	r1, [sp, #32]
 800575a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800575c:	47a8      	blx	r5
 800575e:	3001      	adds	r0, #1
 8005760:	d12a      	bne.n	80057b8 <_printf_float+0x270>
 8005762:	e74f      	b.n	8005604 <_printf_float+0xbc>
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	2b65      	cmp	r3, #101	; 0x65
 8005768:	d800      	bhi.n	800576c <_printf_float+0x224>
 800576a:	e0ec      	b.n	8005946 <_printf_float+0x3fe>
 800576c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800576e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	f7fa fe6a 	bl	800044c <__aeabi_dcmpeq>
 8005778:	2800      	cmp	r0, #0
 800577a:	d034      	beq.n	80057e6 <_printf_float+0x29e>
 800577c:	2301      	movs	r3, #1
 800577e:	0038      	movs	r0, r7
 8005780:	4a37      	ldr	r2, [pc, #220]	; (8005860 <_printf_float+0x318>)
 8005782:	9908      	ldr	r1, [sp, #32]
 8005784:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005786:	47a8      	blx	r5
 8005788:	3001      	adds	r0, #1
 800578a:	d100      	bne.n	800578e <_printf_float+0x246>
 800578c:	e73a      	b.n	8005604 <_printf_float+0xbc>
 800578e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005792:	429a      	cmp	r2, r3
 8005794:	db02      	blt.n	800579c <_printf_float+0x254>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d50d      	bpl.n	80057b8 <_printf_float+0x270>
 800579c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800579e:	0038      	movs	r0, r7
 80057a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057a4:	9908      	ldr	r1, [sp, #32]
 80057a6:	47a8      	blx	r5
 80057a8:	2500      	movs	r5, #0
 80057aa:	3001      	adds	r0, #1
 80057ac:	d100      	bne.n	80057b0 <_printf_float+0x268>
 80057ae:	e729      	b.n	8005604 <_printf_float+0xbc>
 80057b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057b2:	3b01      	subs	r3, #1
 80057b4:	42ab      	cmp	r3, r5
 80057b6:	dc0a      	bgt.n	80057ce <_printf_float+0x286>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	079b      	lsls	r3, r3, #30
 80057bc:	d500      	bpl.n	80057c0 <_printf_float+0x278>
 80057be:	e116      	b.n	80059ee <_printf_float+0x4a6>
 80057c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057c2:	68e0      	ldr	r0, [r4, #12]
 80057c4:	4298      	cmp	r0, r3
 80057c6:	db00      	blt.n	80057ca <_printf_float+0x282>
 80057c8:	e71e      	b.n	8005608 <_printf_float+0xc0>
 80057ca:	0018      	movs	r0, r3
 80057cc:	e71c      	b.n	8005608 <_printf_float+0xc0>
 80057ce:	0022      	movs	r2, r4
 80057d0:	2301      	movs	r3, #1
 80057d2:	0038      	movs	r0, r7
 80057d4:	9908      	ldr	r1, [sp, #32]
 80057d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057d8:	321a      	adds	r2, #26
 80057da:	47b0      	blx	r6
 80057dc:	3001      	adds	r0, #1
 80057de:	d100      	bne.n	80057e2 <_printf_float+0x29a>
 80057e0:	e710      	b.n	8005604 <_printf_float+0xbc>
 80057e2:	3501      	adds	r5, #1
 80057e4:	e7e4      	b.n	80057b0 <_printf_float+0x268>
 80057e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc3b      	bgt.n	8005864 <_printf_float+0x31c>
 80057ec:	2301      	movs	r3, #1
 80057ee:	0038      	movs	r0, r7
 80057f0:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <_printf_float+0x318>)
 80057f2:	9908      	ldr	r1, [sp, #32]
 80057f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057f6:	47b0      	blx	r6
 80057f8:	3001      	adds	r0, #1
 80057fa:	d100      	bne.n	80057fe <_printf_float+0x2b6>
 80057fc:	e702      	b.n	8005604 <_printf_float+0xbc>
 80057fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005802:	4313      	orrs	r3, r2
 8005804:	d102      	bne.n	800580c <_printf_float+0x2c4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	07db      	lsls	r3, r3, #31
 800580a:	d5d5      	bpl.n	80057b8 <_printf_float+0x270>
 800580c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580e:	0038      	movs	r0, r7
 8005810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005812:	9908      	ldr	r1, [sp, #32]
 8005814:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005816:	47b0      	blx	r6
 8005818:	2300      	movs	r3, #0
 800581a:	3001      	adds	r0, #1
 800581c:	d100      	bne.n	8005820 <_printf_float+0x2d8>
 800581e:	e6f1      	b.n	8005604 <_printf_float+0xbc>
 8005820:	930a      	str	r3, [sp, #40]	; 0x28
 8005822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005826:	425b      	negs	r3, r3
 8005828:	4293      	cmp	r3, r2
 800582a:	dc01      	bgt.n	8005830 <_printf_float+0x2e8>
 800582c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800582e:	e791      	b.n	8005754 <_printf_float+0x20c>
 8005830:	0022      	movs	r2, r4
 8005832:	2301      	movs	r3, #1
 8005834:	0038      	movs	r0, r7
 8005836:	9908      	ldr	r1, [sp, #32]
 8005838:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800583a:	321a      	adds	r2, #26
 800583c:	47b0      	blx	r6
 800583e:	3001      	adds	r0, #1
 8005840:	d100      	bne.n	8005844 <_printf_float+0x2fc>
 8005842:	e6df      	b.n	8005604 <_printf_float+0xbc>
 8005844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005846:	3301      	adds	r3, #1
 8005848:	e7ea      	b.n	8005820 <_printf_float+0x2d8>
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	7fefffff 	.word	0x7fefffff
 8005850:	08009e44 	.word	0x08009e44
 8005854:	08009e48 	.word	0x08009e48
 8005858:	08009e4c 	.word	0x08009e4c
 800585c:	08009e50 	.word	0x08009e50
 8005860:	08009e54 	.word	0x08009e54
 8005864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005868:	920a      	str	r2, [sp, #40]	; 0x28
 800586a:	429a      	cmp	r2, r3
 800586c:	dd00      	ble.n	8005870 <_printf_float+0x328>
 800586e:	930a      	str	r3, [sp, #40]	; 0x28
 8005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	dc3d      	bgt.n	80058f2 <_printf_float+0x3aa>
 8005876:	2300      	movs	r3, #0
 8005878:	930e      	str	r3, [sp, #56]	; 0x38
 800587a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587c:	43db      	mvns	r3, r3
 800587e:	17db      	asrs	r3, r3, #31
 8005880:	930f      	str	r3, [sp, #60]	; 0x3c
 8005882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005886:	930b      	str	r3, [sp, #44]	; 0x2c
 8005888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800588a:	4013      	ands	r3, r2
 800588c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005892:	4293      	cmp	r3, r2
 8005894:	dc36      	bgt.n	8005904 <_printf_float+0x3bc>
 8005896:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800589a:	429a      	cmp	r2, r3
 800589c:	db40      	blt.n	8005920 <_printf_float+0x3d8>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	07db      	lsls	r3, r3, #31
 80058a2:	d43d      	bmi.n	8005920 <_printf_float+0x3d8>
 80058a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80058a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	1af3      	subs	r3, r6, r3
 80058ac:	1ab6      	subs	r6, r6, r2
 80058ae:	429e      	cmp	r6, r3
 80058b0:	dd00      	ble.n	80058b4 <_printf_float+0x36c>
 80058b2:	001e      	movs	r6, r3
 80058b4:	2e00      	cmp	r6, #0
 80058b6:	dc3c      	bgt.n	8005932 <_printf_float+0x3ea>
 80058b8:	2300      	movs	r3, #0
 80058ba:	930a      	str	r3, [sp, #40]	; 0x28
 80058bc:	43f3      	mvns	r3, r6
 80058be:	17db      	asrs	r3, r3, #31
 80058c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058ca:	4032      	ands	r2, r6
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d0:	4293      	cmp	r3, r2
 80058d2:	dc00      	bgt.n	80058d6 <_printf_float+0x38e>
 80058d4:	e770      	b.n	80057b8 <_printf_float+0x270>
 80058d6:	0022      	movs	r2, r4
 80058d8:	2301      	movs	r3, #1
 80058da:	0038      	movs	r0, r7
 80058dc:	9908      	ldr	r1, [sp, #32]
 80058de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058e0:	321a      	adds	r2, #26
 80058e2:	47a8      	blx	r5
 80058e4:	3001      	adds	r0, #1
 80058e6:	d100      	bne.n	80058ea <_printf_float+0x3a2>
 80058e8:	e68c      	b.n	8005604 <_printf_float+0xbc>
 80058ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ec:	3301      	adds	r3, #1
 80058ee:	930a      	str	r3, [sp, #40]	; 0x28
 80058f0:	e7e7      	b.n	80058c2 <_printf_float+0x37a>
 80058f2:	002a      	movs	r2, r5
 80058f4:	0038      	movs	r0, r7
 80058f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f8:	9908      	ldr	r1, [sp, #32]
 80058fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058fc:	47b0      	blx	r6
 80058fe:	3001      	adds	r0, #1
 8005900:	d1b9      	bne.n	8005876 <_printf_float+0x32e>
 8005902:	e67f      	b.n	8005604 <_printf_float+0xbc>
 8005904:	0022      	movs	r2, r4
 8005906:	2301      	movs	r3, #1
 8005908:	0038      	movs	r0, r7
 800590a:	9908      	ldr	r1, [sp, #32]
 800590c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800590e:	321a      	adds	r2, #26
 8005910:	47b0      	blx	r6
 8005912:	3001      	adds	r0, #1
 8005914:	d100      	bne.n	8005918 <_printf_float+0x3d0>
 8005916:	e675      	b.n	8005604 <_printf_float+0xbc>
 8005918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800591a:	3301      	adds	r3, #1
 800591c:	930e      	str	r3, [sp, #56]	; 0x38
 800591e:	e7b0      	b.n	8005882 <_printf_float+0x33a>
 8005920:	0038      	movs	r0, r7
 8005922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005926:	9908      	ldr	r1, [sp, #32]
 8005928:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800592a:	47b0      	blx	r6
 800592c:	3001      	adds	r0, #1
 800592e:	d1b9      	bne.n	80058a4 <_printf_float+0x35c>
 8005930:	e668      	b.n	8005604 <_printf_float+0xbc>
 8005932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005934:	0038      	movs	r0, r7
 8005936:	18ea      	adds	r2, r5, r3
 8005938:	9908      	ldr	r1, [sp, #32]
 800593a:	0033      	movs	r3, r6
 800593c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800593e:	47a8      	blx	r5
 8005940:	3001      	adds	r0, #1
 8005942:	d1b9      	bne.n	80058b8 <_printf_float+0x370>
 8005944:	e65e      	b.n	8005604 <_printf_float+0xbc>
 8005946:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005948:	2b01      	cmp	r3, #1
 800594a:	dc02      	bgt.n	8005952 <_printf_float+0x40a>
 800594c:	2301      	movs	r3, #1
 800594e:	421a      	tst	r2, r3
 8005950:	d03a      	beq.n	80059c8 <_printf_float+0x480>
 8005952:	2301      	movs	r3, #1
 8005954:	002a      	movs	r2, r5
 8005956:	0038      	movs	r0, r7
 8005958:	9908      	ldr	r1, [sp, #32]
 800595a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800595c:	47b0      	blx	r6
 800595e:	3001      	adds	r0, #1
 8005960:	d100      	bne.n	8005964 <_printf_float+0x41c>
 8005962:	e64f      	b.n	8005604 <_printf_float+0xbc>
 8005964:	0038      	movs	r0, r7
 8005966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800596a:	9908      	ldr	r1, [sp, #32]
 800596c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800596e:	47b0      	blx	r6
 8005970:	3001      	adds	r0, #1
 8005972:	d100      	bne.n	8005976 <_printf_float+0x42e>
 8005974:	e646      	b.n	8005604 <_printf_float+0xbc>
 8005976:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005978:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800597a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800597c:	2200      	movs	r2, #0
 800597e:	001e      	movs	r6, r3
 8005980:	2300      	movs	r3, #0
 8005982:	f7fa fd63 	bl	800044c <__aeabi_dcmpeq>
 8005986:	2800      	cmp	r0, #0
 8005988:	d11c      	bne.n	80059c4 <_printf_float+0x47c>
 800598a:	0033      	movs	r3, r6
 800598c:	1c6a      	adds	r2, r5, #1
 800598e:	3b01      	subs	r3, #1
 8005990:	0038      	movs	r0, r7
 8005992:	9908      	ldr	r1, [sp, #32]
 8005994:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005996:	47a8      	blx	r5
 8005998:	3001      	adds	r0, #1
 800599a:	d10f      	bne.n	80059bc <_printf_float+0x474>
 800599c:	e632      	b.n	8005604 <_printf_float+0xbc>
 800599e:	0022      	movs	r2, r4
 80059a0:	2301      	movs	r3, #1
 80059a2:	0038      	movs	r0, r7
 80059a4:	9908      	ldr	r1, [sp, #32]
 80059a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80059a8:	321a      	adds	r2, #26
 80059aa:	47b0      	blx	r6
 80059ac:	3001      	adds	r0, #1
 80059ae:	d100      	bne.n	80059b2 <_printf_float+0x46a>
 80059b0:	e628      	b.n	8005604 <_printf_float+0xbc>
 80059b2:	3501      	adds	r5, #1
 80059b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059b6:	3b01      	subs	r3, #1
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	dcf0      	bgt.n	800599e <_printf_float+0x456>
 80059bc:	0022      	movs	r2, r4
 80059be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c0:	3250      	adds	r2, #80	; 0x50
 80059c2:	e6c8      	b.n	8005756 <_printf_float+0x20e>
 80059c4:	2500      	movs	r5, #0
 80059c6:	e7f5      	b.n	80059b4 <_printf_float+0x46c>
 80059c8:	002a      	movs	r2, r5
 80059ca:	e7e1      	b.n	8005990 <_printf_float+0x448>
 80059cc:	0022      	movs	r2, r4
 80059ce:	2301      	movs	r3, #1
 80059d0:	0038      	movs	r0, r7
 80059d2:	9908      	ldr	r1, [sp, #32]
 80059d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80059d6:	3219      	adds	r2, #25
 80059d8:	47b0      	blx	r6
 80059da:	3001      	adds	r0, #1
 80059dc:	d100      	bne.n	80059e0 <_printf_float+0x498>
 80059de:	e611      	b.n	8005604 <_printf_float+0xbc>
 80059e0:	3501      	adds	r5, #1
 80059e2:	68e3      	ldr	r3, [r4, #12]
 80059e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	dcef      	bgt.n	80059cc <_printf_float+0x484>
 80059ec:	e6e8      	b.n	80057c0 <_printf_float+0x278>
 80059ee:	2500      	movs	r5, #0
 80059f0:	e7f7      	b.n	80059e2 <_printf_float+0x49a>
 80059f2:	46c0      	nop			; (mov r8, r8)

080059f4 <_printf_common>:
 80059f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059f6:	0016      	movs	r6, r2
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	688a      	ldr	r2, [r1, #8]
 80059fc:	690b      	ldr	r3, [r1, #16]
 80059fe:	000c      	movs	r4, r1
 8005a00:	9000      	str	r0, [sp, #0]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	da00      	bge.n	8005a08 <_printf_common+0x14>
 8005a06:	0013      	movs	r3, r2
 8005a08:	0022      	movs	r2, r4
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	3243      	adds	r2, #67	; 0x43
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d001      	beq.n	8005a18 <_printf_common+0x24>
 8005a14:	3301      	adds	r3, #1
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	069b      	lsls	r3, r3, #26
 8005a1c:	d502      	bpl.n	8005a24 <_printf_common+0x30>
 8005a1e:	6833      	ldr	r3, [r6, #0]
 8005a20:	3302      	adds	r3, #2
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	6822      	ldr	r2, [r4, #0]
 8005a26:	2306      	movs	r3, #6
 8005a28:	0015      	movs	r5, r2
 8005a2a:	401d      	ands	r5, r3
 8005a2c:	421a      	tst	r2, r3
 8005a2e:	d027      	beq.n	8005a80 <_printf_common+0x8c>
 8005a30:	0023      	movs	r3, r4
 8005a32:	3343      	adds	r3, #67	; 0x43
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	4193      	sbcs	r3, r2
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	0692      	lsls	r2, r2, #26
 8005a3e:	d430      	bmi.n	8005aa2 <_printf_common+0xae>
 8005a40:	0022      	movs	r2, r4
 8005a42:	9901      	ldr	r1, [sp, #4]
 8005a44:	9800      	ldr	r0, [sp, #0]
 8005a46:	9d08      	ldr	r5, [sp, #32]
 8005a48:	3243      	adds	r2, #67	; 0x43
 8005a4a:	47a8      	blx	r5
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d025      	beq.n	8005a9c <_printf_common+0xa8>
 8005a50:	2206      	movs	r2, #6
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	2500      	movs	r5, #0
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d105      	bne.n	8005a68 <_printf_common+0x74>
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	68e5      	ldr	r5, [r4, #12]
 8005a60:	1aed      	subs	r5, r5, r3
 8005a62:	43eb      	mvns	r3, r5
 8005a64:	17db      	asrs	r3, r3, #31
 8005a66:	401d      	ands	r5, r3
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	6922      	ldr	r2, [r4, #16]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	dd01      	ble.n	8005a74 <_printf_common+0x80>
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	18ed      	adds	r5, r5, r3
 8005a74:	2600      	movs	r6, #0
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d120      	bne.n	8005abc <_printf_common+0xc8>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e010      	b.n	8005aa0 <_printf_common+0xac>
 8005a7e:	3501      	adds	r5, #1
 8005a80:	68e3      	ldr	r3, [r4, #12]
 8005a82:	6832      	ldr	r2, [r6, #0]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	ddd2      	ble.n	8005a30 <_printf_common+0x3c>
 8005a8a:	0022      	movs	r2, r4
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	9901      	ldr	r1, [sp, #4]
 8005a90:	9800      	ldr	r0, [sp, #0]
 8005a92:	9f08      	ldr	r7, [sp, #32]
 8005a94:	3219      	adds	r2, #25
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d1f0      	bne.n	8005a7e <_printf_common+0x8a>
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	4240      	negs	r0, r0
 8005aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aa2:	2030      	movs	r0, #48	; 0x30
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	3143      	adds	r1, #67	; 0x43
 8005aa8:	7008      	strb	r0, [r1, #0]
 8005aaa:	0021      	movs	r1, r4
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	3145      	adds	r1, #69	; 0x45
 8005ab0:	7809      	ldrb	r1, [r1, #0]
 8005ab2:	18a2      	adds	r2, r4, r2
 8005ab4:	3243      	adds	r2, #67	; 0x43
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	7011      	strb	r1, [r2, #0]
 8005aba:	e7c1      	b.n	8005a40 <_printf_common+0x4c>
 8005abc:	0022      	movs	r2, r4
 8005abe:	2301      	movs	r3, #1
 8005ac0:	9901      	ldr	r1, [sp, #4]
 8005ac2:	9800      	ldr	r0, [sp, #0]
 8005ac4:	9f08      	ldr	r7, [sp, #32]
 8005ac6:	321a      	adds	r2, #26
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	d0e6      	beq.n	8005a9c <_printf_common+0xa8>
 8005ace:	3601      	adds	r6, #1
 8005ad0:	e7d1      	b.n	8005a76 <_printf_common+0x82>
	...

08005ad4 <_printf_i>:
 8005ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad6:	b08b      	sub	sp, #44	; 0x2c
 8005ad8:	9206      	str	r2, [sp, #24]
 8005ada:	000a      	movs	r2, r1
 8005adc:	3243      	adds	r2, #67	; 0x43
 8005ade:	9307      	str	r3, [sp, #28]
 8005ae0:	9005      	str	r0, [sp, #20]
 8005ae2:	9204      	str	r2, [sp, #16]
 8005ae4:	7e0a      	ldrb	r2, [r1, #24]
 8005ae6:	000c      	movs	r4, r1
 8005ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005aea:	2a78      	cmp	r2, #120	; 0x78
 8005aec:	d809      	bhi.n	8005b02 <_printf_i+0x2e>
 8005aee:	2a62      	cmp	r2, #98	; 0x62
 8005af0:	d80b      	bhi.n	8005b0a <_printf_i+0x36>
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d100      	bne.n	8005af8 <_printf_i+0x24>
 8005af6:	e0be      	b.n	8005c76 <_printf_i+0x1a2>
 8005af8:	497c      	ldr	r1, [pc, #496]	; (8005cec <_printf_i+0x218>)
 8005afa:	9103      	str	r1, [sp, #12]
 8005afc:	2a58      	cmp	r2, #88	; 0x58
 8005afe:	d100      	bne.n	8005b02 <_printf_i+0x2e>
 8005b00:	e093      	b.n	8005c2a <_printf_i+0x156>
 8005b02:	0026      	movs	r6, r4
 8005b04:	3642      	adds	r6, #66	; 0x42
 8005b06:	7032      	strb	r2, [r6, #0]
 8005b08:	e022      	b.n	8005b50 <_printf_i+0x7c>
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	3863      	subs	r0, #99	; 0x63
 8005b0e:	2815      	cmp	r0, #21
 8005b10:	d8f7      	bhi.n	8005b02 <_printf_i+0x2e>
 8005b12:	f7fa fb0b 	bl	800012c <__gnu_thumb1_case_shi>
 8005b16:	0016      	.short	0x0016
 8005b18:	fff6001f 	.word	0xfff6001f
 8005b1c:	fff6fff6 	.word	0xfff6fff6
 8005b20:	001ffff6 	.word	0x001ffff6
 8005b24:	fff6fff6 	.word	0xfff6fff6
 8005b28:	fff6fff6 	.word	0xfff6fff6
 8005b2c:	003600a3 	.word	0x003600a3
 8005b30:	fff60083 	.word	0xfff60083
 8005b34:	00b4fff6 	.word	0x00b4fff6
 8005b38:	0036fff6 	.word	0x0036fff6
 8005b3c:	fff6fff6 	.word	0xfff6fff6
 8005b40:	0087      	.short	0x0087
 8005b42:	0026      	movs	r6, r4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	3642      	adds	r6, #66	; 0x42
 8005b48:	1d11      	adds	r1, r2, #4
 8005b4a:	6019      	str	r1, [r3, #0]
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	7033      	strb	r3, [r6, #0]
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0a2      	b.n	8005c9a <_printf_i+0x1c6>
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	6809      	ldr	r1, [r1, #0]
 8005b58:	1d02      	adds	r2, r0, #4
 8005b5a:	060d      	lsls	r5, r1, #24
 8005b5c:	d50b      	bpl.n	8005b76 <_printf_i+0xa2>
 8005b5e:	6805      	ldr	r5, [r0, #0]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	da03      	bge.n	8005b6e <_printf_i+0x9a>
 8005b66:	232d      	movs	r3, #45	; 0x2d
 8005b68:	9a04      	ldr	r2, [sp, #16]
 8005b6a:	426d      	negs	r5, r5
 8005b6c:	7013      	strb	r3, [r2, #0]
 8005b6e:	4b5f      	ldr	r3, [pc, #380]	; (8005cec <_printf_i+0x218>)
 8005b70:	270a      	movs	r7, #10
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	e01b      	b.n	8005bae <_printf_i+0xda>
 8005b76:	6805      	ldr	r5, [r0, #0]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	0649      	lsls	r1, r1, #25
 8005b7c:	d5f1      	bpl.n	8005b62 <_printf_i+0x8e>
 8005b7e:	b22d      	sxth	r5, r5
 8005b80:	e7ef      	b.n	8005b62 <_printf_i+0x8e>
 8005b82:	680d      	ldr	r5, [r1, #0]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	1d08      	adds	r0, r1, #4
 8005b88:	6018      	str	r0, [r3, #0]
 8005b8a:	062e      	lsls	r6, r5, #24
 8005b8c:	d501      	bpl.n	8005b92 <_printf_i+0xbe>
 8005b8e:	680d      	ldr	r5, [r1, #0]
 8005b90:	e003      	b.n	8005b9a <_printf_i+0xc6>
 8005b92:	066d      	lsls	r5, r5, #25
 8005b94:	d5fb      	bpl.n	8005b8e <_printf_i+0xba>
 8005b96:	680d      	ldr	r5, [r1, #0]
 8005b98:	b2ad      	uxth	r5, r5
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <_printf_i+0x218>)
 8005b9c:	2708      	movs	r7, #8
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	2a6f      	cmp	r2, #111	; 0x6f
 8005ba2:	d000      	beq.n	8005ba6 <_printf_i+0xd2>
 8005ba4:	3702      	adds	r7, #2
 8005ba6:	0023      	movs	r3, r4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	3343      	adds	r3, #67	; 0x43
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	60a3      	str	r3, [r4, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	db03      	blt.n	8005bbe <_printf_i+0xea>
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	438a      	bics	r2, r1
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	d102      	bne.n	8005bc8 <_printf_i+0xf4>
 8005bc2:	9e04      	ldr	r6, [sp, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <_printf_i+0x10e>
 8005bc8:	9e04      	ldr	r6, [sp, #16]
 8005bca:	0028      	movs	r0, r5
 8005bcc:	0039      	movs	r1, r7
 8005bce:	f7fa fb3d 	bl	800024c <__aeabi_uidivmod>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	3e01      	subs	r6, #1
 8005bd6:	5c5b      	ldrb	r3, [r3, r1]
 8005bd8:	7033      	strb	r3, [r6, #0]
 8005bda:	002b      	movs	r3, r5
 8005bdc:	0005      	movs	r5, r0
 8005bde:	429f      	cmp	r7, r3
 8005be0:	d9f3      	bls.n	8005bca <_printf_i+0xf6>
 8005be2:	2f08      	cmp	r7, #8
 8005be4:	d109      	bne.n	8005bfa <_printf_i+0x126>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	07db      	lsls	r3, r3, #31
 8005bea:	d506      	bpl.n	8005bfa <_printf_i+0x126>
 8005bec:	6862      	ldr	r2, [r4, #4]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	dc02      	bgt.n	8005bfa <_printf_i+0x126>
 8005bf4:	2330      	movs	r3, #48	; 0x30
 8005bf6:	3e01      	subs	r6, #1
 8005bf8:	7033      	strb	r3, [r6, #0]
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	1b9b      	subs	r3, r3, r6
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	9b07      	ldr	r3, [sp, #28]
 8005c02:	0021      	movs	r1, r4
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	9805      	ldr	r0, [sp, #20]
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	aa09      	add	r2, sp, #36	; 0x24
 8005c0c:	f7ff fef2 	bl	80059f4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d147      	bne.n	8005ca4 <_printf_i+0x1d0>
 8005c14:	2001      	movs	r0, #1
 8005c16:	4240      	negs	r0, r0
 8005c18:	b00b      	add	sp, #44	; 0x2c
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	6809      	ldr	r1, [r1, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	2278      	movs	r2, #120	; 0x78
 8005c26:	4932      	ldr	r1, [pc, #200]	; (8005cf0 <_printf_i+0x21c>)
 8005c28:	9103      	str	r1, [sp, #12]
 8005c2a:	0021      	movs	r1, r4
 8005c2c:	3145      	adds	r1, #69	; 0x45
 8005c2e:	700a      	strb	r2, [r1, #0]
 8005c30:	6819      	ldr	r1, [r3, #0]
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	c920      	ldmia	r1!, {r5}
 8005c36:	0610      	lsls	r0, r2, #24
 8005c38:	d402      	bmi.n	8005c40 <_printf_i+0x16c>
 8005c3a:	0650      	lsls	r0, r2, #25
 8005c3c:	d500      	bpl.n	8005c40 <_printf_i+0x16c>
 8005c3e:	b2ad      	uxth	r5, r5
 8005c40:	6019      	str	r1, [r3, #0]
 8005c42:	07d3      	lsls	r3, r2, #31
 8005c44:	d502      	bpl.n	8005c4c <_printf_i+0x178>
 8005c46:	2320      	movs	r3, #32
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	2710      	movs	r7, #16
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	d1a9      	bne.n	8005ba6 <_printf_i+0xd2>
 8005c52:	2220      	movs	r2, #32
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	4393      	bics	r3, r2
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	e7a4      	b.n	8005ba6 <_printf_i+0xd2>
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	680d      	ldr	r5, [r1, #0]
 8005c60:	1d10      	adds	r0, r2, #4
 8005c62:	6949      	ldr	r1, [r1, #20]
 8005c64:	6018      	str	r0, [r3, #0]
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	062e      	lsls	r6, r5, #24
 8005c6a:	d501      	bpl.n	8005c70 <_printf_i+0x19c>
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <_printf_i+0x1a2>
 8005c70:	066d      	lsls	r5, r5, #25
 8005c72:	d5fb      	bpl.n	8005c6c <_printf_i+0x198>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9e04      	ldr	r6, [sp, #16]
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	e7c0      	b.n	8005c00 <_printf_i+0x12c>
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	1d11      	adds	r1, r2, #4
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	6816      	ldr	r6, [r2, #0]
 8005c86:	2100      	movs	r1, #0
 8005c88:	0030      	movs	r0, r6
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	f000 fbf1 	bl	8006472 <memchr>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d001      	beq.n	8005c98 <_printf_i+0x1c4>
 8005c94:	1b80      	subs	r0, r0, r6
 8005c96:	6060      	str	r0, [r4, #4]
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a04      	ldr	r2, [sp, #16]
 8005ca0:	7013      	strb	r3, [r2, #0]
 8005ca2:	e7ad      	b.n	8005c00 <_printf_i+0x12c>
 8005ca4:	0032      	movs	r2, r6
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	9906      	ldr	r1, [sp, #24]
 8005caa:	9805      	ldr	r0, [sp, #20]
 8005cac:	9d07      	ldr	r5, [sp, #28]
 8005cae:	47a8      	blx	r5
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0af      	beq.n	8005c14 <_printf_i+0x140>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d415      	bmi.n	8005ce6 <_printf_i+0x212>
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	68e0      	ldr	r0, [r4, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	daaa      	bge.n	8005c18 <_printf_i+0x144>
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	e7a8      	b.n	8005c18 <_printf_i+0x144>
 8005cc6:	0022      	movs	r2, r4
 8005cc8:	2301      	movs	r3, #1
 8005cca:	9906      	ldr	r1, [sp, #24]
 8005ccc:	9805      	ldr	r0, [sp, #20]
 8005cce:	9e07      	ldr	r6, [sp, #28]
 8005cd0:	3219      	adds	r2, #25
 8005cd2:	47b0      	blx	r6
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d09d      	beq.n	8005c14 <_printf_i+0x140>
 8005cd8:	3501      	adds	r5, #1
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dcf0      	bgt.n	8005cc6 <_printf_i+0x1f2>
 8005ce4:	e7e9      	b.n	8005cba <_printf_i+0x1e6>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	e7f7      	b.n	8005cda <_printf_i+0x206>
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	08009e56 	.word	0x08009e56
 8005cf0:	08009e67 	.word	0x08009e67

08005cf4 <_scanf_float>:
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf6:	b08b      	sub	sp, #44	; 0x2c
 8005cf8:	0016      	movs	r6, r2
 8005cfa:	9002      	str	r0, [sp, #8]
 8005cfc:	22ae      	movs	r2, #174	; 0xae
 8005cfe:	2000      	movs	r0, #0
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	688b      	ldr	r3, [r1, #8]
 8005d04:	000f      	movs	r7, r1
 8005d06:	1e59      	subs	r1, r3, #1
 8005d08:	0052      	lsls	r2, r2, #1
 8005d0a:	9006      	str	r0, [sp, #24]
 8005d0c:	4291      	cmp	r1, r2
 8005d0e:	d905      	bls.n	8005d1c <_scanf_float+0x28>
 8005d10:	3b5e      	subs	r3, #94	; 0x5e
 8005d12:	3bff      	subs	r3, #255	; 0xff
 8005d14:	9306      	str	r3, [sp, #24]
 8005d16:	235e      	movs	r3, #94	; 0x5e
 8005d18:	33ff      	adds	r3, #255	; 0xff
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	23f0      	movs	r3, #240	; 0xf0
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	003b      	movs	r3, r7
 8005d28:	2400      	movs	r4, #0
 8005d2a:	331c      	adds	r3, #28
 8005d2c:	001d      	movs	r5, r3
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	9403      	str	r4, [sp, #12]
 8005d32:	9409      	str	r4, [sp, #36]	; 0x24
 8005d34:	9408      	str	r4, [sp, #32]
 8005d36:	9401      	str	r4, [sp, #4]
 8005d38:	9405      	str	r4, [sp, #20]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	d00a      	beq.n	8005d56 <_scanf_float+0x62>
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b4e      	cmp	r3, #78	; 0x4e
 8005d46:	d844      	bhi.n	8005dd2 <_scanf_float+0xde>
 8005d48:	0018      	movs	r0, r3
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	d82c      	bhi.n	8005da8 <_scanf_float+0xb4>
 8005d4e:	382b      	subs	r0, #43	; 0x2b
 8005d50:	b2c1      	uxtb	r1, r0
 8005d52:	290e      	cmp	r1, #14
 8005d54:	d92a      	bls.n	8005dac <_scanf_float+0xb8>
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <_scanf_float+0x70>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4aa3      	ldr	r2, [pc, #652]	; (8005fec <_scanf_float+0x2f8>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d900      	bls.n	8005d6e <_scanf_float+0x7a>
 8005d6c:	e0f9      	b.n	8005f62 <_scanf_float+0x26e>
 8005d6e:	24be      	movs	r4, #190	; 0xbe
 8005d70:	0064      	lsls	r4, r4, #1
 8005d72:	9b04      	ldr	r3, [sp, #16]
 8005d74:	429d      	cmp	r5, r3
 8005d76:	d900      	bls.n	8005d7a <_scanf_float+0x86>
 8005d78:	e0e9      	b.n	8005f4e <_scanf_float+0x25a>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	e183      	b.n	8006088 <_scanf_float+0x394>
 8005d80:	0018      	movs	r0, r3
 8005d82:	3861      	subs	r0, #97	; 0x61
 8005d84:	280d      	cmp	r0, #13
 8005d86:	d8e6      	bhi.n	8005d56 <_scanf_float+0x62>
 8005d88:	f7fa f9d0 	bl	800012c <__gnu_thumb1_case_shi>
 8005d8c:	ffe50083 	.word	0xffe50083
 8005d90:	ffe5ffe5 	.word	0xffe5ffe5
 8005d94:	00a200b6 	.word	0x00a200b6
 8005d98:	ffe5ffe5 	.word	0xffe5ffe5
 8005d9c:	ffe50089 	.word	0xffe50089
 8005da0:	ffe5ffe5 	.word	0xffe5ffe5
 8005da4:	0065ffe5 	.word	0x0065ffe5
 8005da8:	3841      	subs	r0, #65	; 0x41
 8005daa:	e7eb      	b.n	8005d84 <_scanf_float+0x90>
 8005dac:	280e      	cmp	r0, #14
 8005dae:	d8d2      	bhi.n	8005d56 <_scanf_float+0x62>
 8005db0:	f7fa f9bc 	bl	800012c <__gnu_thumb1_case_shi>
 8005db4:	ffd1004b 	.word	0xffd1004b
 8005db8:	0098004b 	.word	0x0098004b
 8005dbc:	0020ffd1 	.word	0x0020ffd1
 8005dc0:	00400040 	.word	0x00400040
 8005dc4:	00400040 	.word	0x00400040
 8005dc8:	00400040 	.word	0x00400040
 8005dcc:	00400040 	.word	0x00400040
 8005dd0:	0040      	.short	0x0040
 8005dd2:	2b6e      	cmp	r3, #110	; 0x6e
 8005dd4:	d809      	bhi.n	8005dea <_scanf_float+0xf6>
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d8d2      	bhi.n	8005d80 <_scanf_float+0x8c>
 8005dda:	2b54      	cmp	r3, #84	; 0x54
 8005ddc:	d07d      	beq.n	8005eda <_scanf_float+0x1e6>
 8005dde:	2b59      	cmp	r3, #89	; 0x59
 8005de0:	d1b9      	bne.n	8005d56 <_scanf_float+0x62>
 8005de2:	2c07      	cmp	r4, #7
 8005de4:	d1b7      	bne.n	8005d56 <_scanf_float+0x62>
 8005de6:	2408      	movs	r4, #8
 8005de8:	e02c      	b.n	8005e44 <_scanf_float+0x150>
 8005dea:	2b74      	cmp	r3, #116	; 0x74
 8005dec:	d075      	beq.n	8005eda <_scanf_float+0x1e6>
 8005dee:	2b79      	cmp	r3, #121	; 0x79
 8005df0:	d0f7      	beq.n	8005de2 <_scanf_float+0xee>
 8005df2:	e7b0      	b.n	8005d56 <_scanf_float+0x62>
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	05c8      	lsls	r0, r1, #23
 8005df8:	d51c      	bpl.n	8005e34 <_scanf_float+0x140>
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	4399      	bics	r1, r3
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	6039      	str	r1, [r7, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <_scanf_float+0x120>
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	3201      	adds	r2, #1
 8005e10:	9306      	str	r3, [sp, #24]
 8005e12:	60ba      	str	r2, [r7, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	6873      	ldr	r3, [r6, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	6073      	str	r3, [r6, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dc00      	bgt.n	8005e2c <_scanf_float+0x138>
 8005e2a:	e086      	b.n	8005f3a <_scanf_float+0x246>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	e782      	b.n	8005d3a <_scanf_float+0x46>
 8005e34:	9a03      	ldr	r2, [sp, #12]
 8005e36:	1912      	adds	r2, r2, r4
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	d18c      	bne.n	8005d56 <_scanf_float+0x62>
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	496c      	ldr	r1, [pc, #432]	; (8005ff0 <_scanf_float+0x2fc>)
 8005e40:	400a      	ands	r2, r1
 8005e42:	603a      	str	r2, [r7, #0]
 8005e44:	702b      	strb	r3, [r5, #0]
 8005e46:	3501      	adds	r5, #1
 8005e48:	e7e4      	b.n	8005e14 <_scanf_float+0x120>
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	420a      	tst	r2, r1
 8005e50:	d081      	beq.n	8005d56 <_scanf_float+0x62>
 8005e52:	438a      	bics	r2, r1
 8005e54:	e7f5      	b.n	8005e42 <_scanf_float+0x14e>
 8005e56:	9a03      	ldr	r2, [sp, #12]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d10f      	bne.n	8005e7c <_scanf_float+0x188>
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d10f      	bne.n	8005e82 <_scanf_float+0x18e>
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	21e0      	movs	r1, #224	; 0xe0
 8005e66:	0010      	movs	r0, r2
 8005e68:	00c9      	lsls	r1, r1, #3
 8005e6a:	4008      	ands	r0, r1
 8005e6c:	4288      	cmp	r0, r1
 8005e6e:	d108      	bne.n	8005e82 <_scanf_float+0x18e>
 8005e70:	4960      	ldr	r1, [pc, #384]	; (8005ff4 <_scanf_float+0x300>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	603a      	str	r2, [r7, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	9203      	str	r2, [sp, #12]
 8005e7a:	e7e3      	b.n	8005e44 <_scanf_float+0x150>
 8005e7c:	9a03      	ldr	r2, [sp, #12]
 8005e7e:	2a02      	cmp	r2, #2
 8005e80:	d059      	beq.n	8005f36 <_scanf_float+0x242>
 8005e82:	2c01      	cmp	r4, #1
 8005e84:	d002      	beq.n	8005e8c <_scanf_float+0x198>
 8005e86:	2c04      	cmp	r4, #4
 8005e88:	d000      	beq.n	8005e8c <_scanf_float+0x198>
 8005e8a:	e764      	b.n	8005d56 <_scanf_float+0x62>
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	b2e4      	uxtb	r4, r4
 8005e90:	e7d8      	b.n	8005e44 <_scanf_float+0x150>
 8005e92:	9a03      	ldr	r2, [sp, #12]
 8005e94:	2a01      	cmp	r2, #1
 8005e96:	d000      	beq.n	8005e9a <_scanf_float+0x1a6>
 8005e98:	e75d      	b.n	8005d56 <_scanf_float+0x62>
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	e7ec      	b.n	8005e78 <_scanf_float+0x184>
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d110      	bne.n	8005ec4 <_scanf_float+0x1d0>
 8005ea2:	9a01      	ldr	r2, [sp, #4]
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	d000      	beq.n	8005eaa <_scanf_float+0x1b6>
 8005ea8:	e758      	b.n	8005d5c <_scanf_float+0x68>
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	21e0      	movs	r1, #224	; 0xe0
 8005eae:	0010      	movs	r0, r2
 8005eb0:	00c9      	lsls	r1, r1, #3
 8005eb2:	4008      	ands	r0, r1
 8005eb4:	4288      	cmp	r0, r1
 8005eb6:	d000      	beq.n	8005eba <_scanf_float+0x1c6>
 8005eb8:	e754      	b.n	8005d64 <_scanf_float+0x70>
 8005eba:	494e      	ldr	r1, [pc, #312]	; (8005ff4 <_scanf_float+0x300>)
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	603a      	str	r2, [r7, #0]
 8005ec2:	e7bf      	b.n	8005e44 <_scanf_float+0x150>
 8005ec4:	21fd      	movs	r1, #253	; 0xfd
 8005ec6:	1ee2      	subs	r2, r4, #3
 8005ec8:	420a      	tst	r2, r1
 8005eca:	d000      	beq.n	8005ece <_scanf_float+0x1da>
 8005ecc:	e743      	b.n	8005d56 <_scanf_float+0x62>
 8005ece:	e7dd      	b.n	8005e8c <_scanf_float+0x198>
 8005ed0:	2c02      	cmp	r4, #2
 8005ed2:	d000      	beq.n	8005ed6 <_scanf_float+0x1e2>
 8005ed4:	e73f      	b.n	8005d56 <_scanf_float+0x62>
 8005ed6:	2403      	movs	r4, #3
 8005ed8:	e7b4      	b.n	8005e44 <_scanf_float+0x150>
 8005eda:	2c06      	cmp	r4, #6
 8005edc:	d000      	beq.n	8005ee0 <_scanf_float+0x1ec>
 8005ede:	e73a      	b.n	8005d56 <_scanf_float+0x62>
 8005ee0:	2407      	movs	r4, #7
 8005ee2:	e7af      	b.n	8005e44 <_scanf_float+0x150>
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	0591      	lsls	r1, r2, #22
 8005ee8:	d400      	bmi.n	8005eec <_scanf_float+0x1f8>
 8005eea:	e734      	b.n	8005d56 <_scanf_float+0x62>
 8005eec:	4942      	ldr	r1, [pc, #264]	; (8005ff8 <_scanf_float+0x304>)
 8005eee:	400a      	ands	r2, r1
 8005ef0:	603a      	str	r2, [r7, #0]
 8005ef2:	9a01      	ldr	r2, [sp, #4]
 8005ef4:	9205      	str	r2, [sp, #20]
 8005ef6:	e7a5      	b.n	8005e44 <_scanf_float+0x150>
 8005ef8:	21a0      	movs	r1, #160	; 0xa0
 8005efa:	2080      	movs	r0, #128	; 0x80
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	00c9      	lsls	r1, r1, #3
 8005f00:	4011      	ands	r1, r2
 8005f02:	00c0      	lsls	r0, r0, #3
 8005f04:	4281      	cmp	r1, r0
 8005f06:	d006      	beq.n	8005f16 <_scanf_float+0x222>
 8005f08:	4202      	tst	r2, r0
 8005f0a:	d100      	bne.n	8005f0e <_scanf_float+0x21a>
 8005f0c:	e723      	b.n	8005d56 <_scanf_float+0x62>
 8005f0e:	9901      	ldr	r1, [sp, #4]
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d100      	bne.n	8005f16 <_scanf_float+0x222>
 8005f14:	e726      	b.n	8005d64 <_scanf_float+0x70>
 8005f16:	0591      	lsls	r1, r2, #22
 8005f18:	d404      	bmi.n	8005f24 <_scanf_float+0x230>
 8005f1a:	9901      	ldr	r1, [sp, #4]
 8005f1c:	9805      	ldr	r0, [sp, #20]
 8005f1e:	9509      	str	r5, [sp, #36]	; 0x24
 8005f20:	1a09      	subs	r1, r1, r0
 8005f22:	9108      	str	r1, [sp, #32]
 8005f24:	4933      	ldr	r1, [pc, #204]	; (8005ff4 <_scanf_float+0x300>)
 8005f26:	400a      	ands	r2, r1
 8005f28:	21c0      	movs	r1, #192	; 0xc0
 8005f2a:	0049      	lsls	r1, r1, #1
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	603a      	str	r2, [r7, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	9201      	str	r2, [sp, #4]
 8005f34:	e786      	b.n	8005e44 <_scanf_float+0x150>
 8005f36:	2203      	movs	r2, #3
 8005f38:	e79e      	b.n	8005e78 <_scanf_float+0x184>
 8005f3a:	23c0      	movs	r3, #192	; 0xc0
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	0031      	movs	r1, r6
 8005f40:	58fb      	ldr	r3, [r7, r3]
 8005f42:	9802      	ldr	r0, [sp, #8]
 8005f44:	4798      	blx	r3
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d100      	bne.n	8005f4c <_scanf_float+0x258>
 8005f4a:	e6f6      	b.n	8005d3a <_scanf_float+0x46>
 8005f4c:	e703      	b.n	8005d56 <_scanf_float+0x62>
 8005f4e:	3d01      	subs	r5, #1
 8005f50:	593b      	ldr	r3, [r7, r4]
 8005f52:	0032      	movs	r2, r6
 8005f54:	7829      	ldrb	r1, [r5, #0]
 8005f56:	9802      	ldr	r0, [sp, #8]
 8005f58:	4798      	blx	r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e707      	b.n	8005d72 <_scanf_float+0x7e>
 8005f62:	1e63      	subs	r3, r4, #1
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d80e      	bhi.n	8005f86 <_scanf_float+0x292>
 8005f68:	9503      	str	r5, [sp, #12]
 8005f6a:	2c02      	cmp	r4, #2
 8005f6c:	d920      	bls.n	8005fb0 <_scanf_float+0x2bc>
 8005f6e:	1b63      	subs	r3, r4, r5
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	9306      	str	r3, [sp, #24]
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	9a06      	ldr	r2, [sp, #24]
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d827      	bhi.n	8005fd0 <_scanf_float+0x2dc>
 8005f80:	3c03      	subs	r4, #3
 8005f82:	b2e4      	uxtb	r4, r4
 8005f84:	1b2d      	subs	r5, r5, r4
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	05da      	lsls	r2, r3, #23
 8005f8a:	d552      	bpl.n	8006032 <_scanf_float+0x33e>
 8005f8c:	055b      	lsls	r3, r3, #21
 8005f8e:	d535      	bpl.n	8005ffc <_scanf_float+0x308>
 8005f90:	24be      	movs	r4, #190	; 0xbe
 8005f92:	0064      	lsls	r4, r4, #1
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	429d      	cmp	r5, r3
 8005f98:	d800      	bhi.n	8005f9c <_scanf_float+0x2a8>
 8005f9a:	e6ee      	b.n	8005d7a <_scanf_float+0x86>
 8005f9c:	3d01      	subs	r5, #1
 8005f9e:	593b      	ldr	r3, [r7, r4]
 8005fa0:	0032      	movs	r2, r6
 8005fa2:	7829      	ldrb	r1, [r5, #0]
 8005fa4:	9802      	ldr	r0, [sp, #8]
 8005fa6:	4798      	blx	r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e7f1      	b.n	8005f94 <_scanf_float+0x2a0>
 8005fb0:	24be      	movs	r4, #190	; 0xbe
 8005fb2:	0064      	lsls	r4, r4, #1
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	d800      	bhi.n	8005fbc <_scanf_float+0x2c8>
 8005fba:	e6de      	b.n	8005d7a <_scanf_float+0x86>
 8005fbc:	3d01      	subs	r5, #1
 8005fbe:	593b      	ldr	r3, [r7, r4]
 8005fc0:	0032      	movs	r2, r6
 8005fc2:	7829      	ldrb	r1, [r5, #0]
 8005fc4:	9802      	ldr	r0, [sp, #8]
 8005fc6:	4798      	blx	r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e7f1      	b.n	8005fb4 <_scanf_float+0x2c0>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	0032      	movs	r2, r6
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	7819      	ldrb	r1, [r3, #0]
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	23be      	movs	r3, #190	; 0xbe
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	58fb      	ldr	r3, [r7, r3]
 8005fe0:	9802      	ldr	r0, [sp, #8]
 8005fe2:	4798      	blx	r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	e7c3      	b.n	8005f74 <_scanf_float+0x280>
 8005fec:	fffffeff 	.word	0xfffffeff
 8005ff0:	fffffe7f 	.word	0xfffffe7f
 8005ff4:	fffff87f 	.word	0xfffff87f
 8005ff8:	fffffd7f 	.word	0xfffffd7f
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1e6c      	subs	r4, r5, #1
 8006000:	7821      	ldrb	r1, [r4, #0]
 8006002:	3b01      	subs	r3, #1
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	2965      	cmp	r1, #101	; 0x65
 8006008:	d00c      	beq.n	8006024 <_scanf_float+0x330>
 800600a:	2945      	cmp	r1, #69	; 0x45
 800600c:	d00a      	beq.n	8006024 <_scanf_float+0x330>
 800600e:	23be      	movs	r3, #190	; 0xbe
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	58fb      	ldr	r3, [r7, r3]
 8006014:	0032      	movs	r2, r6
 8006016:	9802      	ldr	r0, [sp, #8]
 8006018:	4798      	blx	r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1eac      	subs	r4, r5, #2
 800601e:	3b01      	subs	r3, #1
 8006020:	7821      	ldrb	r1, [r4, #0]
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	23be      	movs	r3, #190	; 0xbe
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	0032      	movs	r2, r6
 800602a:	58fb      	ldr	r3, [r7, r3]
 800602c:	9802      	ldr	r0, [sp, #8]
 800602e:	4798      	blx	r3
 8006030:	0025      	movs	r5, r4
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	2310      	movs	r3, #16
 8006036:	0011      	movs	r1, r2
 8006038:	4019      	ands	r1, r3
 800603a:	9103      	str	r1, [sp, #12]
 800603c:	421a      	tst	r2, r3
 800603e:	d15b      	bne.n	80060f8 <_scanf_float+0x404>
 8006040:	22c0      	movs	r2, #192	; 0xc0
 8006042:	7029      	strb	r1, [r5, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	00d2      	lsls	r2, r2, #3
 8006048:	4013      	ands	r3, r2
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	00d2      	lsls	r2, r2, #3
 800604e:	4293      	cmp	r3, r2
 8006050:	d11d      	bne.n	800608e <_scanf_float+0x39a>
 8006052:	9b05      	ldr	r3, [sp, #20]
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	9901      	ldr	r1, [sp, #4]
 8006058:	1a9a      	subs	r2, r3, r2
 800605a:	428b      	cmp	r3, r1
 800605c:	d124      	bne.n	80060a8 <_scanf_float+0x3b4>
 800605e:	2200      	movs	r2, #0
 8006060:	9904      	ldr	r1, [sp, #16]
 8006062:	9802      	ldr	r0, [sp, #8]
 8006064:	f002 fc98 	bl	8008998 <_strtod_r>
 8006068:	9b07      	ldr	r3, [sp, #28]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	0004      	movs	r4, r0
 800606e:	000d      	movs	r5, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	0791      	lsls	r1, r2, #30
 8006074:	d525      	bpl.n	80060c2 <_scanf_float+0x3ce>
 8006076:	9907      	ldr	r1, [sp, #28]
 8006078:	1d1a      	adds	r2, r3, #4
 800607a:	600a      	str	r2, [r1, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	601c      	str	r4, [r3, #0]
 8006080:	605d      	str	r5, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	9803      	ldr	r0, [sp, #12]
 800608a:	b00b      	add	sp, #44	; 0x2c
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608e:	9b08      	ldr	r3, [sp, #32]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0e4      	beq.n	800605e <_scanf_float+0x36a>
 8006094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006096:	9a03      	ldr	r2, [sp, #12]
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	9802      	ldr	r0, [sp, #8]
 800609c:	230a      	movs	r3, #10
 800609e:	f002 fd09 	bl	8008ab4 <_strtol_r>
 80060a2:	9b08      	ldr	r3, [sp, #32]
 80060a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060a6:	1ac2      	subs	r2, r0, r3
 80060a8:	003b      	movs	r3, r7
 80060aa:	3370      	adds	r3, #112	; 0x70
 80060ac:	33ff      	adds	r3, #255	; 0xff
 80060ae:	429d      	cmp	r5, r3
 80060b0:	d302      	bcc.n	80060b8 <_scanf_float+0x3c4>
 80060b2:	003d      	movs	r5, r7
 80060b4:	356f      	adds	r5, #111	; 0x6f
 80060b6:	35ff      	adds	r5, #255	; 0xff
 80060b8:	0028      	movs	r0, r5
 80060ba:	4910      	ldr	r1, [pc, #64]	; (80060fc <_scanf_float+0x408>)
 80060bc:	f000 f8e6 	bl	800628c <siprintf>
 80060c0:	e7cd      	b.n	800605e <_scanf_float+0x36a>
 80060c2:	1d19      	adds	r1, r3, #4
 80060c4:	0752      	lsls	r2, r2, #29
 80060c6:	d502      	bpl.n	80060ce <_scanf_float+0x3da>
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	6011      	str	r1, [r2, #0]
 80060cc:	e7d6      	b.n	800607c <_scanf_float+0x388>
 80060ce:	9a07      	ldr	r2, [sp, #28]
 80060d0:	0020      	movs	r0, r4
 80060d2:	6011      	str	r1, [r2, #0]
 80060d4:	681e      	ldr	r6, [r3, #0]
 80060d6:	0022      	movs	r2, r4
 80060d8:	002b      	movs	r3, r5
 80060da:	0029      	movs	r1, r5
 80060dc:	f7fc f90c 	bl	80022f8 <__aeabi_dcmpun>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d004      	beq.n	80060ee <_scanf_float+0x3fa>
 80060e4:	4806      	ldr	r0, [pc, #24]	; (8006100 <_scanf_float+0x40c>)
 80060e6:	f000 f9cf 	bl	8006488 <nanf>
 80060ea:	6030      	str	r0, [r6, #0]
 80060ec:	e7c9      	b.n	8006082 <_scanf_float+0x38e>
 80060ee:	0020      	movs	r0, r4
 80060f0:	0029      	movs	r1, r5
 80060f2:	f7fc f9f3 	bl	80024dc <__aeabi_d2f>
 80060f6:	e7f8      	b.n	80060ea <_scanf_float+0x3f6>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e63f      	b.n	8005d7c <_scanf_float+0x88>
 80060fc:	08009e78 	.word	0x08009e78
 8006100:	0800a20d 	.word	0x0800a20d

08006104 <std>:
 8006104:	2300      	movs	r3, #0
 8006106:	b510      	push	{r4, lr}
 8006108:	0004      	movs	r4, r0
 800610a:	6003      	str	r3, [r0, #0]
 800610c:	6043      	str	r3, [r0, #4]
 800610e:	6083      	str	r3, [r0, #8]
 8006110:	8181      	strh	r1, [r0, #12]
 8006112:	6643      	str	r3, [r0, #100]	; 0x64
 8006114:	81c2      	strh	r2, [r0, #14]
 8006116:	6103      	str	r3, [r0, #16]
 8006118:	6143      	str	r3, [r0, #20]
 800611a:	6183      	str	r3, [r0, #24]
 800611c:	0019      	movs	r1, r3
 800611e:	2208      	movs	r2, #8
 8006120:	305c      	adds	r0, #92	; 0x5c
 8006122:	f000 f91f 	bl	8006364 <memset>
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <std+0x50>)
 8006128:	6224      	str	r4, [r4, #32]
 800612a:	6263      	str	r3, [r4, #36]	; 0x24
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <std+0x54>)
 800612e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <std+0x58>)
 8006132:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <std+0x5c>)
 8006136:	6323      	str	r3, [r4, #48]	; 0x30
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <std+0x60>)
 800613a:	429c      	cmp	r4, r3
 800613c:	d005      	beq.n	800614a <std+0x46>
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <std+0x64>)
 8006140:	429c      	cmp	r4, r3
 8006142:	d002      	beq.n	800614a <std+0x46>
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <std+0x68>)
 8006146:	429c      	cmp	r4, r3
 8006148:	d103      	bne.n	8006152 <std+0x4e>
 800614a:	0020      	movs	r0, r4
 800614c:	3058      	adds	r0, #88	; 0x58
 800614e:	f000 f98d 	bl	800646c <__retarget_lock_init_recursive>
 8006152:	bd10      	pop	{r4, pc}
 8006154:	080062cd 	.word	0x080062cd
 8006158:	080062f5 	.word	0x080062f5
 800615c:	0800632d 	.word	0x0800632d
 8006160:	08006359 	.word	0x08006359
 8006164:	20000314 	.word	0x20000314
 8006168:	2000037c 	.word	0x2000037c
 800616c:	200003e4 	.word	0x200003e4

08006170 <stdio_exit_handler>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4a03      	ldr	r2, [pc, #12]	; (8006180 <stdio_exit_handler+0x10>)
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <stdio_exit_handler+0x14>)
 8006176:	4804      	ldr	r0, [pc, #16]	; (8006188 <stdio_exit_handler+0x18>)
 8006178:	f000 f86c 	bl	8006254 <_fwalk_sglue>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	2000000c 	.word	0x2000000c
 8006184:	08008e95 	.word	0x08008e95
 8006188:	20000018 	.word	0x20000018

0800618c <cleanup_stdio>:
 800618c:	6841      	ldr	r1, [r0, #4]
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <cleanup_stdio+0x30>)
 8006190:	b510      	push	{r4, lr}
 8006192:	0004      	movs	r4, r0
 8006194:	4299      	cmp	r1, r3
 8006196:	d001      	beq.n	800619c <cleanup_stdio+0x10>
 8006198:	f002 fe7c 	bl	8008e94 <_fflush_r>
 800619c:	68a1      	ldr	r1, [r4, #8]
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <cleanup_stdio+0x34>)
 80061a0:	4299      	cmp	r1, r3
 80061a2:	d002      	beq.n	80061aa <cleanup_stdio+0x1e>
 80061a4:	0020      	movs	r0, r4
 80061a6:	f002 fe75 	bl	8008e94 <_fflush_r>
 80061aa:	68e1      	ldr	r1, [r4, #12]
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <cleanup_stdio+0x38>)
 80061ae:	4299      	cmp	r1, r3
 80061b0:	d002      	beq.n	80061b8 <cleanup_stdio+0x2c>
 80061b2:	0020      	movs	r0, r4
 80061b4:	f002 fe6e 	bl	8008e94 <_fflush_r>
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	20000314 	.word	0x20000314
 80061c0:	2000037c 	.word	0x2000037c
 80061c4:	200003e4 	.word	0x200003e4

080061c8 <global_stdio_init.part.0>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <global_stdio_init.part.0+0x28>)
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <global_stdio_init.part.0+0x2c>)
 80061ce:	2104      	movs	r1, #4
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	4809      	ldr	r0, [pc, #36]	; (80061f8 <global_stdio_init.part.0+0x30>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	f7ff ff95 	bl	8006104 <std>
 80061da:	2201      	movs	r2, #1
 80061dc:	2109      	movs	r1, #9
 80061de:	4807      	ldr	r0, [pc, #28]	; (80061fc <global_stdio_init.part.0+0x34>)
 80061e0:	f7ff ff90 	bl	8006104 <std>
 80061e4:	2202      	movs	r2, #2
 80061e6:	2112      	movs	r1, #18
 80061e8:	4805      	ldr	r0, [pc, #20]	; (8006200 <global_stdio_init.part.0+0x38>)
 80061ea:	f7ff ff8b 	bl	8006104 <std>
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	2000044c 	.word	0x2000044c
 80061f4:	08006171 	.word	0x08006171
 80061f8:	20000314 	.word	0x20000314
 80061fc:	2000037c 	.word	0x2000037c
 8006200:	200003e4 	.word	0x200003e4

08006204 <__sfp_lock_acquire>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4802      	ldr	r0, [pc, #8]	; (8006210 <__sfp_lock_acquire+0xc>)
 8006208:	f000 f931 	bl	800646e <__retarget_lock_acquire_recursive>
 800620c:	bd10      	pop	{r4, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	20000455 	.word	0x20000455

08006214 <__sfp_lock_release>:
 8006214:	b510      	push	{r4, lr}
 8006216:	4802      	ldr	r0, [pc, #8]	; (8006220 <__sfp_lock_release+0xc>)
 8006218:	f000 f92a 	bl	8006470 <__retarget_lock_release_recursive>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	20000455 	.word	0x20000455

08006224 <__sinit>:
 8006224:	b510      	push	{r4, lr}
 8006226:	0004      	movs	r4, r0
 8006228:	f7ff ffec 	bl	8006204 <__sfp_lock_acquire>
 800622c:	6a23      	ldr	r3, [r4, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <__sinit+0x14>
 8006232:	f7ff ffef 	bl	8006214 <__sfp_lock_release>
 8006236:	bd10      	pop	{r4, pc}
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <__sinit+0x28>)
 800623a:	6223      	str	r3, [r4, #32]
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <__sinit+0x2c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f6      	bne.n	8006232 <__sinit+0xe>
 8006244:	f7ff ffc0 	bl	80061c8 <global_stdio_init.part.0>
 8006248:	e7f3      	b.n	8006232 <__sinit+0xe>
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	0800618d 	.word	0x0800618d
 8006250:	2000044c 	.word	0x2000044c

08006254 <_fwalk_sglue>:
 8006254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006256:	0014      	movs	r4, r2
 8006258:	2600      	movs	r6, #0
 800625a:	9000      	str	r0, [sp, #0]
 800625c:	9101      	str	r1, [sp, #4]
 800625e:	68a5      	ldr	r5, [r4, #8]
 8006260:	6867      	ldr	r7, [r4, #4]
 8006262:	3f01      	subs	r7, #1
 8006264:	d504      	bpl.n	8006270 <_fwalk_sglue+0x1c>
 8006266:	6824      	ldr	r4, [r4, #0]
 8006268:	2c00      	cmp	r4, #0
 800626a:	d1f8      	bne.n	800625e <_fwalk_sglue+0xa>
 800626c:	0030      	movs	r0, r6
 800626e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006270:	89ab      	ldrh	r3, [r5, #12]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d908      	bls.n	8006288 <_fwalk_sglue+0x34>
 8006276:	220e      	movs	r2, #14
 8006278:	5eab      	ldrsh	r3, [r5, r2]
 800627a:	3301      	adds	r3, #1
 800627c:	d004      	beq.n	8006288 <_fwalk_sglue+0x34>
 800627e:	0029      	movs	r1, r5
 8006280:	9800      	ldr	r0, [sp, #0]
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	4798      	blx	r3
 8006286:	4306      	orrs	r6, r0
 8006288:	3568      	adds	r5, #104	; 0x68
 800628a:	e7ea      	b.n	8006262 <_fwalk_sglue+0xe>

0800628c <siprintf>:
 800628c:	b40e      	push	{r1, r2, r3}
 800628e:	b500      	push	{lr}
 8006290:	490b      	ldr	r1, [pc, #44]	; (80062c0 <siprintf+0x34>)
 8006292:	b09c      	sub	sp, #112	; 0x70
 8006294:	ab1d      	add	r3, sp, #116	; 0x74
 8006296:	9002      	str	r0, [sp, #8]
 8006298:	9006      	str	r0, [sp, #24]
 800629a:	9107      	str	r1, [sp, #28]
 800629c:	9104      	str	r1, [sp, #16]
 800629e:	4809      	ldr	r0, [pc, #36]	; (80062c4 <siprintf+0x38>)
 80062a0:	4909      	ldr	r1, [pc, #36]	; (80062c8 <siprintf+0x3c>)
 80062a2:	cb04      	ldmia	r3!, {r2}
 80062a4:	9105      	str	r1, [sp, #20]
 80062a6:	6800      	ldr	r0, [r0, #0]
 80062a8:	a902      	add	r1, sp, #8
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	f002 fc68 	bl	8008b80 <_svfiprintf_r>
 80062b0:	2200      	movs	r2, #0
 80062b2:	9b02      	ldr	r3, [sp, #8]
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	b01c      	add	sp, #112	; 0x70
 80062b8:	bc08      	pop	{r3}
 80062ba:	b003      	add	sp, #12
 80062bc:	4718      	bx	r3
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	7fffffff 	.word	0x7fffffff
 80062c4:	20000064 	.word	0x20000064
 80062c8:	ffff0208 	.word	0xffff0208

080062cc <__sread>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	000c      	movs	r4, r1
 80062d0:	250e      	movs	r5, #14
 80062d2:	5f49      	ldrsh	r1, [r1, r5]
 80062d4:	f000 f878 	bl	80063c8 <_read_r>
 80062d8:	2800      	cmp	r0, #0
 80062da:	db03      	blt.n	80062e4 <__sread+0x18>
 80062dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062de:	181b      	adds	r3, r3, r0
 80062e0:	6563      	str	r3, [r4, #84]	; 0x54
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	4a02      	ldr	r2, [pc, #8]	; (80062f0 <__sread+0x24>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	e7f9      	b.n	80062e2 <__sread+0x16>
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	ffffefff 	.word	0xffffefff

080062f4 <__swrite>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	001f      	movs	r7, r3
 80062f8:	898b      	ldrh	r3, [r1, #12]
 80062fa:	0005      	movs	r5, r0
 80062fc:	000c      	movs	r4, r1
 80062fe:	0016      	movs	r6, r2
 8006300:	05db      	lsls	r3, r3, #23
 8006302:	d505      	bpl.n	8006310 <__swrite+0x1c>
 8006304:	230e      	movs	r3, #14
 8006306:	5ec9      	ldrsh	r1, [r1, r3]
 8006308:	2200      	movs	r2, #0
 800630a:	2302      	movs	r3, #2
 800630c:	f000 f848 	bl	80063a0 <_lseek_r>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	4a05      	ldr	r2, [pc, #20]	; (8006328 <__swrite+0x34>)
 8006314:	0028      	movs	r0, r5
 8006316:	4013      	ands	r3, r2
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	0032      	movs	r2, r6
 800631c:	230e      	movs	r3, #14
 800631e:	5ee1      	ldrsh	r1, [r4, r3]
 8006320:	003b      	movs	r3, r7
 8006322:	f000 f865 	bl	80063f0 <_write_r>
 8006326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006328:	ffffefff 	.word	0xffffefff

0800632c <__sseek>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	000c      	movs	r4, r1
 8006330:	250e      	movs	r5, #14
 8006332:	5f49      	ldrsh	r1, [r1, r5]
 8006334:	f000 f834 	bl	80063a0 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	1c42      	adds	r2, r0, #1
 800633c:	d103      	bne.n	8006346 <__sseek+0x1a>
 800633e:	4a05      	ldr	r2, [pc, #20]	; (8006354 <__sseek+0x28>)
 8006340:	4013      	ands	r3, r2
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	0152      	lsls	r2, r2, #5
 800634a:	4313      	orrs	r3, r2
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	6560      	str	r0, [r4, #84]	; 0x54
 8006350:	e7f8      	b.n	8006344 <__sseek+0x18>
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	ffffefff 	.word	0xffffefff

08006358 <__sclose>:
 8006358:	b510      	push	{r4, lr}
 800635a:	230e      	movs	r3, #14
 800635c:	5ec9      	ldrsh	r1, [r1, r3]
 800635e:	f000 f80d 	bl	800637c <_close_r>
 8006362:	bd10      	pop	{r4, pc}

08006364 <memset>:
 8006364:	0003      	movs	r3, r0
 8006366:	1882      	adds	r2, r0, r2
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	7019      	strb	r1, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <_localeconv_r>:
 8006374:	4800      	ldr	r0, [pc, #0]	; (8006378 <_localeconv_r+0x4>)
 8006376:	4770      	bx	lr
 8006378:	20000158 	.word	0x20000158

0800637c <_close_r>:
 800637c:	2300      	movs	r3, #0
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	4d06      	ldr	r5, [pc, #24]	; (800639c <_close_r+0x20>)
 8006382:	0004      	movs	r4, r0
 8006384:	0008      	movs	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fc fc9d 	bl	8002cc6 <_close>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d103      	bne.n	8006398 <_close_r+0x1c>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d000      	beq.n	8006398 <_close_r+0x1c>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20000450 	.word	0x20000450

080063a0 <_lseek_r>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	0004      	movs	r4, r0
 80063a4:	0008      	movs	r0, r1
 80063a6:	0011      	movs	r1, r2
 80063a8:	001a      	movs	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	4d05      	ldr	r5, [pc, #20]	; (80063c4 <_lseek_r+0x24>)
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fc fcaa 	bl	8002d08 <_lseek>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d103      	bne.n	80063c0 <_lseek_r+0x20>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d000      	beq.n	80063c0 <_lseek_r+0x20>
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	20000450 	.word	0x20000450

080063c8 <_read_r>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	0004      	movs	r4, r0
 80063cc:	0008      	movs	r0, r1
 80063ce:	0011      	movs	r1, r2
 80063d0:	001a      	movs	r2, r3
 80063d2:	2300      	movs	r3, #0
 80063d4:	4d05      	ldr	r5, [pc, #20]	; (80063ec <_read_r+0x24>)
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fc fc3c 	bl	8002c54 <_read>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d103      	bne.n	80063e8 <_read_r+0x20>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d000      	beq.n	80063e8 <_read_r+0x20>
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	20000450 	.word	0x20000450

080063f0 <_write_r>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	0004      	movs	r4, r0
 80063f4:	0008      	movs	r0, r1
 80063f6:	0011      	movs	r1, r2
 80063f8:	001a      	movs	r2, r3
 80063fa:	2300      	movs	r3, #0
 80063fc:	4d05      	ldr	r5, [pc, #20]	; (8006414 <_write_r+0x24>)
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f7fc fc45 	bl	8002c8e <_write>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d103      	bne.n	8006410 <_write_r+0x20>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d000      	beq.n	8006410 <_write_r+0x20>
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	20000450 	.word	0x20000450

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000064 	.word	0x20000064

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	2600      	movs	r6, #0
 8006428:	4c0c      	ldr	r4, [pc, #48]	; (800645c <__libc_init_array+0x38>)
 800642a:	4d0d      	ldr	r5, [pc, #52]	; (8006460 <__libc_init_array+0x3c>)
 800642c:	1b64      	subs	r4, r4, r5
 800642e:	10a4      	asrs	r4, r4, #2
 8006430:	42a6      	cmp	r6, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	2600      	movs	r6, #0
 8006436:	f003 fc71 	bl	8009d1c <_init>
 800643a:	4c0a      	ldr	r4, [pc, #40]	; (8006464 <__libc_init_array+0x40>)
 800643c:	4d0a      	ldr	r5, [pc, #40]	; (8006468 <__libc_init_array+0x44>)
 800643e:	1b64      	subs	r4, r4, r5
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	42a6      	cmp	r6, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	00b3      	lsls	r3, r6, #2
 800644a:	58eb      	ldr	r3, [r5, r3]
 800644c:	4798      	blx	r3
 800644e:	3601      	adds	r6, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	00b3      	lsls	r3, r6, #2
 8006454:	58eb      	ldr	r3, [r5, r3]
 8006456:	4798      	blx	r3
 8006458:	3601      	adds	r6, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	0800a270 	.word	0x0800a270
 8006460:	0800a270 	.word	0x0800a270
 8006464:	0800a274 	.word	0x0800a274
 8006468:	0800a270 	.word	0x0800a270

0800646c <__retarget_lock_init_recursive>:
 800646c:	4770      	bx	lr

0800646e <__retarget_lock_acquire_recursive>:
 800646e:	4770      	bx	lr

08006470 <__retarget_lock_release_recursive>:
 8006470:	4770      	bx	lr

08006472 <memchr>:
 8006472:	b2c9      	uxtb	r1, r1
 8006474:	1882      	adds	r2, r0, r2
 8006476:	4290      	cmp	r0, r2
 8006478:	d101      	bne.n	800647e <memchr+0xc>
 800647a:	2000      	movs	r0, #0
 800647c:	4770      	bx	lr
 800647e:	7803      	ldrb	r3, [r0, #0]
 8006480:	428b      	cmp	r3, r1
 8006482:	d0fb      	beq.n	800647c <memchr+0xa>
 8006484:	3001      	adds	r0, #1
 8006486:	e7f6      	b.n	8006476 <memchr+0x4>

08006488 <nanf>:
 8006488:	4800      	ldr	r0, [pc, #0]	; (800648c <nanf+0x4>)
 800648a:	4770      	bx	lr
 800648c:	7fc00000 	.word	0x7fc00000

08006490 <quorem>:
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006492:	6902      	ldr	r2, [r0, #16]
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	b089      	sub	sp, #36	; 0x24
 8006498:	0007      	movs	r7, r0
 800649a:	9104      	str	r1, [sp, #16]
 800649c:	2000      	movs	r0, #0
 800649e:	429a      	cmp	r2, r3
 80064a0:	db69      	blt.n	8006576 <quorem+0xe6>
 80064a2:	3b01      	subs	r3, #1
 80064a4:	009c      	lsls	r4, r3, #2
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	000b      	movs	r3, r1
 80064aa:	3314      	adds	r3, #20
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	191b      	adds	r3, r3, r4
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	003b      	movs	r3, r7
 80064b4:	3314      	adds	r3, #20
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	191c      	adds	r4, r3, r4
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	6826      	ldr	r6, [r4, #0]
 80064be:	681d      	ldr	r5, [r3, #0]
 80064c0:	0030      	movs	r0, r6
 80064c2:	3501      	adds	r5, #1
 80064c4:	0029      	movs	r1, r5
 80064c6:	f7f9 fe3b 	bl	8000140 <__udivsi3>
 80064ca:	9002      	str	r0, [sp, #8]
 80064cc:	42ae      	cmp	r6, r5
 80064ce:	d329      	bcc.n	8006524 <quorem+0x94>
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	2600      	movs	r6, #0
 80064d4:	469c      	mov	ip, r3
 80064d6:	9d03      	ldr	r5, [sp, #12]
 80064d8:	9606      	str	r6, [sp, #24]
 80064da:	4662      	mov	r2, ip
 80064dc:	ca08      	ldmia	r2!, {r3}
 80064de:	6828      	ldr	r0, [r5, #0]
 80064e0:	4694      	mov	ip, r2
 80064e2:	9a02      	ldr	r2, [sp, #8]
 80064e4:	b299      	uxth	r1, r3
 80064e6:	4351      	muls	r1, r2
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	4353      	muls	r3, r2
 80064ec:	1989      	adds	r1, r1, r6
 80064ee:	0c0a      	lsrs	r2, r1, #16
 80064f0:	189b      	adds	r3, r3, r2
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	0c1e      	lsrs	r6, r3, #16
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	b282      	uxth	r2, r0
 80064fa:	18d2      	adds	r2, r2, r3
 80064fc:	466b      	mov	r3, sp
 80064fe:	b289      	uxth	r1, r1
 8006500:	8b9b      	ldrh	r3, [r3, #28]
 8006502:	1a52      	subs	r2, r2, r1
 8006504:	0c01      	lsrs	r1, r0, #16
 8006506:	1ac9      	subs	r1, r1, r3
 8006508:	1413      	asrs	r3, r2, #16
 800650a:	18cb      	adds	r3, r1, r3
 800650c:	1419      	asrs	r1, r3, #16
 800650e:	b292      	uxth	r2, r2
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	4313      	orrs	r3, r2
 8006514:	c508      	stmia	r5!, {r3}
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	9106      	str	r1, [sp, #24]
 800651a:	4563      	cmp	r3, ip
 800651c:	d2dd      	bcs.n	80064da <quorem+0x4a>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d030      	beq.n	8006586 <quorem+0xf6>
 8006524:	0038      	movs	r0, r7
 8006526:	9904      	ldr	r1, [sp, #16]
 8006528:	f001 fa2a 	bl	8007980 <__mcmp>
 800652c:	2800      	cmp	r0, #0
 800652e:	db21      	blt.n	8006574 <quorem+0xe4>
 8006530:	0038      	movs	r0, r7
 8006532:	2600      	movs	r6, #0
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	9c04      	ldr	r4, [sp, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	3014      	adds	r0, #20
 800653e:	3414      	adds	r4, #20
 8006540:	6803      	ldr	r3, [r0, #0]
 8006542:	cc02      	ldmia	r4!, {r1}
 8006544:	b29d      	uxth	r5, r3
 8006546:	19ad      	adds	r5, r5, r6
 8006548:	b28a      	uxth	r2, r1
 800654a:	1aaa      	subs	r2, r5, r2
 800654c:	0c09      	lsrs	r1, r1, #16
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	1a5b      	subs	r3, r3, r1
 8006552:	1411      	asrs	r1, r2, #16
 8006554:	185b      	adds	r3, r3, r1
 8006556:	141e      	asrs	r6, r3, #16
 8006558:	b292      	uxth	r2, r2
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	4313      	orrs	r3, r2
 800655e:	c008      	stmia	r0!, {r3}
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	42a3      	cmp	r3, r4
 8006564:	d2ec      	bcs.n	8006540 <quorem+0xb0>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	9a03      	ldr	r2, [sp, #12]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	18d3      	adds	r3, r2, r3
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d015      	beq.n	80065a0 <quorem+0x110>
 8006574:	9802      	ldr	r0, [sp, #8]
 8006576:	b009      	add	sp, #36	; 0x24
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <quorem+0xfe>
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	3b01      	subs	r3, #1
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	3c04      	subs	r4, #4
 800658a:	42a3      	cmp	r3, r4
 800658c:	d3f5      	bcc.n	800657a <quorem+0xea>
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e7c7      	b.n	8006524 <quorem+0x94>
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	2a00      	cmp	r2, #0
 8006598:	d106      	bne.n	80065a8 <quorem+0x118>
 800659a:	9a01      	ldr	r2, [sp, #4]
 800659c:	3a01      	subs	r2, #1
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	9a03      	ldr	r2, [sp, #12]
 80065a2:	3b04      	subs	r3, #4
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d3f5      	bcc.n	8006594 <quorem+0x104>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e7e2      	b.n	8006574 <quorem+0xe4>
	...

080065b0 <_dtoa_r>:
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	0014      	movs	r4, r2
 80065b4:	001d      	movs	r5, r3
 80065b6:	69c6      	ldr	r6, [r0, #28]
 80065b8:	b09d      	sub	sp, #116	; 0x74
 80065ba:	9408      	str	r4, [sp, #32]
 80065bc:	9509      	str	r5, [sp, #36]	; 0x24
 80065be:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80065c0:	9004      	str	r0, [sp, #16]
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	d10f      	bne.n	80065e6 <_dtoa_r+0x36>
 80065c6:	2010      	movs	r0, #16
 80065c8:	f000 fe4a 	bl	8007260 <malloc>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	1e02      	subs	r2, r0, #0
 80065d0:	61d8      	str	r0, [r3, #28]
 80065d2:	d104      	bne.n	80065de <_dtoa_r+0x2e>
 80065d4:	21ef      	movs	r1, #239	; 0xef
 80065d6:	4bc6      	ldr	r3, [pc, #792]	; (80068f0 <_dtoa_r+0x340>)
 80065d8:	48c6      	ldr	r0, [pc, #792]	; (80068f4 <_dtoa_r+0x344>)
 80065da:	f002 fccd 	bl	8008f78 <__assert_func>
 80065de:	6046      	str	r6, [r0, #4]
 80065e0:	6086      	str	r6, [r0, #8]
 80065e2:	6006      	str	r6, [r0, #0]
 80065e4:	60c6      	str	r6, [r0, #12]
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d00b      	beq.n	8006608 <_dtoa_r+0x58>
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	2301      	movs	r3, #1
 80065f4:	4093      	lsls	r3, r2
 80065f6:	604a      	str	r2, [r1, #4]
 80065f8:	608b      	str	r3, [r1, #8]
 80065fa:	9804      	ldr	r0, [sp, #16]
 80065fc:	f000 ff32 	bl	8007464 <_Bfree>
 8006600:	2200      	movs	r2, #0
 8006602:	9b04      	ldr	r3, [sp, #16]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	2d00      	cmp	r5, #0
 800660a:	da1e      	bge.n	800664a <_dtoa_r+0x9a>
 800660c:	2301      	movs	r3, #1
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	006b      	lsls	r3, r5, #1
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	9309      	str	r3, [sp, #36]	; 0x24
 8006616:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006618:	4bb7      	ldr	r3, [pc, #732]	; (80068f8 <_dtoa_r+0x348>)
 800661a:	4ab7      	ldr	r2, [pc, #732]	; (80068f8 <_dtoa_r+0x348>)
 800661c:	403b      	ands	r3, r7
 800661e:	4293      	cmp	r3, r2
 8006620:	d116      	bne.n	8006650 <_dtoa_r+0xa0>
 8006622:	4bb6      	ldr	r3, [pc, #728]	; (80068fc <_dtoa_r+0x34c>)
 8006624:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	033b      	lsls	r3, r7, #12
 800662a:	0b1b      	lsrs	r3, r3, #12
 800662c:	4323      	orrs	r3, r4
 800662e:	d101      	bne.n	8006634 <_dtoa_r+0x84>
 8006630:	f000 fdb5 	bl	800719e <_dtoa_r+0xbee>
 8006634:	4bb2      	ldr	r3, [pc, #712]	; (8006900 <_dtoa_r+0x350>)
 8006636:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006638:	9306      	str	r3, [sp, #24]
 800663a:	2a00      	cmp	r2, #0
 800663c:	d002      	beq.n	8006644 <_dtoa_r+0x94>
 800663e:	4bb1      	ldr	r3, [pc, #708]	; (8006904 <_dtoa_r+0x354>)
 8006640:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	9806      	ldr	r0, [sp, #24]
 8006646:	b01d      	add	sp, #116	; 0x74
 8006648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	e7e2      	b.n	8006616 <_dtoa_r+0x66>
 8006650:	9a08      	ldr	r2, [sp, #32]
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	9210      	str	r2, [sp, #64]	; 0x40
 8006656:	9311      	str	r3, [sp, #68]	; 0x44
 8006658:	9810      	ldr	r0, [sp, #64]	; 0x40
 800665a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800665c:	2200      	movs	r2, #0
 800665e:	2300      	movs	r3, #0
 8006660:	f7f9 fef4 	bl	800044c <__aeabi_dcmpeq>
 8006664:	1e06      	subs	r6, r0, #0
 8006666:	d009      	beq.n	800667c <_dtoa_r+0xcc>
 8006668:	2301      	movs	r3, #1
 800666a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4ba6      	ldr	r3, [pc, #664]	; (8006908 <_dtoa_r+0x358>)
 8006670:	9306      	str	r3, [sp, #24]
 8006672:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0e5      	beq.n	8006644 <_dtoa_r+0x94>
 8006678:	4ba4      	ldr	r3, [pc, #656]	; (800690c <_dtoa_r+0x35c>)
 800667a:	e7e1      	b.n	8006640 <_dtoa_r+0x90>
 800667c:	ab1a      	add	r3, sp, #104	; 0x68
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	ab1b      	add	r3, sp, #108	; 0x6c
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	9804      	ldr	r0, [sp, #16]
 8006686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800668a:	f001 fa95 	bl	8007bb8 <__d2b>
 800668e:	007a      	lsls	r2, r7, #1
 8006690:	9005      	str	r0, [sp, #20]
 8006692:	0d52      	lsrs	r2, r2, #21
 8006694:	d100      	bne.n	8006698 <_dtoa_r+0xe8>
 8006696:	e07b      	b.n	8006790 <_dtoa_r+0x1e0>
 8006698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800669a:	9617      	str	r6, [sp, #92]	; 0x5c
 800669c:	0319      	lsls	r1, r3, #12
 800669e:	4b9c      	ldr	r3, [pc, #624]	; (8006910 <_dtoa_r+0x360>)
 80066a0:	0b09      	lsrs	r1, r1, #12
 80066a2:	430b      	orrs	r3, r1
 80066a4:	499b      	ldr	r1, [pc, #620]	; (8006914 <_dtoa_r+0x364>)
 80066a6:	1857      	adds	r7, r2, r1
 80066a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80066aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066ac:	0019      	movs	r1, r3
 80066ae:	2200      	movs	r2, #0
 80066b0:	4b99      	ldr	r3, [pc, #612]	; (8006918 <_dtoa_r+0x368>)
 80066b2:	f7fb fa9f 	bl	8001bf4 <__aeabi_dsub>
 80066b6:	4a99      	ldr	r2, [pc, #612]	; (800691c <_dtoa_r+0x36c>)
 80066b8:	4b99      	ldr	r3, [pc, #612]	; (8006920 <_dtoa_r+0x370>)
 80066ba:	f7fa ffd9 	bl	8001670 <__aeabi_dmul>
 80066be:	4a99      	ldr	r2, [pc, #612]	; (8006924 <_dtoa_r+0x374>)
 80066c0:	4b99      	ldr	r3, [pc, #612]	; (8006928 <_dtoa_r+0x378>)
 80066c2:	f7fa f87b 	bl	80007bc <__aeabi_dadd>
 80066c6:	0004      	movs	r4, r0
 80066c8:	0038      	movs	r0, r7
 80066ca:	000d      	movs	r5, r1
 80066cc:	f7fb fe68 	bl	80023a0 <__aeabi_i2d>
 80066d0:	4a96      	ldr	r2, [pc, #600]	; (800692c <_dtoa_r+0x37c>)
 80066d2:	4b97      	ldr	r3, [pc, #604]	; (8006930 <_dtoa_r+0x380>)
 80066d4:	f7fa ffcc 	bl	8001670 <__aeabi_dmul>
 80066d8:	0002      	movs	r2, r0
 80066da:	000b      	movs	r3, r1
 80066dc:	0020      	movs	r0, r4
 80066de:	0029      	movs	r1, r5
 80066e0:	f7fa f86c 	bl	80007bc <__aeabi_dadd>
 80066e4:	0004      	movs	r4, r0
 80066e6:	000d      	movs	r5, r1
 80066e8:	f7fb fe24 	bl	8002334 <__aeabi_d2iz>
 80066ec:	2200      	movs	r2, #0
 80066ee:	9003      	str	r0, [sp, #12]
 80066f0:	2300      	movs	r3, #0
 80066f2:	0020      	movs	r0, r4
 80066f4:	0029      	movs	r1, r5
 80066f6:	f7f9 feaf 	bl	8000458 <__aeabi_dcmplt>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d00b      	beq.n	8006716 <_dtoa_r+0x166>
 80066fe:	9803      	ldr	r0, [sp, #12]
 8006700:	f7fb fe4e 	bl	80023a0 <__aeabi_i2d>
 8006704:	002b      	movs	r3, r5
 8006706:	0022      	movs	r2, r4
 8006708:	f7f9 fea0 	bl	800044c <__aeabi_dcmpeq>
 800670c:	4243      	negs	r3, r0
 800670e:	4158      	adcs	r0, r3
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1a1b      	subs	r3, r3, r0
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	2301      	movs	r3, #1
 8006718:	9316      	str	r3, [sp, #88]	; 0x58
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	2b16      	cmp	r3, #22
 800671e:	d810      	bhi.n	8006742 <_dtoa_r+0x192>
 8006720:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006722:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006724:	9a03      	ldr	r2, [sp, #12]
 8006726:	4b83      	ldr	r3, [pc, #524]	; (8006934 <_dtoa_r+0x384>)
 8006728:	00d2      	lsls	r2, r2, #3
 800672a:	189b      	adds	r3, r3, r2
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f7f9 fe92 	bl	8000458 <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	d047      	beq.n	80067c8 <_dtoa_r+0x218>
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	2300      	movs	r3, #0
 8006740:	9316      	str	r3, [sp, #88]	; 0x58
 8006742:	2200      	movs	r2, #0
 8006744:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006746:	920a      	str	r2, [sp, #40]	; 0x28
 8006748:	1bdb      	subs	r3, r3, r7
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	d53e      	bpl.n	80067cc <_dtoa_r+0x21c>
 800674e:	2201      	movs	r2, #1
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	930a      	str	r3, [sp, #40]	; 0x28
 8006754:	2300      	movs	r3, #0
 8006756:	930c      	str	r3, [sp, #48]	; 0x30
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	db38      	blt.n	80067d0 <_dtoa_r+0x220>
 800675e:	9a03      	ldr	r2, [sp, #12]
 8006760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006762:	4694      	mov	ip, r2
 8006764:	4463      	add	r3, ip
 8006766:	930c      	str	r3, [sp, #48]	; 0x30
 8006768:	2300      	movs	r3, #0
 800676a:	9213      	str	r2, [sp, #76]	; 0x4c
 800676c:	930d      	str	r3, [sp, #52]	; 0x34
 800676e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006770:	2401      	movs	r4, #1
 8006772:	2b09      	cmp	r3, #9
 8006774:	d867      	bhi.n	8006846 <_dtoa_r+0x296>
 8006776:	2b05      	cmp	r3, #5
 8006778:	dd02      	ble.n	8006780 <_dtoa_r+0x1d0>
 800677a:	2400      	movs	r4, #0
 800677c:	3b04      	subs	r3, #4
 800677e:	9322      	str	r3, [sp, #136]	; 0x88
 8006780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006782:	1e98      	subs	r0, r3, #2
 8006784:	2803      	cmp	r0, #3
 8006786:	d867      	bhi.n	8006858 <_dtoa_r+0x2a8>
 8006788:	f7f9 fcc6 	bl	8000118 <__gnu_thumb1_case_uqi>
 800678c:	5b383a2b 	.word	0x5b383a2b
 8006790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006792:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006794:	18f6      	adds	r6, r6, r3
 8006796:	4b68      	ldr	r3, [pc, #416]	; (8006938 <_dtoa_r+0x388>)
 8006798:	18f2      	adds	r2, r6, r3
 800679a:	2a20      	cmp	r2, #32
 800679c:	dd0f      	ble.n	80067be <_dtoa_r+0x20e>
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	409f      	lsls	r7, r3
 80067a4:	4b65      	ldr	r3, [pc, #404]	; (800693c <_dtoa_r+0x38c>)
 80067a6:	0038      	movs	r0, r7
 80067a8:	18f3      	adds	r3, r6, r3
 80067aa:	40dc      	lsrs	r4, r3
 80067ac:	4320      	orrs	r0, r4
 80067ae:	f7fb fe27 	bl	8002400 <__aeabi_ui2d>
 80067b2:	2201      	movs	r2, #1
 80067b4:	4b62      	ldr	r3, [pc, #392]	; (8006940 <_dtoa_r+0x390>)
 80067b6:	1e77      	subs	r7, r6, #1
 80067b8:	18cb      	adds	r3, r1, r3
 80067ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80067bc:	e776      	b.n	80066ac <_dtoa_r+0xfc>
 80067be:	2320      	movs	r3, #32
 80067c0:	0020      	movs	r0, r4
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	4098      	lsls	r0, r3
 80067c6:	e7f2      	b.n	80067ae <_dtoa_r+0x1fe>
 80067c8:	9016      	str	r0, [sp, #88]	; 0x58
 80067ca:	e7ba      	b.n	8006742 <_dtoa_r+0x192>
 80067cc:	920c      	str	r2, [sp, #48]	; 0x30
 80067ce:	e7c3      	b.n	8006758 <_dtoa_r+0x1a8>
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	9a03      	ldr	r2, [sp, #12]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
 80067d8:	4253      	negs	r3, r2
 80067da:	930d      	str	r3, [sp, #52]	; 0x34
 80067dc:	2300      	movs	r3, #0
 80067de:	9313      	str	r3, [sp, #76]	; 0x4c
 80067e0:	e7c5      	b.n	800676e <_dtoa_r+0x1be>
 80067e2:	2300      	movs	r3, #0
 80067e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dc13      	bgt.n	8006818 <_dtoa_r+0x268>
 80067f0:	2301      	movs	r3, #1
 80067f2:	001a      	movs	r2, r3
 80067f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80067fa:	e00d      	b.n	8006818 <_dtoa_r+0x268>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e7f1      	b.n	80067e4 <_dtoa_r+0x234>
 8006800:	2300      	movs	r3, #0
 8006802:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006804:	930f      	str	r3, [sp, #60]	; 0x3c
 8006806:	4694      	mov	ip, r2
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	4463      	add	r3, ip
 800680c:	930b      	str	r3, [sp, #44]	; 0x2c
 800680e:	3301      	adds	r3, #1
 8006810:	9307      	str	r3, [sp, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	dc00      	bgt.n	8006818 <_dtoa_r+0x268>
 8006816:	2301      	movs	r3, #1
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	2100      	movs	r1, #0
 800681c:	69d0      	ldr	r0, [r2, #28]
 800681e:	2204      	movs	r2, #4
 8006820:	0015      	movs	r5, r2
 8006822:	3514      	adds	r5, #20
 8006824:	429d      	cmp	r5, r3
 8006826:	d91b      	bls.n	8006860 <_dtoa_r+0x2b0>
 8006828:	6041      	str	r1, [r0, #4]
 800682a:	9804      	ldr	r0, [sp, #16]
 800682c:	f000 fdd6 	bl	80073dc <_Balloc>
 8006830:	9006      	str	r0, [sp, #24]
 8006832:	2800      	cmp	r0, #0
 8006834:	d117      	bne.n	8006866 <_dtoa_r+0x2b6>
 8006836:	21b0      	movs	r1, #176	; 0xb0
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <_dtoa_r+0x394>)
 800683a:	482e      	ldr	r0, [pc, #184]	; (80068f4 <_dtoa_r+0x344>)
 800683c:	9a06      	ldr	r2, [sp, #24]
 800683e:	31ff      	adds	r1, #255	; 0xff
 8006840:	e6cb      	b.n	80065da <_dtoa_r+0x2a>
 8006842:	2301      	movs	r3, #1
 8006844:	e7dd      	b.n	8006802 <_dtoa_r+0x252>
 8006846:	2300      	movs	r3, #0
 8006848:	940f      	str	r4, [sp, #60]	; 0x3c
 800684a:	9322      	str	r3, [sp, #136]	; 0x88
 800684c:	3b01      	subs	r3, #1
 800684e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	2200      	movs	r2, #0
 8006854:	3313      	adds	r3, #19
 8006856:	e7cf      	b.n	80067f8 <_dtoa_r+0x248>
 8006858:	2301      	movs	r3, #1
 800685a:	930f      	str	r3, [sp, #60]	; 0x3c
 800685c:	3b02      	subs	r3, #2
 800685e:	e7f6      	b.n	800684e <_dtoa_r+0x29e>
 8006860:	3101      	adds	r1, #1
 8006862:	0052      	lsls	r2, r2, #1
 8006864:	e7dc      	b.n	8006820 <_dtoa_r+0x270>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	9a06      	ldr	r2, [sp, #24]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	2b0e      	cmp	r3, #14
 8006872:	d900      	bls.n	8006876 <_dtoa_r+0x2c6>
 8006874:	e0e5      	b.n	8006a42 <_dtoa_r+0x492>
 8006876:	2c00      	cmp	r4, #0
 8006878:	d100      	bne.n	800687c <_dtoa_r+0x2cc>
 800687a:	e0e2      	b.n	8006a42 <_dtoa_r+0x492>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd64      	ble.n	800694c <_dtoa_r+0x39c>
 8006882:	210f      	movs	r1, #15
 8006884:	9a03      	ldr	r2, [sp, #12]
 8006886:	4b2b      	ldr	r3, [pc, #172]	; (8006934 <_dtoa_r+0x384>)
 8006888:	400a      	ands	r2, r1
 800688a:	00d2      	lsls	r2, r2, #3
 800688c:	189b      	adds	r3, r3, r2
 800688e:	681e      	ldr	r6, [r3, #0]
 8006890:	685f      	ldr	r7, [r3, #4]
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	2402      	movs	r4, #2
 8006896:	111d      	asrs	r5, r3, #4
 8006898:	05db      	lsls	r3, r3, #23
 800689a:	d50a      	bpl.n	80068b2 <_dtoa_r+0x302>
 800689c:	4b2a      	ldr	r3, [pc, #168]	; (8006948 <_dtoa_r+0x398>)
 800689e:	400d      	ands	r5, r1
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80068a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80068a8:	f7fa fae8 	bl	8000e7c <__aeabi_ddiv>
 80068ac:	9008      	str	r0, [sp, #32]
 80068ae:	9109      	str	r1, [sp, #36]	; 0x24
 80068b0:	3401      	adds	r4, #1
 80068b2:	4b25      	ldr	r3, [pc, #148]	; (8006948 <_dtoa_r+0x398>)
 80068b4:	930e      	str	r3, [sp, #56]	; 0x38
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	d108      	bne.n	80068cc <_dtoa_r+0x31c>
 80068ba:	9808      	ldr	r0, [sp, #32]
 80068bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068be:	0032      	movs	r2, r6
 80068c0:	003b      	movs	r3, r7
 80068c2:	f7fa fadb 	bl	8000e7c <__aeabi_ddiv>
 80068c6:	9008      	str	r0, [sp, #32]
 80068c8:	9109      	str	r1, [sp, #36]	; 0x24
 80068ca:	e05a      	b.n	8006982 <_dtoa_r+0x3d2>
 80068cc:	2301      	movs	r3, #1
 80068ce:	421d      	tst	r5, r3
 80068d0:	d009      	beq.n	80068e6 <_dtoa_r+0x336>
 80068d2:	18e4      	adds	r4, r4, r3
 80068d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d6:	0030      	movs	r0, r6
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0039      	movs	r1, r7
 80068de:	f7fa fec7 	bl	8001670 <__aeabi_dmul>
 80068e2:	0006      	movs	r6, r0
 80068e4:	000f      	movs	r7, r1
 80068e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068e8:	106d      	asrs	r5, r5, #1
 80068ea:	3308      	adds	r3, #8
 80068ec:	e7e2      	b.n	80068b4 <_dtoa_r+0x304>
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	08009e8a 	.word	0x08009e8a
 80068f4:	08009ea1 	.word	0x08009ea1
 80068f8:	7ff00000 	.word	0x7ff00000
 80068fc:	0000270f 	.word	0x0000270f
 8006900:	08009e86 	.word	0x08009e86
 8006904:	08009e89 	.word	0x08009e89
 8006908:	08009e54 	.word	0x08009e54
 800690c:	08009e55 	.word	0x08009e55
 8006910:	3ff00000 	.word	0x3ff00000
 8006914:	fffffc01 	.word	0xfffffc01
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	636f4361 	.word	0x636f4361
 8006920:	3fd287a7 	.word	0x3fd287a7
 8006924:	8b60c8b3 	.word	0x8b60c8b3
 8006928:	3fc68a28 	.word	0x3fc68a28
 800692c:	509f79fb 	.word	0x509f79fb
 8006930:	3fd34413 	.word	0x3fd34413
 8006934:	08009f90 	.word	0x08009f90
 8006938:	00000432 	.word	0x00000432
 800693c:	00000412 	.word	0x00000412
 8006940:	fe100000 	.word	0xfe100000
 8006944:	08009ef9 	.word	0x08009ef9
 8006948:	08009f68 	.word	0x08009f68
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	2402      	movs	r4, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <_dtoa_r+0x3d2>
 8006954:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006956:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006958:	220f      	movs	r2, #15
 800695a:	425d      	negs	r5, r3
 800695c:	402a      	ands	r2, r5
 800695e:	4bdd      	ldr	r3, [pc, #884]	; (8006cd4 <_dtoa_r+0x724>)
 8006960:	00d2      	lsls	r2, r2, #3
 8006962:	189b      	adds	r3, r3, r2
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f7fa fe82 	bl	8001670 <__aeabi_dmul>
 800696c:	2701      	movs	r7, #1
 800696e:	2300      	movs	r3, #0
 8006970:	9008      	str	r0, [sp, #32]
 8006972:	9109      	str	r1, [sp, #36]	; 0x24
 8006974:	4ed8      	ldr	r6, [pc, #864]	; (8006cd8 <_dtoa_r+0x728>)
 8006976:	112d      	asrs	r5, r5, #4
 8006978:	2d00      	cmp	r5, #0
 800697a:	d000      	beq.n	800697e <_dtoa_r+0x3ce>
 800697c:	e091      	b.n	8006aa2 <_dtoa_r+0x4f2>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1a1      	bne.n	80068c6 <_dtoa_r+0x316>
 8006982:	9e08      	ldr	r6, [sp, #32]
 8006984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006988:	2b00      	cmp	r3, #0
 800698a:	d100      	bne.n	800698e <_dtoa_r+0x3de>
 800698c:	e094      	b.n	8006ab8 <_dtoa_r+0x508>
 800698e:	2200      	movs	r2, #0
 8006990:	0030      	movs	r0, r6
 8006992:	0039      	movs	r1, r7
 8006994:	4bd1      	ldr	r3, [pc, #836]	; (8006cdc <_dtoa_r+0x72c>)
 8006996:	f7f9 fd5f 	bl	8000458 <__aeabi_dcmplt>
 800699a:	2800      	cmp	r0, #0
 800699c:	d100      	bne.n	80069a0 <_dtoa_r+0x3f0>
 800699e:	e08b      	b.n	8006ab8 <_dtoa_r+0x508>
 80069a0:	9b07      	ldr	r3, [sp, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d100      	bne.n	80069a8 <_dtoa_r+0x3f8>
 80069a6:	e087      	b.n	8006ab8 <_dtoa_r+0x508>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd45      	ble.n	8006a3a <_dtoa_r+0x48a>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	3b01      	subs	r3, #1
 80069b4:	930e      	str	r3, [sp, #56]	; 0x38
 80069b6:	0030      	movs	r0, r6
 80069b8:	4bc9      	ldr	r3, [pc, #804]	; (8006ce0 <_dtoa_r+0x730>)
 80069ba:	0039      	movs	r1, r7
 80069bc:	f7fa fe58 	bl	8001670 <__aeabi_dmul>
 80069c0:	9008      	str	r0, [sp, #32]
 80069c2:	9109      	str	r1, [sp, #36]	; 0x24
 80069c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c6:	3401      	adds	r4, #1
 80069c8:	0020      	movs	r0, r4
 80069ca:	9e08      	ldr	r6, [sp, #32]
 80069cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069ce:	9312      	str	r3, [sp, #72]	; 0x48
 80069d0:	f7fb fce6 	bl	80023a0 <__aeabi_i2d>
 80069d4:	0032      	movs	r2, r6
 80069d6:	003b      	movs	r3, r7
 80069d8:	f7fa fe4a 	bl	8001670 <__aeabi_dmul>
 80069dc:	2200      	movs	r2, #0
 80069de:	4bc1      	ldr	r3, [pc, #772]	; (8006ce4 <_dtoa_r+0x734>)
 80069e0:	f7f9 feec 	bl	80007bc <__aeabi_dadd>
 80069e4:	4ac0      	ldr	r2, [pc, #768]	; (8006ce8 <_dtoa_r+0x738>)
 80069e6:	9014      	str	r0, [sp, #80]	; 0x50
 80069e8:	9115      	str	r1, [sp, #84]	; 0x54
 80069ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80069ee:	4694      	mov	ip, r2
 80069f0:	9308      	str	r3, [sp, #32]
 80069f2:	9409      	str	r4, [sp, #36]	; 0x24
 80069f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069f6:	4463      	add	r3, ip
 80069f8:	9318      	str	r3, [sp, #96]	; 0x60
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d15e      	bne.n	8006ac0 <_dtoa_r+0x510>
 8006a02:	2200      	movs	r2, #0
 8006a04:	4bb9      	ldr	r3, [pc, #740]	; (8006cec <_dtoa_r+0x73c>)
 8006a06:	0030      	movs	r0, r6
 8006a08:	0039      	movs	r1, r7
 8006a0a:	f7fb f8f3 	bl	8001bf4 <__aeabi_dsub>
 8006a0e:	9a08      	ldr	r2, [sp, #32]
 8006a10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006a12:	0004      	movs	r4, r0
 8006a14:	000d      	movs	r5, r1
 8006a16:	f7f9 fd33 	bl	8000480 <__aeabi_dcmpgt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d000      	beq.n	8006a20 <_dtoa_r+0x470>
 8006a1e:	e2b3      	b.n	8006f88 <_dtoa_r+0x9d8>
 8006a20:	48b3      	ldr	r0, [pc, #716]	; (8006cf0 <_dtoa_r+0x740>)
 8006a22:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006a24:	4684      	mov	ip, r0
 8006a26:	4461      	add	r1, ip
 8006a28:	000b      	movs	r3, r1
 8006a2a:	0020      	movs	r0, r4
 8006a2c:	0029      	movs	r1, r5
 8006a2e:	9a08      	ldr	r2, [sp, #32]
 8006a30:	f7f9 fd12 	bl	8000458 <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d000      	beq.n	8006a3a <_dtoa_r+0x48a>
 8006a38:	e2a3      	b.n	8006f82 <_dtoa_r+0x9d2>
 8006a3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8006a3e:	9308      	str	r3, [sp, #32]
 8006a40:	9409      	str	r4, [sp, #36]	; 0x24
 8006a42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da00      	bge.n	8006a4a <_dtoa_r+0x49a>
 8006a48:	e179      	b.n	8006d3e <_dtoa_r+0x78e>
 8006a4a:	9a03      	ldr	r2, [sp, #12]
 8006a4c:	2a0e      	cmp	r2, #14
 8006a4e:	dd00      	ble.n	8006a52 <_dtoa_r+0x4a2>
 8006a50:	e175      	b.n	8006d3e <_dtoa_r+0x78e>
 8006a52:	4ba0      	ldr	r3, [pc, #640]	; (8006cd4 <_dtoa_r+0x724>)
 8006a54:	00d2      	lsls	r2, r2, #3
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	681e      	ldr	r6, [r3, #0]
 8006a5a:	685f      	ldr	r7, [r3, #4]
 8006a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	db00      	blt.n	8006a64 <_dtoa_r+0x4b4>
 8006a62:	e0e5      	b.n	8006c30 <_dtoa_r+0x680>
 8006a64:	9b07      	ldr	r3, [sp, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dd00      	ble.n	8006a6c <_dtoa_r+0x4bc>
 8006a6a:	e0e1      	b.n	8006c30 <_dtoa_r+0x680>
 8006a6c:	d000      	beq.n	8006a70 <_dtoa_r+0x4c0>
 8006a6e:	e288      	b.n	8006f82 <_dtoa_r+0x9d2>
 8006a70:	2200      	movs	r2, #0
 8006a72:	0030      	movs	r0, r6
 8006a74:	0039      	movs	r1, r7
 8006a76:	4b9d      	ldr	r3, [pc, #628]	; (8006cec <_dtoa_r+0x73c>)
 8006a78:	f7fa fdfa 	bl	8001670 <__aeabi_dmul>
 8006a7c:	9a08      	ldr	r2, [sp, #32]
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	f7f9 fd08 	bl	8000494 <__aeabi_dcmpge>
 8006a84:	9e07      	ldr	r6, [sp, #28]
 8006a86:	0037      	movs	r7, r6
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d000      	beq.n	8006a8e <_dtoa_r+0x4de>
 8006a8c:	e25f      	b.n	8006f4e <_dtoa_r+0x99e>
 8006a8e:	9b06      	ldr	r3, [sp, #24]
 8006a90:	9a06      	ldr	r2, [sp, #24]
 8006a92:	3301      	adds	r3, #1
 8006a94:	9308      	str	r3, [sp, #32]
 8006a96:	2331      	movs	r3, #49	; 0x31
 8006a98:	7013      	strb	r3, [r2, #0]
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	e25a      	b.n	8006f58 <_dtoa_r+0x9a8>
 8006aa2:	423d      	tst	r5, r7
 8006aa4:	d005      	beq.n	8006ab2 <_dtoa_r+0x502>
 8006aa6:	6832      	ldr	r2, [r6, #0]
 8006aa8:	6873      	ldr	r3, [r6, #4]
 8006aaa:	f7fa fde1 	bl	8001670 <__aeabi_dmul>
 8006aae:	003b      	movs	r3, r7
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	106d      	asrs	r5, r5, #1
 8006ab4:	3608      	adds	r6, #8
 8006ab6:	e75f      	b.n	8006978 <_dtoa_r+0x3c8>
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	930e      	str	r3, [sp, #56]	; 0x38
 8006abc:	9b07      	ldr	r3, [sp, #28]
 8006abe:	e783      	b.n	80069c8 <_dtoa_r+0x418>
 8006ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ac2:	4b84      	ldr	r3, [pc, #528]	; (8006cd4 <_dtoa_r+0x724>)
 8006ac4:	3a01      	subs	r2, #1
 8006ac6:	00d2      	lsls	r2, r2, #3
 8006ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	9c08      	ldr	r4, [sp, #32]
 8006ace:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	d051      	beq.n	8006b7c <_dtoa_r+0x5cc>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	4986      	ldr	r1, [pc, #536]	; (8006cf4 <_dtoa_r+0x744>)
 8006adc:	f7fa f9ce 	bl	8000e7c <__aeabi_ddiv>
 8006ae0:	0022      	movs	r2, r4
 8006ae2:	002b      	movs	r3, r5
 8006ae4:	f7fb f886 	bl	8001bf4 <__aeabi_dsub>
 8006ae8:	9a06      	ldr	r2, [sp, #24]
 8006aea:	0004      	movs	r4, r0
 8006aec:	4694      	mov	ip, r2
 8006aee:	000d      	movs	r5, r1
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	9314      	str	r3, [sp, #80]	; 0x50
 8006af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006af6:	4463      	add	r3, ip
 8006af8:	9318      	str	r3, [sp, #96]	; 0x60
 8006afa:	0039      	movs	r1, r7
 8006afc:	0030      	movs	r0, r6
 8006afe:	f7fb fc19 	bl	8002334 <__aeabi_d2iz>
 8006b02:	9012      	str	r0, [sp, #72]	; 0x48
 8006b04:	f7fb fc4c 	bl	80023a0 <__aeabi_i2d>
 8006b08:	0002      	movs	r2, r0
 8006b0a:	000b      	movs	r3, r1
 8006b0c:	0030      	movs	r0, r6
 8006b0e:	0039      	movs	r1, r7
 8006b10:	f7fb f870 	bl	8001bf4 <__aeabi_dsub>
 8006b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9308      	str	r3, [sp, #32]
 8006b1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b1e:	0006      	movs	r6, r0
 8006b20:	3330      	adds	r3, #48	; 0x30
 8006b22:	7013      	strb	r3, [r2, #0]
 8006b24:	0022      	movs	r2, r4
 8006b26:	002b      	movs	r3, r5
 8006b28:	000f      	movs	r7, r1
 8006b2a:	f7f9 fc95 	bl	8000458 <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d174      	bne.n	8006c1c <_dtoa_r+0x66c>
 8006b32:	0032      	movs	r2, r6
 8006b34:	003b      	movs	r3, r7
 8006b36:	2000      	movs	r0, #0
 8006b38:	4968      	ldr	r1, [pc, #416]	; (8006cdc <_dtoa_r+0x72c>)
 8006b3a:	f7fb f85b 	bl	8001bf4 <__aeabi_dsub>
 8006b3e:	0022      	movs	r2, r4
 8006b40:	002b      	movs	r3, r5
 8006b42:	f7f9 fc89 	bl	8000458 <__aeabi_dcmplt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d000      	beq.n	8006b4c <_dtoa_r+0x59c>
 8006b4a:	e0d7      	b.n	8006cfc <_dtoa_r+0x74c>
 8006b4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006b4e:	9a08      	ldr	r2, [sp, #32]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <_dtoa_r+0x5a6>
 8006b54:	e771      	b.n	8006a3a <_dtoa_r+0x48a>
 8006b56:	2200      	movs	r2, #0
 8006b58:	0020      	movs	r0, r4
 8006b5a:	0029      	movs	r1, r5
 8006b5c:	4b60      	ldr	r3, [pc, #384]	; (8006ce0 <_dtoa_r+0x730>)
 8006b5e:	f7fa fd87 	bl	8001670 <__aeabi_dmul>
 8006b62:	4b5f      	ldr	r3, [pc, #380]	; (8006ce0 <_dtoa_r+0x730>)
 8006b64:	0004      	movs	r4, r0
 8006b66:	000d      	movs	r5, r1
 8006b68:	0030      	movs	r0, r6
 8006b6a:	0039      	movs	r1, r7
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f7fa fd7f 	bl	8001670 <__aeabi_dmul>
 8006b72:	9b08      	ldr	r3, [sp, #32]
 8006b74:	0006      	movs	r6, r0
 8006b76:	000f      	movs	r7, r1
 8006b78:	9314      	str	r3, [sp, #80]	; 0x50
 8006b7a:	e7be      	b.n	8006afa <_dtoa_r+0x54a>
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	0029      	movs	r1, r5
 8006b80:	f7fa fd76 	bl	8001670 <__aeabi_dmul>
 8006b84:	9a06      	ldr	r2, [sp, #24]
 8006b86:	9b06      	ldr	r3, [sp, #24]
 8006b88:	4694      	mov	ip, r2
 8006b8a:	9308      	str	r3, [sp, #32]
 8006b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b8e:	9014      	str	r0, [sp, #80]	; 0x50
 8006b90:	9115      	str	r1, [sp, #84]	; 0x54
 8006b92:	4463      	add	r3, ip
 8006b94:	9319      	str	r3, [sp, #100]	; 0x64
 8006b96:	0030      	movs	r0, r6
 8006b98:	0039      	movs	r1, r7
 8006b9a:	f7fb fbcb 	bl	8002334 <__aeabi_d2iz>
 8006b9e:	9018      	str	r0, [sp, #96]	; 0x60
 8006ba0:	f7fb fbfe 	bl	80023a0 <__aeabi_i2d>
 8006ba4:	0002      	movs	r2, r0
 8006ba6:	000b      	movs	r3, r1
 8006ba8:	0030      	movs	r0, r6
 8006baa:	0039      	movs	r1, r7
 8006bac:	f7fb f822 	bl	8001bf4 <__aeabi_dsub>
 8006bb0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	3630      	adds	r6, #48	; 0x30
 8006bb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bb8:	701e      	strb	r6, [r3, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	0004      	movs	r4, r0
 8006bbe:	000d      	movs	r5, r1
 8006bc0:	9308      	str	r3, [sp, #32]
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d12d      	bne.n	8006c22 <_dtoa_r+0x672>
 8006bc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006bc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006bca:	9a06      	ldr	r2, [sp, #24]
 8006bcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bce:	4694      	mov	ip, r2
 8006bd0:	4463      	add	r3, ip
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	9308      	str	r3, [sp, #32]
 8006bd6:	4b47      	ldr	r3, [pc, #284]	; (8006cf4 <_dtoa_r+0x744>)
 8006bd8:	f7f9 fdf0 	bl	80007bc <__aeabi_dadd>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	000b      	movs	r3, r1
 8006be0:	0020      	movs	r0, r4
 8006be2:	0029      	movs	r1, r5
 8006be4:	f7f9 fc4c 	bl	8000480 <__aeabi_dcmpgt>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d000      	beq.n	8006bee <_dtoa_r+0x63e>
 8006bec:	e086      	b.n	8006cfc <_dtoa_r+0x74c>
 8006bee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	493f      	ldr	r1, [pc, #252]	; (8006cf4 <_dtoa_r+0x744>)
 8006bf6:	f7fa fffd 	bl	8001bf4 <__aeabi_dsub>
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	000b      	movs	r3, r1
 8006bfe:	0020      	movs	r0, r4
 8006c00:	0029      	movs	r1, r5
 8006c02:	f7f9 fc29 	bl	8000458 <__aeabi_dcmplt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d100      	bne.n	8006c0c <_dtoa_r+0x65c>
 8006c0a:	e716      	b.n	8006a3a <_dtoa_r+0x48a>
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	001a      	movs	r2, r3
 8006c10:	3a01      	subs	r2, #1
 8006c12:	9208      	str	r2, [sp, #32]
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	2a30      	cmp	r2, #48	; 0x30
 8006c18:	d0f8      	beq.n	8006c0c <_dtoa_r+0x65c>
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	e046      	b.n	8006cb0 <_dtoa_r+0x700>
 8006c22:	2200      	movs	r2, #0
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <_dtoa_r+0x730>)
 8006c26:	f7fa fd23 	bl	8001670 <__aeabi_dmul>
 8006c2a:	0006      	movs	r6, r0
 8006c2c:	000f      	movs	r7, r1
 8006c2e:	e7b2      	b.n	8006b96 <_dtoa_r+0x5e6>
 8006c30:	9b06      	ldr	r3, [sp, #24]
 8006c32:	9a06      	ldr	r2, [sp, #24]
 8006c34:	930a      	str	r3, [sp, #40]	; 0x28
 8006c36:	9b07      	ldr	r3, [sp, #28]
 8006c38:	9c08      	ldr	r4, [sp, #32]
 8006c3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c42:	0032      	movs	r2, r6
 8006c44:	003b      	movs	r3, r7
 8006c46:	0020      	movs	r0, r4
 8006c48:	0029      	movs	r1, r5
 8006c4a:	f7fa f917 	bl	8000e7c <__aeabi_ddiv>
 8006c4e:	f7fb fb71 	bl	8002334 <__aeabi_d2iz>
 8006c52:	9007      	str	r0, [sp, #28]
 8006c54:	f7fb fba4 	bl	80023a0 <__aeabi_i2d>
 8006c58:	0032      	movs	r2, r6
 8006c5a:	003b      	movs	r3, r7
 8006c5c:	f7fa fd08 	bl	8001670 <__aeabi_dmul>
 8006c60:	0002      	movs	r2, r0
 8006c62:	000b      	movs	r3, r1
 8006c64:	0020      	movs	r0, r4
 8006c66:	0029      	movs	r1, r5
 8006c68:	f7fa ffc4 	bl	8001bf4 <__aeabi_dsub>
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6e:	001a      	movs	r2, r3
 8006c70:	3201      	adds	r2, #1
 8006c72:	920a      	str	r2, [sp, #40]	; 0x28
 8006c74:	9208      	str	r2, [sp, #32]
 8006c76:	9a07      	ldr	r2, [sp, #28]
 8006c78:	3230      	adds	r2, #48	; 0x30
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d14f      	bne.n	8006d22 <_dtoa_r+0x772>
 8006c82:	0002      	movs	r2, r0
 8006c84:	000b      	movs	r3, r1
 8006c86:	f7f9 fd99 	bl	80007bc <__aeabi_dadd>
 8006c8a:	0032      	movs	r2, r6
 8006c8c:	003b      	movs	r3, r7
 8006c8e:	0004      	movs	r4, r0
 8006c90:	000d      	movs	r5, r1
 8006c92:	f7f9 fbf5 	bl	8000480 <__aeabi_dcmpgt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d12e      	bne.n	8006cf8 <_dtoa_r+0x748>
 8006c9a:	0032      	movs	r2, r6
 8006c9c:	003b      	movs	r3, r7
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	0029      	movs	r1, r5
 8006ca2:	f7f9 fbd3 	bl	800044c <__aeabi_dcmpeq>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d002      	beq.n	8006cb0 <_dtoa_r+0x700>
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	07de      	lsls	r6, r3, #31
 8006cae:	d423      	bmi.n	8006cf8 <_dtoa_r+0x748>
 8006cb0:	9905      	ldr	r1, [sp, #20]
 8006cb2:	9804      	ldr	r0, [sp, #16]
 8006cb4:	f000 fbd6 	bl	8007464 <_Bfree>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9a08      	ldr	r2, [sp, #32]
 8006cbc:	7013      	strb	r3, [r2, #0]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d100      	bne.n	8006cce <_dtoa_r+0x71e>
 8006ccc:	e4ba      	b.n	8006644 <_dtoa_r+0x94>
 8006cce:	9a08      	ldr	r2, [sp, #32]
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e4b7      	b.n	8006644 <_dtoa_r+0x94>
 8006cd4:	08009f90 	.word	0x08009f90
 8006cd8:	08009f68 	.word	0x08009f68
 8006cdc:	3ff00000 	.word	0x3ff00000
 8006ce0:	40240000 	.word	0x40240000
 8006ce4:	401c0000 	.word	0x401c0000
 8006ce8:	fcc00000 	.word	0xfcc00000
 8006cec:	40140000 	.word	0x40140000
 8006cf0:	7cc00000 	.word	0x7cc00000
 8006cf4:	3fe00000 	.word	0x3fe00000
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	2a39      	cmp	r2, #57	; 0x39
 8006d06:	d108      	bne.n	8006d1a <_dtoa_r+0x76a>
 8006d08:	9a06      	ldr	r2, [sp, #24]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d1f7      	bne.n	8006cfe <_dtoa_r+0x74e>
 8006d0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d10:	9906      	ldr	r1, [sp, #24]
 8006d12:	3201      	adds	r2, #1
 8006d14:	920e      	str	r2, [sp, #56]	; 0x38
 8006d16:	2230      	movs	r2, #48	; 0x30
 8006d18:	700a      	strb	r2, [r1, #0]
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	3201      	adds	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	e77c      	b.n	8006c1c <_dtoa_r+0x66c>
 8006d22:	2200      	movs	r2, #0
 8006d24:	4ba9      	ldr	r3, [pc, #676]	; (8006fcc <_dtoa_r+0xa1c>)
 8006d26:	f7fa fca3 	bl	8001670 <__aeabi_dmul>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	0004      	movs	r4, r0
 8006d30:	000d      	movs	r5, r1
 8006d32:	f7f9 fb8b 	bl	800044c <__aeabi_dcmpeq>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d100      	bne.n	8006d3c <_dtoa_r+0x78c>
 8006d3a:	e782      	b.n	8006c42 <_dtoa_r+0x692>
 8006d3c:	e7b8      	b.n	8006cb0 <_dtoa_r+0x700>
 8006d3e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006d40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006d42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	d012      	beq.n	8006d6e <_dtoa_r+0x7be>
 8006d48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	dc6e      	bgt.n	8006e2c <_dtoa_r+0x87c>
 8006d4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	d065      	beq.n	8006e20 <_dtoa_r+0x870>
 8006d54:	4a9e      	ldr	r2, [pc, #632]	; (8006fd0 <_dtoa_r+0xa20>)
 8006d56:	189b      	adds	r3, r3, r2
 8006d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	18d2      	adds	r2, r2, r3
 8006d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8006d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d62:	9804      	ldr	r0, [sp, #16]
 8006d64:	18d3      	adds	r3, r2, r3
 8006d66:	930c      	str	r3, [sp, #48]	; 0x30
 8006d68:	f000 fc78 	bl	800765c <__i2b>
 8006d6c:	0007      	movs	r7, r0
 8006d6e:	2c00      	cmp	r4, #0
 8006d70:	d00e      	beq.n	8006d90 <_dtoa_r+0x7e0>
 8006d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd0b      	ble.n	8006d90 <_dtoa_r+0x7e0>
 8006d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d7a:	0023      	movs	r3, r4
 8006d7c:	4294      	cmp	r4, r2
 8006d7e:	dd00      	ble.n	8006d82 <_dtoa_r+0x7d2>
 8006d80:	0013      	movs	r3, r2
 8006d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d84:	1ae4      	subs	r4, r4, r3
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	920a      	str	r2, [sp, #40]	; 0x28
 8006d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01e      	beq.n	8006dd4 <_dtoa_r+0x824>
 8006d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05c      	beq.n	8006e56 <_dtoa_r+0x8a6>
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	dd10      	ble.n	8006dc2 <_dtoa_r+0x812>
 8006da0:	0039      	movs	r1, r7
 8006da2:	002a      	movs	r2, r5
 8006da4:	9804      	ldr	r0, [sp, #16]
 8006da6:	f000 fd21 	bl	80077ec <__pow5mult>
 8006daa:	9a05      	ldr	r2, [sp, #20]
 8006dac:	0001      	movs	r1, r0
 8006dae:	0007      	movs	r7, r0
 8006db0:	9804      	ldr	r0, [sp, #16]
 8006db2:	f000 fc6b 	bl	800768c <__multiply>
 8006db6:	0006      	movs	r6, r0
 8006db8:	9905      	ldr	r1, [sp, #20]
 8006dba:	9804      	ldr	r0, [sp, #16]
 8006dbc:	f000 fb52 	bl	8007464 <_Bfree>
 8006dc0:	9605      	str	r6, [sp, #20]
 8006dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc4:	1b5a      	subs	r2, r3, r5
 8006dc6:	42ab      	cmp	r3, r5
 8006dc8:	d004      	beq.n	8006dd4 <_dtoa_r+0x824>
 8006dca:	9905      	ldr	r1, [sp, #20]
 8006dcc:	9804      	ldr	r0, [sp, #16]
 8006dce:	f000 fd0d 	bl	80077ec <__pow5mult>
 8006dd2:	9005      	str	r0, [sp, #20]
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	9804      	ldr	r0, [sp, #16]
 8006dd8:	f000 fc40 	bl	800765c <__i2b>
 8006ddc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dde:	0006      	movs	r6, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dd3a      	ble.n	8006e5a <_dtoa_r+0x8aa>
 8006de4:	001a      	movs	r2, r3
 8006de6:	0001      	movs	r1, r0
 8006de8:	9804      	ldr	r0, [sp, #16]
 8006dea:	f000 fcff 	bl	80077ec <__pow5mult>
 8006dee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df0:	0006      	movs	r6, r0
 8006df2:	2500      	movs	r5, #0
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	dc38      	bgt.n	8006e6a <_dtoa_r+0x8ba>
 8006df8:	2500      	movs	r5, #0
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	d130      	bne.n	8006e62 <_dtoa_r+0x8b2>
 8006e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e02:	031b      	lsls	r3, r3, #12
 8006e04:	42ab      	cmp	r3, r5
 8006e06:	d12c      	bne.n	8006e62 <_dtoa_r+0x8b2>
 8006e08:	4b72      	ldr	r3, [pc, #456]	; (8006fd4 <_dtoa_r+0xa24>)
 8006e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0c:	4213      	tst	r3, r2
 8006e0e:	d028      	beq.n	8006e62 <_dtoa_r+0x8b2>
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	3501      	adds	r5, #1
 8006e14:	3301      	adds	r3, #1
 8006e16:	930a      	str	r3, [sp, #40]	; 0x28
 8006e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1e:	e020      	b.n	8006e62 <_dtoa_r+0x8b2>
 8006e20:	2336      	movs	r3, #54	; 0x36
 8006e22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	e795      	b.n	8006d58 <_dtoa_r+0x7a8>
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	1e5d      	subs	r5, r3, #1
 8006e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	db07      	blt.n	8006e46 <_dtoa_r+0x896>
 8006e36:	1b5d      	subs	r5, r3, r5
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da8b      	bge.n	8006d58 <_dtoa_r+0x7a8>
 8006e40:	1ae4      	subs	r4, r4, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	e788      	b.n	8006d58 <_dtoa_r+0x7a8>
 8006e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e4a:	1aeb      	subs	r3, r5, r3
 8006e4c:	18d3      	adds	r3, r2, r3
 8006e4e:	950d      	str	r5, [sp, #52]	; 0x34
 8006e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e52:	2500      	movs	r5, #0
 8006e54:	e7f0      	b.n	8006e38 <_dtoa_r+0x888>
 8006e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e58:	e7b7      	b.n	8006dca <_dtoa_r+0x81a>
 8006e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	ddca      	ble.n	8006df8 <_dtoa_r+0x848>
 8006e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e64:	2001      	movs	r0, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d008      	beq.n	8006e7c <_dtoa_r+0x8cc>
 8006e6a:	6933      	ldr	r3, [r6, #16]
 8006e6c:	3303      	adds	r3, #3
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	18f3      	adds	r3, r6, r3
 8006e72:	6858      	ldr	r0, [r3, #4]
 8006e74:	f000 fbaa 	bl	80075cc <__hi0bits>
 8006e78:	2320      	movs	r3, #32
 8006e7a:	1a18      	subs	r0, r3, r0
 8006e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e7e:	1818      	adds	r0, r3, r0
 8006e80:	0002      	movs	r2, r0
 8006e82:	231f      	movs	r3, #31
 8006e84:	401a      	ands	r2, r3
 8006e86:	4218      	tst	r0, r3
 8006e88:	d047      	beq.n	8006f1a <_dtoa_r+0x96a>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	dd3f      	ble.n	8006f12 <_dtoa_r+0x962>
 8006e92:	231c      	movs	r3, #28
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e98:	18e4      	adds	r4, r4, r3
 8006e9a:	18d2      	adds	r2, r2, r3
 8006e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	18d3      	adds	r3, r2, r3
 8006ea2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd05      	ble.n	8006eb6 <_dtoa_r+0x906>
 8006eaa:	001a      	movs	r2, r3
 8006eac:	9905      	ldr	r1, [sp, #20]
 8006eae:	9804      	ldr	r0, [sp, #16]
 8006eb0:	f000 fcf8 	bl	80078a4 <__lshift>
 8006eb4:	9005      	str	r0, [sp, #20]
 8006eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dd05      	ble.n	8006ec8 <_dtoa_r+0x918>
 8006ebc:	0031      	movs	r1, r6
 8006ebe:	001a      	movs	r2, r3
 8006ec0:	9804      	ldr	r0, [sp, #16]
 8006ec2:	f000 fcef 	bl	80078a4 <__lshift>
 8006ec6:	0006      	movs	r6, r0
 8006ec8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d027      	beq.n	8006f1e <_dtoa_r+0x96e>
 8006ece:	0031      	movs	r1, r6
 8006ed0:	9805      	ldr	r0, [sp, #20]
 8006ed2:	f000 fd55 	bl	8007980 <__mcmp>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	da21      	bge.n	8006f1e <_dtoa_r+0x96e>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	220a      	movs	r2, #10
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	9905      	ldr	r1, [sp, #20]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9804      	ldr	r0, [sp, #16]
 8006ee8:	f000 fae0 	bl	80074ac <__multadd>
 8006eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eee:	9005      	str	r0, [sp, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d100      	bne.n	8006ef6 <_dtoa_r+0x946>
 8006ef4:	e15d      	b.n	80071b2 <_dtoa_r+0xc02>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	0039      	movs	r1, r7
 8006efa:	220a      	movs	r2, #10
 8006efc:	9804      	ldr	r0, [sp, #16]
 8006efe:	f000 fad5 	bl	80074ac <__multadd>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	0007      	movs	r7, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc49      	bgt.n	8006f9e <_dtoa_r+0x9ee>
 8006f0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	dc0e      	bgt.n	8006f2e <_dtoa_r+0x97e>
 8006f10:	e045      	b.n	8006f9e <_dtoa_r+0x9ee>
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d0c6      	beq.n	8006ea4 <_dtoa_r+0x8f4>
 8006f16:	331c      	adds	r3, #28
 8006f18:	e7bd      	b.n	8006e96 <_dtoa_r+0x8e6>
 8006f1a:	0013      	movs	r3, r2
 8006f1c:	e7fb      	b.n	8006f16 <_dtoa_r+0x966>
 8006f1e:	9b07      	ldr	r3, [sp, #28]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	dc36      	bgt.n	8006f92 <_dtoa_r+0x9e2>
 8006f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	dd33      	ble.n	8006f92 <_dtoa_r+0x9e2>
 8006f2a:	9b07      	ldr	r3, [sp, #28]
 8006f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10c      	bne.n	8006f4e <_dtoa_r+0x99e>
 8006f34:	0031      	movs	r1, r6
 8006f36:	2205      	movs	r2, #5
 8006f38:	9804      	ldr	r0, [sp, #16]
 8006f3a:	f000 fab7 	bl	80074ac <__multadd>
 8006f3e:	0006      	movs	r6, r0
 8006f40:	0001      	movs	r1, r0
 8006f42:	9805      	ldr	r0, [sp, #20]
 8006f44:	f000 fd1c 	bl	8007980 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dd00      	ble.n	8006f4e <_dtoa_r+0x99e>
 8006f4c:	e59f      	b.n	8006a8e <_dtoa_r+0x4de>
 8006f4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f50:	43db      	mvns	r3, r3
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	9b06      	ldr	r3, [sp, #24]
 8006f56:	9308      	str	r3, [sp, #32]
 8006f58:	2500      	movs	r5, #0
 8006f5a:	0031      	movs	r1, r6
 8006f5c:	9804      	ldr	r0, [sp, #16]
 8006f5e:	f000 fa81 	bl	8007464 <_Bfree>
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	d100      	bne.n	8006f68 <_dtoa_r+0x9b8>
 8006f66:	e6a3      	b.n	8006cb0 <_dtoa_r+0x700>
 8006f68:	2d00      	cmp	r5, #0
 8006f6a:	d005      	beq.n	8006f78 <_dtoa_r+0x9c8>
 8006f6c:	42bd      	cmp	r5, r7
 8006f6e:	d003      	beq.n	8006f78 <_dtoa_r+0x9c8>
 8006f70:	0029      	movs	r1, r5
 8006f72:	9804      	ldr	r0, [sp, #16]
 8006f74:	f000 fa76 	bl	8007464 <_Bfree>
 8006f78:	0039      	movs	r1, r7
 8006f7a:	9804      	ldr	r0, [sp, #16]
 8006f7c:	f000 fa72 	bl	8007464 <_Bfree>
 8006f80:	e696      	b.n	8006cb0 <_dtoa_r+0x700>
 8006f82:	2600      	movs	r6, #0
 8006f84:	0037      	movs	r7, r6
 8006f86:	e7e2      	b.n	8006f4e <_dtoa_r+0x99e>
 8006f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	0037      	movs	r7, r6
 8006f90:	e57d      	b.n	8006a8e <_dtoa_r+0x4de>
 8006f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d100      	bne.n	8006f9a <_dtoa_r+0x9ea>
 8006f98:	e0c3      	b.n	8007122 <_dtoa_r+0xb72>
 8006f9a:	9b07      	ldr	r3, [sp, #28]
 8006f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	dd05      	ble.n	8006fae <_dtoa_r+0x9fe>
 8006fa2:	0039      	movs	r1, r7
 8006fa4:	0022      	movs	r2, r4
 8006fa6:	9804      	ldr	r0, [sp, #16]
 8006fa8:	f000 fc7c 	bl	80078a4 <__lshift>
 8006fac:	0007      	movs	r7, r0
 8006fae:	0038      	movs	r0, r7
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	d024      	beq.n	8006ffe <_dtoa_r+0xa4e>
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	9804      	ldr	r0, [sp, #16]
 8006fb8:	f000 fa10 	bl	80073dc <_Balloc>
 8006fbc:	1e04      	subs	r4, r0, #0
 8006fbe:	d111      	bne.n	8006fe4 <_dtoa_r+0xa34>
 8006fc0:	0022      	movs	r2, r4
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <_dtoa_r+0xa28>)
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <_dtoa_r+0xa2c>)
 8006fc6:	4906      	ldr	r1, [pc, #24]	; (8006fe0 <_dtoa_r+0xa30>)
 8006fc8:	f7ff fb07 	bl	80065da <_dtoa_r+0x2a>
 8006fcc:	40240000 	.word	0x40240000
 8006fd0:	00000433 	.word	0x00000433
 8006fd4:	7ff00000 	.word	0x7ff00000
 8006fd8:	08009ef9 	.word	0x08009ef9
 8006fdc:	08009ea1 	.word	0x08009ea1
 8006fe0:	000002ef 	.word	0x000002ef
 8006fe4:	0039      	movs	r1, r7
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	310c      	adds	r1, #12
 8006fea:	3202      	adds	r2, #2
 8006fec:	0092      	lsls	r2, r2, #2
 8006fee:	300c      	adds	r0, #12
 8006ff0:	f001 ffb2 	bl	8008f58 <memcpy>
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	0021      	movs	r1, r4
 8006ff8:	9804      	ldr	r0, [sp, #16]
 8006ffa:	f000 fc53 	bl	80078a4 <__lshift>
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007002:	9307      	str	r3, [sp, #28]
 8007004:	3b01      	subs	r3, #1
 8007006:	189b      	adds	r3, r3, r2
 8007008:	2201      	movs	r2, #1
 800700a:	003d      	movs	r5, r7
 800700c:	0007      	movs	r7, r0
 800700e:	930e      	str	r3, [sp, #56]	; 0x38
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	4013      	ands	r3, r2
 8007014:	930d      	str	r3, [sp, #52]	; 0x34
 8007016:	0031      	movs	r1, r6
 8007018:	9805      	ldr	r0, [sp, #20]
 800701a:	f7ff fa39 	bl	8006490 <quorem>
 800701e:	0029      	movs	r1, r5
 8007020:	0004      	movs	r4, r0
 8007022:	900b      	str	r0, [sp, #44]	; 0x2c
 8007024:	9805      	ldr	r0, [sp, #20]
 8007026:	f000 fcab 	bl	8007980 <__mcmp>
 800702a:	003a      	movs	r2, r7
 800702c:	900c      	str	r0, [sp, #48]	; 0x30
 800702e:	0031      	movs	r1, r6
 8007030:	9804      	ldr	r0, [sp, #16]
 8007032:	f000 fcc1 	bl	80079b8 <__mdiff>
 8007036:	2201      	movs	r2, #1
 8007038:	68c3      	ldr	r3, [r0, #12]
 800703a:	3430      	adds	r4, #48	; 0x30
 800703c:	9008      	str	r0, [sp, #32]
 800703e:	920a      	str	r2, [sp, #40]	; 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <_dtoa_r+0xa9e>
 8007044:	0001      	movs	r1, r0
 8007046:	9805      	ldr	r0, [sp, #20]
 8007048:	f000 fc9a 	bl	8007980 <__mcmp>
 800704c:	900a      	str	r0, [sp, #40]	; 0x28
 800704e:	9908      	ldr	r1, [sp, #32]
 8007050:	9804      	ldr	r0, [sp, #16]
 8007052:	f000 fa07 	bl	8007464 <_Bfree>
 8007056:	9b07      	ldr	r3, [sp, #28]
 8007058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705a:	3301      	adds	r3, #1
 800705c:	9308      	str	r3, [sp, #32]
 800705e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007060:	4313      	orrs	r3, r2
 8007062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007064:	4313      	orrs	r3, r2
 8007066:	d109      	bne.n	800707c <_dtoa_r+0xacc>
 8007068:	2c39      	cmp	r4, #57	; 0x39
 800706a:	d022      	beq.n	80070b2 <_dtoa_r+0xb02>
 800706c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd01      	ble.n	8007076 <_dtoa_r+0xac6>
 8007072:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007074:	3431      	adds	r4, #49	; 0x31
 8007076:	9b07      	ldr	r3, [sp, #28]
 8007078:	701c      	strb	r4, [r3, #0]
 800707a:	e76e      	b.n	8006f5a <_dtoa_r+0x9aa>
 800707c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800707e:	2b00      	cmp	r3, #0
 8007080:	db04      	blt.n	800708c <_dtoa_r+0xadc>
 8007082:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007084:	4313      	orrs	r3, r2
 8007086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007088:	4313      	orrs	r3, r2
 800708a:	d11e      	bne.n	80070ca <_dtoa_r+0xb1a>
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	2b00      	cmp	r3, #0
 8007090:	ddf1      	ble.n	8007076 <_dtoa_r+0xac6>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	2201      	movs	r2, #1
 8007096:	9804      	ldr	r0, [sp, #16]
 8007098:	f000 fc04 	bl	80078a4 <__lshift>
 800709c:	0031      	movs	r1, r6
 800709e:	9005      	str	r0, [sp, #20]
 80070a0:	f000 fc6e 	bl	8007980 <__mcmp>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dc02      	bgt.n	80070ae <_dtoa_r+0xafe>
 80070a8:	d1e5      	bne.n	8007076 <_dtoa_r+0xac6>
 80070aa:	07e3      	lsls	r3, r4, #31
 80070ac:	d5e3      	bpl.n	8007076 <_dtoa_r+0xac6>
 80070ae:	2c39      	cmp	r4, #57	; 0x39
 80070b0:	d1df      	bne.n	8007072 <_dtoa_r+0xac2>
 80070b2:	2339      	movs	r3, #57	; 0x39
 80070b4:	9a07      	ldr	r2, [sp, #28]
 80070b6:	7013      	strb	r3, [r2, #0]
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	9308      	str	r3, [sp, #32]
 80070bc:	3b01      	subs	r3, #1
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	2a39      	cmp	r2, #57	; 0x39
 80070c2:	d063      	beq.n	800718c <_dtoa_r+0xbdc>
 80070c4:	3201      	adds	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e747      	b.n	8006f5a <_dtoa_r+0x9aa>
 80070ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd03      	ble.n	80070d8 <_dtoa_r+0xb28>
 80070d0:	2c39      	cmp	r4, #57	; 0x39
 80070d2:	d0ee      	beq.n	80070b2 <_dtoa_r+0xb02>
 80070d4:	3401      	adds	r4, #1
 80070d6:	e7ce      	b.n	8007076 <_dtoa_r+0xac6>
 80070d8:	9b07      	ldr	r3, [sp, #28]
 80070da:	9a07      	ldr	r2, [sp, #28]
 80070dc:	701c      	strb	r4, [r3, #0]
 80070de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d03e      	beq.n	8007162 <_dtoa_r+0xbb2>
 80070e4:	2300      	movs	r3, #0
 80070e6:	220a      	movs	r2, #10
 80070e8:	9905      	ldr	r1, [sp, #20]
 80070ea:	9804      	ldr	r0, [sp, #16]
 80070ec:	f000 f9de 	bl	80074ac <__multadd>
 80070f0:	2300      	movs	r3, #0
 80070f2:	9005      	str	r0, [sp, #20]
 80070f4:	220a      	movs	r2, #10
 80070f6:	0029      	movs	r1, r5
 80070f8:	9804      	ldr	r0, [sp, #16]
 80070fa:	42bd      	cmp	r5, r7
 80070fc:	d106      	bne.n	800710c <_dtoa_r+0xb5c>
 80070fe:	f000 f9d5 	bl	80074ac <__multadd>
 8007102:	0005      	movs	r5, r0
 8007104:	0007      	movs	r7, r0
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	e784      	b.n	8007016 <_dtoa_r+0xa66>
 800710c:	f000 f9ce 	bl	80074ac <__multadd>
 8007110:	0039      	movs	r1, r7
 8007112:	0005      	movs	r5, r0
 8007114:	2300      	movs	r3, #0
 8007116:	220a      	movs	r2, #10
 8007118:	9804      	ldr	r0, [sp, #16]
 800711a:	f000 f9c7 	bl	80074ac <__multadd>
 800711e:	0007      	movs	r7, r0
 8007120:	e7f1      	b.n	8007106 <_dtoa_r+0xb56>
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	930b      	str	r3, [sp, #44]	; 0x2c
 8007126:	2500      	movs	r5, #0
 8007128:	0031      	movs	r1, r6
 800712a:	9805      	ldr	r0, [sp, #20]
 800712c:	f7ff f9b0 	bl	8006490 <quorem>
 8007130:	9b06      	ldr	r3, [sp, #24]
 8007132:	3030      	adds	r0, #48	; 0x30
 8007134:	5558      	strb	r0, [r3, r5]
 8007136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007138:	3501      	adds	r5, #1
 800713a:	0004      	movs	r4, r0
 800713c:	42ab      	cmp	r3, r5
 800713e:	dd07      	ble.n	8007150 <_dtoa_r+0xba0>
 8007140:	2300      	movs	r3, #0
 8007142:	220a      	movs	r2, #10
 8007144:	9905      	ldr	r1, [sp, #20]
 8007146:	9804      	ldr	r0, [sp, #16]
 8007148:	f000 f9b0 	bl	80074ac <__multadd>
 800714c:	9005      	str	r0, [sp, #20]
 800714e:	e7eb      	b.n	8007128 <_dtoa_r+0xb78>
 8007150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007152:	2301      	movs	r3, #1
 8007154:	2a00      	cmp	r2, #0
 8007156:	dd00      	ble.n	800715a <_dtoa_r+0xbaa>
 8007158:	0013      	movs	r3, r2
 800715a:	2500      	movs	r5, #0
 800715c:	9a06      	ldr	r2, [sp, #24]
 800715e:	18d3      	adds	r3, r2, r3
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	9905      	ldr	r1, [sp, #20]
 8007164:	2201      	movs	r2, #1
 8007166:	9804      	ldr	r0, [sp, #16]
 8007168:	f000 fb9c 	bl	80078a4 <__lshift>
 800716c:	0031      	movs	r1, r6
 800716e:	9005      	str	r0, [sp, #20]
 8007170:	f000 fc06 	bl	8007980 <__mcmp>
 8007174:	2800      	cmp	r0, #0
 8007176:	dc9f      	bgt.n	80070b8 <_dtoa_r+0xb08>
 8007178:	d101      	bne.n	800717e <_dtoa_r+0xbce>
 800717a:	07e4      	lsls	r4, r4, #31
 800717c:	d49c      	bmi.n	80070b8 <_dtoa_r+0xb08>
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	9308      	str	r3, [sp, #32]
 8007182:	3b01      	subs	r3, #1
 8007184:	781a      	ldrb	r2, [r3, #0]
 8007186:	2a30      	cmp	r2, #48	; 0x30
 8007188:	d0fa      	beq.n	8007180 <_dtoa_r+0xbd0>
 800718a:	e6e6      	b.n	8006f5a <_dtoa_r+0x9aa>
 800718c:	9a06      	ldr	r2, [sp, #24]
 800718e:	429a      	cmp	r2, r3
 8007190:	d193      	bne.n	80070ba <_dtoa_r+0xb0a>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	2331      	movs	r3, #49	; 0x31
 800719a:	7013      	strb	r3, [r2, #0]
 800719c:	e6dd      	b.n	8006f5a <_dtoa_r+0x9aa>
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <_dtoa_r+0xc14>)
 80071a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <_dtoa_r+0xc18>)
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d001      	beq.n	80071ae <_dtoa_r+0xbfe>
 80071aa:	f7ff fa49 	bl	8006640 <_dtoa_r+0x90>
 80071ae:	f7ff fa49 	bl	8006644 <_dtoa_r+0x94>
 80071b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dcb6      	bgt.n	8007126 <_dtoa_r+0xb76>
 80071b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	dd00      	ble.n	80071c0 <_dtoa_r+0xc10>
 80071be:	e6b6      	b.n	8006f2e <_dtoa_r+0x97e>
 80071c0:	e7b1      	b.n	8007126 <_dtoa_r+0xb76>
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	08009e7d 	.word	0x08009e7d
 80071c8:	08009e85 	.word	0x08009e85

080071cc <_free_r>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	0005      	movs	r5, r0
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d010      	beq.n	80071f6 <_free_r+0x2a>
 80071d4:	1f0c      	subs	r4, r1, #4
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	da00      	bge.n	80071de <_free_r+0x12>
 80071dc:	18e4      	adds	r4, r4, r3
 80071de:	0028      	movs	r0, r5
 80071e0:	f000 f8ec 	bl	80073bc <__malloc_lock>
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <_free_r+0x90>)
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <_free_r+0x2c>
 80071ec:	6063      	str	r3, [r4, #4]
 80071ee:	6014      	str	r4, [r2, #0]
 80071f0:	0028      	movs	r0, r5
 80071f2:	f000 f8eb 	bl	80073cc <__malloc_unlock>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d908      	bls.n	800720e <_free_r+0x42>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428b      	cmp	r3, r1
 8007202:	d1f3      	bne.n	80071ec <_free_r+0x20>
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	1809      	adds	r1, r1, r0
 800720a:	6021      	str	r1, [r4, #0]
 800720c:	e7ee      	b.n	80071ec <_free_r+0x20>
 800720e:	001a      	movs	r2, r3
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <_free_r+0x4e>
 8007216:	42a3      	cmp	r3, r4
 8007218:	d9f9      	bls.n	800720e <_free_r+0x42>
 800721a:	6811      	ldr	r1, [r2, #0]
 800721c:	1850      	adds	r0, r2, r1
 800721e:	42a0      	cmp	r0, r4
 8007220:	d10b      	bne.n	800723a <_free_r+0x6e>
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1809      	adds	r1, r1, r0
 8007226:	1850      	adds	r0, r2, r1
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	4283      	cmp	r3, r0
 800722c:	d1e0      	bne.n	80071f0 <_free_r+0x24>
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	1841      	adds	r1, r0, r1
 8007234:	6011      	str	r1, [r2, #0]
 8007236:	6053      	str	r3, [r2, #4]
 8007238:	e7da      	b.n	80071f0 <_free_r+0x24>
 800723a:	42a0      	cmp	r0, r4
 800723c:	d902      	bls.n	8007244 <_free_r+0x78>
 800723e:	230c      	movs	r3, #12
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	e7d5      	b.n	80071f0 <_free_r+0x24>
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	1821      	adds	r1, r4, r0
 8007248:	428b      	cmp	r3, r1
 800724a:	d103      	bne.n	8007254 <_free_r+0x88>
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	1809      	adds	r1, r1, r0
 8007252:	6021      	str	r1, [r4, #0]
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6054      	str	r4, [r2, #4]
 8007258:	e7ca      	b.n	80071f0 <_free_r+0x24>
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	20000458 	.word	0x20000458

08007260 <malloc>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4b03      	ldr	r3, [pc, #12]	; (8007270 <malloc+0x10>)
 8007264:	0001      	movs	r1, r0
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	f000 f826 	bl	80072b8 <_malloc_r>
 800726c:	bd10      	pop	{r4, pc}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	20000064 	.word	0x20000064

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0f      	ldr	r6, [pc, #60]	; (80072b4 <sbrk_aligned+0x40>)
 8007278:	000d      	movs	r5, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	0004      	movs	r4, r0
 800727e:	2900      	cmp	r1, #0
 8007280:	d102      	bne.n	8007288 <sbrk_aligned+0x14>
 8007282:	f001 fe57 	bl	8008f34 <_sbrk_r>
 8007286:	6030      	str	r0, [r6, #0]
 8007288:	0029      	movs	r1, r5
 800728a:	0020      	movs	r0, r4
 800728c:	f001 fe52 	bl	8008f34 <_sbrk_r>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d00a      	beq.n	80072aa <sbrk_aligned+0x36>
 8007294:	2303      	movs	r3, #3
 8007296:	1cc5      	adds	r5, r0, #3
 8007298:	439d      	bics	r5, r3
 800729a:	42a8      	cmp	r0, r5
 800729c:	d007      	beq.n	80072ae <sbrk_aligned+0x3a>
 800729e:	1a29      	subs	r1, r5, r0
 80072a0:	0020      	movs	r0, r4
 80072a2:	f001 fe47 	bl	8008f34 <_sbrk_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d101      	bne.n	80072ae <sbrk_aligned+0x3a>
 80072aa:	2501      	movs	r5, #1
 80072ac:	426d      	negs	r5, r5
 80072ae:	0028      	movs	r0, r5
 80072b0:	bd70      	pop	{r4, r5, r6, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	2000045c 	.word	0x2000045c

080072b8 <_malloc_r>:
 80072b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ba:	2203      	movs	r2, #3
 80072bc:	1ccb      	adds	r3, r1, #3
 80072be:	4393      	bics	r3, r2
 80072c0:	3308      	adds	r3, #8
 80072c2:	0006      	movs	r6, r0
 80072c4:	001f      	movs	r7, r3
 80072c6:	2b0c      	cmp	r3, #12
 80072c8:	d238      	bcs.n	800733c <_malloc_r+0x84>
 80072ca:	270c      	movs	r7, #12
 80072cc:	42b9      	cmp	r1, r7
 80072ce:	d837      	bhi.n	8007340 <_malloc_r+0x88>
 80072d0:	0030      	movs	r0, r6
 80072d2:	f000 f873 	bl	80073bc <__malloc_lock>
 80072d6:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <_malloc_r+0x100>)
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	001c      	movs	r4, r3
 80072de:	2c00      	cmp	r4, #0
 80072e0:	d133      	bne.n	800734a <_malloc_r+0x92>
 80072e2:	0039      	movs	r1, r7
 80072e4:	0030      	movs	r0, r6
 80072e6:	f7ff ffc5 	bl	8007274 <sbrk_aligned>
 80072ea:	0004      	movs	r4, r0
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d15e      	bne.n	80073ae <_malloc_r+0xf6>
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	681c      	ldr	r4, [r3, #0]
 80072f4:	0025      	movs	r5, r4
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	d14e      	bne.n	8007398 <_malloc_r+0xe0>
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	d051      	beq.n	80073a2 <_malloc_r+0xea>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0029      	movs	r1, r5
 8007302:	18e3      	adds	r3, r4, r3
 8007304:	0030      	movs	r0, r6
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f001 fe14 	bl	8008f34 <_sbrk_r>
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	4283      	cmp	r3, r0
 8007310:	d147      	bne.n	80073a2 <_malloc_r+0xea>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	0030      	movs	r0, r6
 8007316:	1aff      	subs	r7, r7, r3
 8007318:	0039      	movs	r1, r7
 800731a:	f7ff ffab 	bl	8007274 <sbrk_aligned>
 800731e:	3001      	adds	r0, #1
 8007320:	d03f      	beq.n	80073a2 <_malloc_r+0xea>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	19db      	adds	r3, r3, r7
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	9b00      	ldr	r3, [sp, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d040      	beq.n	80073b2 <_malloc_r+0xfa>
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	42a2      	cmp	r2, r4
 8007334:	d133      	bne.n	800739e <_malloc_r+0xe6>
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e014      	b.n	8007366 <_malloc_r+0xae>
 800733c:	2b00      	cmp	r3, #0
 800733e:	dac5      	bge.n	80072cc <_malloc_r+0x14>
 8007340:	230c      	movs	r3, #12
 8007342:	2500      	movs	r5, #0
 8007344:	6033      	str	r3, [r6, #0]
 8007346:	0028      	movs	r0, r5
 8007348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	1bc9      	subs	r1, r1, r7
 800734e:	d420      	bmi.n	8007392 <_malloc_r+0xda>
 8007350:	290b      	cmp	r1, #11
 8007352:	d918      	bls.n	8007386 <_malloc_r+0xce>
 8007354:	19e2      	adds	r2, r4, r7
 8007356:	6027      	str	r7, [r4, #0]
 8007358:	42a3      	cmp	r3, r4
 800735a:	d112      	bne.n	8007382 <_malloc_r+0xca>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	6011      	str	r1, [r2, #0]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	0030      	movs	r0, r6
 8007368:	0025      	movs	r5, r4
 800736a:	f000 f82f 	bl	80073cc <__malloc_unlock>
 800736e:	2207      	movs	r2, #7
 8007370:	350b      	adds	r5, #11
 8007372:	1d23      	adds	r3, r4, #4
 8007374:	4395      	bics	r5, r2
 8007376:	1aea      	subs	r2, r5, r3
 8007378:	429d      	cmp	r5, r3
 800737a:	d0e4      	beq.n	8007346 <_malloc_r+0x8e>
 800737c:	1b5b      	subs	r3, r3, r5
 800737e:	50a3      	str	r3, [r4, r2]
 8007380:	e7e1      	b.n	8007346 <_malloc_r+0x8e>
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xa8>
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1d5      	bne.n	8007338 <_malloc_r+0x80>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e7e9      	b.n	8007366 <_malloc_r+0xae>
 8007392:	0023      	movs	r3, r4
 8007394:	6864      	ldr	r4, [r4, #4]
 8007396:	e7a2      	b.n	80072de <_malloc_r+0x26>
 8007398:	002c      	movs	r4, r5
 800739a:	686d      	ldr	r5, [r5, #4]
 800739c:	e7ab      	b.n	80072f6 <_malloc_r+0x3e>
 800739e:	0013      	movs	r3, r2
 80073a0:	e7c4      	b.n	800732c <_malloc_r+0x74>
 80073a2:	230c      	movs	r3, #12
 80073a4:	0030      	movs	r0, r6
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f000 f810 	bl	80073cc <__malloc_unlock>
 80073ac:	e7cb      	b.n	8007346 <_malloc_r+0x8e>
 80073ae:	6027      	str	r7, [r4, #0]
 80073b0:	e7d9      	b.n	8007366 <_malloc_r+0xae>
 80073b2:	605b      	str	r3, [r3, #4]
 80073b4:	deff      	udf	#255	; 0xff
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	20000458 	.word	0x20000458

080073bc <__malloc_lock>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	4802      	ldr	r0, [pc, #8]	; (80073c8 <__malloc_lock+0xc>)
 80073c0:	f7ff f855 	bl	800646e <__retarget_lock_acquire_recursive>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	20000454 	.word	0x20000454

080073cc <__malloc_unlock>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4802      	ldr	r0, [pc, #8]	; (80073d8 <__malloc_unlock+0xc>)
 80073d0:	f7ff f84e 	bl	8006470 <__retarget_lock_release_recursive>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	20000454 	.word	0x20000454

080073dc <_Balloc>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	69c5      	ldr	r5, [r0, #28]
 80073e0:	0006      	movs	r6, r0
 80073e2:	000c      	movs	r4, r1
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	d10e      	bne.n	8007406 <_Balloc+0x2a>
 80073e8:	2010      	movs	r0, #16
 80073ea:	f7ff ff39 	bl	8007260 <malloc>
 80073ee:	1e02      	subs	r2, r0, #0
 80073f0:	61f0      	str	r0, [r6, #28]
 80073f2:	d104      	bne.n	80073fe <_Balloc+0x22>
 80073f4:	216b      	movs	r1, #107	; 0x6b
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <_Balloc+0x80>)
 80073f8:	4819      	ldr	r0, [pc, #100]	; (8007460 <_Balloc+0x84>)
 80073fa:	f001 fdbd 	bl	8008f78 <__assert_func>
 80073fe:	6045      	str	r5, [r0, #4]
 8007400:	6085      	str	r5, [r0, #8]
 8007402:	6005      	str	r5, [r0, #0]
 8007404:	60c5      	str	r5, [r0, #12]
 8007406:	69f5      	ldr	r5, [r6, #28]
 8007408:	68eb      	ldr	r3, [r5, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <_Balloc+0x5a>
 800740e:	69f3      	ldr	r3, [r6, #28]
 8007410:	00a2      	lsls	r2, r4, #2
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	189b      	adds	r3, r3, r2
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	2800      	cmp	r0, #0
 800741a:	d118      	bne.n	800744e <_Balloc+0x72>
 800741c:	2101      	movs	r1, #1
 800741e:	000d      	movs	r5, r1
 8007420:	40a5      	lsls	r5, r4
 8007422:	1d6a      	adds	r2, r5, #5
 8007424:	0030      	movs	r0, r6
 8007426:	0092      	lsls	r2, r2, #2
 8007428:	f001 fdc4 	bl	8008fb4 <_calloc_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	d00c      	beq.n	800744a <_Balloc+0x6e>
 8007430:	6044      	str	r4, [r0, #4]
 8007432:	6085      	str	r5, [r0, #8]
 8007434:	e00d      	b.n	8007452 <_Balloc+0x76>
 8007436:	2221      	movs	r2, #33	; 0x21
 8007438:	2104      	movs	r1, #4
 800743a:	0030      	movs	r0, r6
 800743c:	f001 fdba 	bl	8008fb4 <_calloc_r>
 8007440:	69f3      	ldr	r3, [r6, #28]
 8007442:	60e8      	str	r0, [r5, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e1      	bne.n	800740e <_Balloc+0x32>
 800744a:	2000      	movs	r0, #0
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	6802      	ldr	r2, [r0, #0]
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	2300      	movs	r3, #0
 8007454:	6103      	str	r3, [r0, #16]
 8007456:	60c3      	str	r3, [r0, #12]
 8007458:	e7f8      	b.n	800744c <_Balloc+0x70>
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	08009e8a 	.word	0x08009e8a
 8007460:	08009f0a 	.word	0x08009f0a

08007464 <_Bfree>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	69c6      	ldr	r6, [r0, #28]
 8007468:	0005      	movs	r5, r0
 800746a:	000c      	movs	r4, r1
 800746c:	2e00      	cmp	r6, #0
 800746e:	d10e      	bne.n	800748e <_Bfree+0x2a>
 8007470:	2010      	movs	r0, #16
 8007472:	f7ff fef5 	bl	8007260 <malloc>
 8007476:	1e02      	subs	r2, r0, #0
 8007478:	61e8      	str	r0, [r5, #28]
 800747a:	d104      	bne.n	8007486 <_Bfree+0x22>
 800747c:	218f      	movs	r1, #143	; 0x8f
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <_Bfree+0x40>)
 8007480:	4809      	ldr	r0, [pc, #36]	; (80074a8 <_Bfree+0x44>)
 8007482:	f001 fd79 	bl	8008f78 <__assert_func>
 8007486:	6046      	str	r6, [r0, #4]
 8007488:	6086      	str	r6, [r0, #8]
 800748a:	6006      	str	r6, [r0, #0]
 800748c:	60c6      	str	r6, [r0, #12]
 800748e:	2c00      	cmp	r4, #0
 8007490:	d007      	beq.n	80074a2 <_Bfree+0x3e>
 8007492:	69eb      	ldr	r3, [r5, #28]
 8007494:	6862      	ldr	r2, [r4, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	0092      	lsls	r2, r2, #2
 800749a:	189b      	adds	r3, r3, r2
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	601c      	str	r4, [r3, #0]
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	08009e8a 	.word	0x08009e8a
 80074a8:	08009f0a 	.word	0x08009f0a

080074ac <__multadd>:
 80074ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ae:	000e      	movs	r6, r1
 80074b0:	9001      	str	r0, [sp, #4]
 80074b2:	000c      	movs	r4, r1
 80074b4:	001d      	movs	r5, r3
 80074b6:	2000      	movs	r0, #0
 80074b8:	690f      	ldr	r7, [r1, #16]
 80074ba:	3614      	adds	r6, #20
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	3001      	adds	r0, #1
 80074c0:	b299      	uxth	r1, r3
 80074c2:	4351      	muls	r1, r2
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	4353      	muls	r3, r2
 80074c8:	1949      	adds	r1, r1, r5
 80074ca:	0c0d      	lsrs	r5, r1, #16
 80074cc:	195b      	adds	r3, r3, r5
 80074ce:	0c1d      	lsrs	r5, r3, #16
 80074d0:	b289      	uxth	r1, r1
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	185b      	adds	r3, r3, r1
 80074d6:	c608      	stmia	r6!, {r3}
 80074d8:	4287      	cmp	r7, r0
 80074da:	dcef      	bgt.n	80074bc <__multadd+0x10>
 80074dc:	2d00      	cmp	r5, #0
 80074de:	d022      	beq.n	8007526 <__multadd+0x7a>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	42bb      	cmp	r3, r7
 80074e4:	dc19      	bgt.n	800751a <__multadd+0x6e>
 80074e6:	6861      	ldr	r1, [r4, #4]
 80074e8:	9801      	ldr	r0, [sp, #4]
 80074ea:	3101      	adds	r1, #1
 80074ec:	f7ff ff76 	bl	80073dc <_Balloc>
 80074f0:	1e06      	subs	r6, r0, #0
 80074f2:	d105      	bne.n	8007500 <__multadd+0x54>
 80074f4:	0032      	movs	r2, r6
 80074f6:	21ba      	movs	r1, #186	; 0xba
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <__multadd+0x80>)
 80074fa:	480d      	ldr	r0, [pc, #52]	; (8007530 <__multadd+0x84>)
 80074fc:	f001 fd3c 	bl	8008f78 <__assert_func>
 8007500:	0021      	movs	r1, r4
 8007502:	6922      	ldr	r2, [r4, #16]
 8007504:	310c      	adds	r1, #12
 8007506:	3202      	adds	r2, #2
 8007508:	0092      	lsls	r2, r2, #2
 800750a:	300c      	adds	r0, #12
 800750c:	f001 fd24 	bl	8008f58 <memcpy>
 8007510:	0021      	movs	r1, r4
 8007512:	9801      	ldr	r0, [sp, #4]
 8007514:	f7ff ffa6 	bl	8007464 <_Bfree>
 8007518:	0034      	movs	r4, r6
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	18e3      	adds	r3, r4, r3
 8007520:	605d      	str	r5, [r3, #4]
 8007522:	1c7b      	adds	r3, r7, #1
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	0020      	movs	r0, r4
 8007528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	08009ef9 	.word	0x08009ef9
 8007530:	08009f0a 	.word	0x08009f0a

08007534 <__s2b>:
 8007534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007536:	0006      	movs	r6, r0
 8007538:	0018      	movs	r0, r3
 800753a:	000c      	movs	r4, r1
 800753c:	3008      	adds	r0, #8
 800753e:	2109      	movs	r1, #9
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	0015      	movs	r5, r2
 8007544:	f7f8 fe86 	bl	8000254 <__divsi3>
 8007548:	2301      	movs	r3, #1
 800754a:	2100      	movs	r1, #0
 800754c:	4283      	cmp	r3, r0
 800754e:	db0a      	blt.n	8007566 <__s2b+0x32>
 8007550:	0030      	movs	r0, r6
 8007552:	f7ff ff43 	bl	80073dc <_Balloc>
 8007556:	1e01      	subs	r1, r0, #0
 8007558:	d108      	bne.n	800756c <__s2b+0x38>
 800755a:	000a      	movs	r2, r1
 800755c:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <__s2b+0x90>)
 800755e:	481a      	ldr	r0, [pc, #104]	; (80075c8 <__s2b+0x94>)
 8007560:	31d3      	adds	r1, #211	; 0xd3
 8007562:	f001 fd09 	bl	8008f78 <__assert_func>
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	3101      	adds	r1, #1
 800756a:	e7ef      	b.n	800754c <__s2b+0x18>
 800756c:	9b08      	ldr	r3, [sp, #32]
 800756e:	6143      	str	r3, [r0, #20]
 8007570:	2301      	movs	r3, #1
 8007572:	6103      	str	r3, [r0, #16]
 8007574:	2d09      	cmp	r5, #9
 8007576:	dd18      	ble.n	80075aa <__s2b+0x76>
 8007578:	0023      	movs	r3, r4
 800757a:	3309      	adds	r3, #9
 800757c:	001f      	movs	r7, r3
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	1964      	adds	r4, r4, r5
 8007582:	783b      	ldrb	r3, [r7, #0]
 8007584:	220a      	movs	r2, #10
 8007586:	0030      	movs	r0, r6
 8007588:	3b30      	subs	r3, #48	; 0x30
 800758a:	f7ff ff8f 	bl	80074ac <__multadd>
 800758e:	3701      	adds	r7, #1
 8007590:	0001      	movs	r1, r0
 8007592:	42a7      	cmp	r7, r4
 8007594:	d1f5      	bne.n	8007582 <__s2b+0x4e>
 8007596:	002c      	movs	r4, r5
 8007598:	9b00      	ldr	r3, [sp, #0]
 800759a:	3c08      	subs	r4, #8
 800759c:	191c      	adds	r4, r3, r4
 800759e:	002f      	movs	r7, r5
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	429f      	cmp	r7, r3
 80075a4:	db04      	blt.n	80075b0 <__s2b+0x7c>
 80075a6:	0008      	movs	r0, r1
 80075a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075aa:	2509      	movs	r5, #9
 80075ac:	340a      	adds	r4, #10
 80075ae:	e7f6      	b.n	800759e <__s2b+0x6a>
 80075b0:	1b63      	subs	r3, r4, r5
 80075b2:	5ddb      	ldrb	r3, [r3, r7]
 80075b4:	220a      	movs	r2, #10
 80075b6:	0030      	movs	r0, r6
 80075b8:	3b30      	subs	r3, #48	; 0x30
 80075ba:	f7ff ff77 	bl	80074ac <__multadd>
 80075be:	3701      	adds	r7, #1
 80075c0:	0001      	movs	r1, r0
 80075c2:	e7ed      	b.n	80075a0 <__s2b+0x6c>
 80075c4:	08009ef9 	.word	0x08009ef9
 80075c8:	08009f0a 	.word	0x08009f0a

080075cc <__hi0bits>:
 80075cc:	0003      	movs	r3, r0
 80075ce:	0c02      	lsrs	r2, r0, #16
 80075d0:	2000      	movs	r0, #0
 80075d2:	4282      	cmp	r2, r0
 80075d4:	d101      	bne.n	80075da <__hi0bits+0xe>
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	3010      	adds	r0, #16
 80075da:	0e1a      	lsrs	r2, r3, #24
 80075dc:	d101      	bne.n	80075e2 <__hi0bits+0x16>
 80075de:	3008      	adds	r0, #8
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	0f1a      	lsrs	r2, r3, #28
 80075e4:	d101      	bne.n	80075ea <__hi0bits+0x1e>
 80075e6:	3004      	adds	r0, #4
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	0f9a      	lsrs	r2, r3, #30
 80075ec:	d101      	bne.n	80075f2 <__hi0bits+0x26>
 80075ee:	3002      	adds	r0, #2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	db03      	blt.n	80075fe <__hi0bits+0x32>
 80075f6:	3001      	adds	r0, #1
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	d400      	bmi.n	80075fe <__hi0bits+0x32>
 80075fc:	2020      	movs	r0, #32
 80075fe:	4770      	bx	lr

08007600 <__lo0bits>:
 8007600:	6803      	ldr	r3, [r0, #0]
 8007602:	0001      	movs	r1, r0
 8007604:	2207      	movs	r2, #7
 8007606:	0018      	movs	r0, r3
 8007608:	4010      	ands	r0, r2
 800760a:	4213      	tst	r3, r2
 800760c:	d00d      	beq.n	800762a <__lo0bits+0x2a>
 800760e:	3a06      	subs	r2, #6
 8007610:	2000      	movs	r0, #0
 8007612:	4213      	tst	r3, r2
 8007614:	d105      	bne.n	8007622 <__lo0bits+0x22>
 8007616:	3002      	adds	r0, #2
 8007618:	4203      	tst	r3, r0
 800761a:	d003      	beq.n	8007624 <__lo0bits+0x24>
 800761c:	40d3      	lsrs	r3, r2
 800761e:	0010      	movs	r0, r2
 8007620:	600b      	str	r3, [r1, #0]
 8007622:	4770      	bx	lr
 8007624:	089b      	lsrs	r3, r3, #2
 8007626:	600b      	str	r3, [r1, #0]
 8007628:	e7fb      	b.n	8007622 <__lo0bits+0x22>
 800762a:	b29a      	uxth	r2, r3
 800762c:	2a00      	cmp	r2, #0
 800762e:	d101      	bne.n	8007634 <__lo0bits+0x34>
 8007630:	2010      	movs	r0, #16
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b2da      	uxtb	r2, r3
 8007636:	2a00      	cmp	r2, #0
 8007638:	d101      	bne.n	800763e <__lo0bits+0x3e>
 800763a:	3008      	adds	r0, #8
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	071a      	lsls	r2, r3, #28
 8007640:	d101      	bne.n	8007646 <__lo0bits+0x46>
 8007642:	3004      	adds	r0, #4
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	079a      	lsls	r2, r3, #30
 8007648:	d101      	bne.n	800764e <__lo0bits+0x4e>
 800764a:	3002      	adds	r0, #2
 800764c:	089b      	lsrs	r3, r3, #2
 800764e:	07da      	lsls	r2, r3, #31
 8007650:	d4e9      	bmi.n	8007626 <__lo0bits+0x26>
 8007652:	3001      	adds	r0, #1
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	d1e6      	bne.n	8007626 <__lo0bits+0x26>
 8007658:	2020      	movs	r0, #32
 800765a:	e7e2      	b.n	8007622 <__lo0bits+0x22>

0800765c <__i2b>:
 800765c:	b510      	push	{r4, lr}
 800765e:	000c      	movs	r4, r1
 8007660:	2101      	movs	r1, #1
 8007662:	f7ff febb 	bl	80073dc <_Balloc>
 8007666:	2800      	cmp	r0, #0
 8007668:	d107      	bne.n	800767a <__i2b+0x1e>
 800766a:	2146      	movs	r1, #70	; 0x46
 800766c:	4c05      	ldr	r4, [pc, #20]	; (8007684 <__i2b+0x28>)
 800766e:	0002      	movs	r2, r0
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <__i2b+0x2c>)
 8007672:	0020      	movs	r0, r4
 8007674:	31ff      	adds	r1, #255	; 0xff
 8007676:	f001 fc7f 	bl	8008f78 <__assert_func>
 800767a:	2301      	movs	r3, #1
 800767c:	6144      	str	r4, [r0, #20]
 800767e:	6103      	str	r3, [r0, #16]
 8007680:	bd10      	pop	{r4, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	08009f0a 	.word	0x08009f0a
 8007688:	08009ef9 	.word	0x08009ef9

0800768c <__multiply>:
 800768c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768e:	0015      	movs	r5, r2
 8007690:	690a      	ldr	r2, [r1, #16]
 8007692:	692b      	ldr	r3, [r5, #16]
 8007694:	000c      	movs	r4, r1
 8007696:	b08b      	sub	sp, #44	; 0x2c
 8007698:	429a      	cmp	r2, r3
 800769a:	da01      	bge.n	80076a0 <__multiply+0x14>
 800769c:	002c      	movs	r4, r5
 800769e:	000d      	movs	r5, r1
 80076a0:	6927      	ldr	r7, [r4, #16]
 80076a2:	692e      	ldr	r6, [r5, #16]
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	19bb      	adds	r3, r7, r6
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	19ba      	adds	r2, r7, r6
 80076ae:	4293      	cmp	r3, r2
 80076b0:	da00      	bge.n	80076b4 <__multiply+0x28>
 80076b2:	3101      	adds	r1, #1
 80076b4:	f7ff fe92 	bl	80073dc <_Balloc>
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d106      	bne.n	80076cc <__multiply+0x40>
 80076be:	21b1      	movs	r1, #177	; 0xb1
 80076c0:	4b48      	ldr	r3, [pc, #288]	; (80077e4 <__multiply+0x158>)
 80076c2:	4849      	ldr	r0, [pc, #292]	; (80077e8 <__multiply+0x15c>)
 80076c4:	9a02      	ldr	r2, [sp, #8]
 80076c6:	0049      	lsls	r1, r1, #1
 80076c8:	f001 fc56 	bl	8008f78 <__assert_func>
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	2200      	movs	r2, #0
 80076d0:	3314      	adds	r3, #20
 80076d2:	469c      	mov	ip, r3
 80076d4:	19bb      	adds	r3, r7, r6
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4463      	add	r3, ip
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	4663      	mov	r3, ip
 80076de:	9904      	ldr	r1, [sp, #16]
 80076e0:	428b      	cmp	r3, r1
 80076e2:	d32a      	bcc.n	800773a <__multiply+0xae>
 80076e4:	0023      	movs	r3, r4
 80076e6:	00bf      	lsls	r7, r7, #2
 80076e8:	3314      	adds	r3, #20
 80076ea:	3514      	adds	r5, #20
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	00b6      	lsls	r6, r6, #2
 80076f0:	19db      	adds	r3, r3, r7
 80076f2:	9305      	str	r3, [sp, #20]
 80076f4:	19ab      	adds	r3, r5, r6
 80076f6:	9309      	str	r3, [sp, #36]	; 0x24
 80076f8:	2304      	movs	r3, #4
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	0023      	movs	r3, r4
 80076fe:	9a05      	ldr	r2, [sp, #20]
 8007700:	3315      	adds	r3, #21
 8007702:	9501      	str	r5, [sp, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d305      	bcc.n	8007714 <__multiply+0x88>
 8007708:	1b13      	subs	r3, r2, r4
 800770a:	3b15      	subs	r3, #21
 800770c:	089b      	lsrs	r3, r3, #2
 800770e:	3301      	adds	r3, #1
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	9306      	str	r3, [sp, #24]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007718:	4293      	cmp	r3, r2
 800771a:	d310      	bcc.n	800773e <__multiply+0xb2>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	dd05      	ble.n	800772e <__multiply+0xa2>
 8007722:	9b04      	ldr	r3, [sp, #16]
 8007724:	3b04      	subs	r3, #4
 8007726:	9304      	str	r3, [sp, #16]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d056      	beq.n	80077dc <__multiply+0x150>
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	9a03      	ldr	r2, [sp, #12]
 8007732:	0018      	movs	r0, r3
 8007734:	611a      	str	r2, [r3, #16]
 8007736:	b00b      	add	sp, #44	; 0x2c
 8007738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773a:	c304      	stmia	r3!, {r2}
 800773c:	e7cf      	b.n	80076de <__multiply+0x52>
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	b280      	uxth	r0, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	d01e      	beq.n	8007786 <__multiply+0xfa>
 8007748:	4667      	mov	r7, ip
 800774a:	2500      	movs	r5, #0
 800774c:	9e08      	ldr	r6, [sp, #32]
 800774e:	ce02      	ldmia	r6!, {r1}
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	9307      	str	r3, [sp, #28]
 8007754:	b28b      	uxth	r3, r1
 8007756:	4343      	muls	r3, r0
 8007758:	001a      	movs	r2, r3
 800775a:	466b      	mov	r3, sp
 800775c:	8b9b      	ldrh	r3, [r3, #28]
 800775e:	18d3      	adds	r3, r2, r3
 8007760:	195b      	adds	r3, r3, r5
 8007762:	0c0d      	lsrs	r5, r1, #16
 8007764:	4345      	muls	r5, r0
 8007766:	9a07      	ldr	r2, [sp, #28]
 8007768:	0c11      	lsrs	r1, r2, #16
 800776a:	1869      	adds	r1, r5, r1
 800776c:	0c1a      	lsrs	r2, r3, #16
 800776e:	188a      	adds	r2, r1, r2
 8007770:	b29b      	uxth	r3, r3
 8007772:	0c15      	lsrs	r5, r2, #16
 8007774:	0412      	lsls	r2, r2, #16
 8007776:	431a      	orrs	r2, r3
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	c704      	stmia	r7!, {r2}
 800777c:	42b3      	cmp	r3, r6
 800777e:	d8e6      	bhi.n	800774e <__multiply+0xc2>
 8007780:	4663      	mov	r3, ip
 8007782:	9a06      	ldr	r2, [sp, #24]
 8007784:	509d      	str	r5, [r3, r2]
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	0c00      	lsrs	r0, r0, #16
 800778c:	d020      	beq.n	80077d0 <__multiply+0x144>
 800778e:	4663      	mov	r3, ip
 8007790:	0025      	movs	r5, r4
 8007792:	4661      	mov	r1, ip
 8007794:	2700      	movs	r7, #0
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3514      	adds	r5, #20
 800779a:	682a      	ldr	r2, [r5, #0]
 800779c:	680e      	ldr	r6, [r1, #0]
 800779e:	b292      	uxth	r2, r2
 80077a0:	4342      	muls	r2, r0
 80077a2:	0c36      	lsrs	r6, r6, #16
 80077a4:	1992      	adds	r2, r2, r6
 80077a6:	19d2      	adds	r2, r2, r7
 80077a8:	0416      	lsls	r6, r2, #16
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	431e      	orrs	r6, r3
 80077ae:	600e      	str	r6, [r1, #0]
 80077b0:	cd40      	ldmia	r5!, {r6}
 80077b2:	684b      	ldr	r3, [r1, #4]
 80077b4:	0c36      	lsrs	r6, r6, #16
 80077b6:	4346      	muls	r6, r0
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	0c12      	lsrs	r2, r2, #16
 80077bc:	18f3      	adds	r3, r6, r3
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	9a05      	ldr	r2, [sp, #20]
 80077c2:	0c1f      	lsrs	r7, r3, #16
 80077c4:	3104      	adds	r1, #4
 80077c6:	42aa      	cmp	r2, r5
 80077c8:	d8e7      	bhi.n	800779a <__multiply+0x10e>
 80077ca:	4662      	mov	r2, ip
 80077cc:	9906      	ldr	r1, [sp, #24]
 80077ce:	5053      	str	r3, [r2, r1]
 80077d0:	9b01      	ldr	r3, [sp, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	2304      	movs	r3, #4
 80077d8:	449c      	add	ip, r3
 80077da:	e79b      	b.n	8007714 <__multiply+0x88>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	3b01      	subs	r3, #1
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	e79b      	b.n	800771c <__multiply+0x90>
 80077e4:	08009ef9 	.word	0x08009ef9
 80077e8:	08009f0a 	.word	0x08009f0a

080077ec <__pow5mult>:
 80077ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ee:	2303      	movs	r3, #3
 80077f0:	0015      	movs	r5, r2
 80077f2:	0007      	movs	r7, r0
 80077f4:	000e      	movs	r6, r1
 80077f6:	401a      	ands	r2, r3
 80077f8:	421d      	tst	r5, r3
 80077fa:	d008      	beq.n	800780e <__pow5mult+0x22>
 80077fc:	4925      	ldr	r1, [pc, #148]	; (8007894 <__pow5mult+0xa8>)
 80077fe:	3a01      	subs	r2, #1
 8007800:	0092      	lsls	r2, r2, #2
 8007802:	5852      	ldr	r2, [r2, r1]
 8007804:	2300      	movs	r3, #0
 8007806:	0031      	movs	r1, r6
 8007808:	f7ff fe50 	bl	80074ac <__multadd>
 800780c:	0006      	movs	r6, r0
 800780e:	10ad      	asrs	r5, r5, #2
 8007810:	d03d      	beq.n	800788e <__pow5mult+0xa2>
 8007812:	69fc      	ldr	r4, [r7, #28]
 8007814:	2c00      	cmp	r4, #0
 8007816:	d10f      	bne.n	8007838 <__pow5mult+0x4c>
 8007818:	2010      	movs	r0, #16
 800781a:	f7ff fd21 	bl	8007260 <malloc>
 800781e:	1e02      	subs	r2, r0, #0
 8007820:	61f8      	str	r0, [r7, #28]
 8007822:	d105      	bne.n	8007830 <__pow5mult+0x44>
 8007824:	21b4      	movs	r1, #180	; 0xb4
 8007826:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <__pow5mult+0xac>)
 8007828:	481c      	ldr	r0, [pc, #112]	; (800789c <__pow5mult+0xb0>)
 800782a:	31ff      	adds	r1, #255	; 0xff
 800782c:	f001 fba4 	bl	8008f78 <__assert_func>
 8007830:	6044      	str	r4, [r0, #4]
 8007832:	6084      	str	r4, [r0, #8]
 8007834:	6004      	str	r4, [r0, #0]
 8007836:	60c4      	str	r4, [r0, #12]
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	689c      	ldr	r4, [r3, #8]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	2c00      	cmp	r4, #0
 8007840:	d108      	bne.n	8007854 <__pow5mult+0x68>
 8007842:	0038      	movs	r0, r7
 8007844:	4916      	ldr	r1, [pc, #88]	; (80078a0 <__pow5mult+0xb4>)
 8007846:	f7ff ff09 	bl	800765c <__i2b>
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	0004      	movs	r4, r0
 800784e:	6098      	str	r0, [r3, #8]
 8007850:	2300      	movs	r3, #0
 8007852:	6003      	str	r3, [r0, #0]
 8007854:	2301      	movs	r3, #1
 8007856:	421d      	tst	r5, r3
 8007858:	d00a      	beq.n	8007870 <__pow5mult+0x84>
 800785a:	0031      	movs	r1, r6
 800785c:	0022      	movs	r2, r4
 800785e:	0038      	movs	r0, r7
 8007860:	f7ff ff14 	bl	800768c <__multiply>
 8007864:	0031      	movs	r1, r6
 8007866:	9001      	str	r0, [sp, #4]
 8007868:	0038      	movs	r0, r7
 800786a:	f7ff fdfb 	bl	8007464 <_Bfree>
 800786e:	9e01      	ldr	r6, [sp, #4]
 8007870:	106d      	asrs	r5, r5, #1
 8007872:	d00c      	beq.n	800788e <__pow5mult+0xa2>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	2800      	cmp	r0, #0
 8007878:	d107      	bne.n	800788a <__pow5mult+0x9e>
 800787a:	0022      	movs	r2, r4
 800787c:	0021      	movs	r1, r4
 800787e:	0038      	movs	r0, r7
 8007880:	f7ff ff04 	bl	800768c <__multiply>
 8007884:	2300      	movs	r3, #0
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	0004      	movs	r4, r0
 800788c:	e7e2      	b.n	8007854 <__pow5mult+0x68>
 800788e:	0030      	movs	r0, r6
 8007890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	0800a058 	.word	0x0800a058
 8007898:	08009e8a 	.word	0x08009e8a
 800789c:	08009f0a 	.word	0x08009f0a
 80078a0:	00000271 	.word	0x00000271

080078a4 <__lshift>:
 80078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a6:	000c      	movs	r4, r1
 80078a8:	0017      	movs	r7, r2
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	1155      	asrs	r5, r2, #5
 80078ae:	b087      	sub	sp, #28
 80078b0:	18eb      	adds	r3, r5, r3
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	3301      	adds	r3, #1
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	6849      	ldr	r1, [r1, #4]
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	9004      	str	r0, [sp, #16]
 80078be:	9a01      	ldr	r2, [sp, #4]
 80078c0:	4293      	cmp	r3, r2
 80078c2:	db10      	blt.n	80078e6 <__lshift+0x42>
 80078c4:	9804      	ldr	r0, [sp, #16]
 80078c6:	f7ff fd89 	bl	80073dc <_Balloc>
 80078ca:	2300      	movs	r3, #0
 80078cc:	0002      	movs	r2, r0
 80078ce:	0006      	movs	r6, r0
 80078d0:	0019      	movs	r1, r3
 80078d2:	3214      	adds	r2, #20
 80078d4:	4298      	cmp	r0, r3
 80078d6:	d10c      	bne.n	80078f2 <__lshift+0x4e>
 80078d8:	31df      	adds	r1, #223	; 0xdf
 80078da:	0032      	movs	r2, r6
 80078dc:	4b26      	ldr	r3, [pc, #152]	; (8007978 <__lshift+0xd4>)
 80078de:	4827      	ldr	r0, [pc, #156]	; (800797c <__lshift+0xd8>)
 80078e0:	31ff      	adds	r1, #255	; 0xff
 80078e2:	f001 fb49 	bl	8008f78 <__assert_func>
 80078e6:	3101      	adds	r1, #1
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	e7e8      	b.n	80078be <__lshift+0x1a>
 80078ec:	0098      	lsls	r0, r3, #2
 80078ee:	5011      	str	r1, [r2, r0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	42ab      	cmp	r3, r5
 80078f4:	dbfa      	blt.n	80078ec <__lshift+0x48>
 80078f6:	43eb      	mvns	r3, r5
 80078f8:	17db      	asrs	r3, r3, #31
 80078fa:	401d      	ands	r5, r3
 80078fc:	211f      	movs	r1, #31
 80078fe:	0023      	movs	r3, r4
 8007900:	0038      	movs	r0, r7
 8007902:	00ad      	lsls	r5, r5, #2
 8007904:	1955      	adds	r5, r2, r5
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	3314      	adds	r3, #20
 800790a:	0092      	lsls	r2, r2, #2
 800790c:	4008      	ands	r0, r1
 800790e:	4684      	mov	ip, r0
 8007910:	189a      	adds	r2, r3, r2
 8007912:	420f      	tst	r7, r1
 8007914:	d02a      	beq.n	800796c <__lshift+0xc8>
 8007916:	3101      	adds	r1, #1
 8007918:	1a09      	subs	r1, r1, r0
 800791a:	9105      	str	r1, [sp, #20]
 800791c:	2100      	movs	r1, #0
 800791e:	9503      	str	r5, [sp, #12]
 8007920:	4667      	mov	r7, ip
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	40b8      	lsls	r0, r7
 8007926:	4308      	orrs	r0, r1
 8007928:	9903      	ldr	r1, [sp, #12]
 800792a:	c101      	stmia	r1!, {r0}
 800792c:	9103      	str	r1, [sp, #12]
 800792e:	9805      	ldr	r0, [sp, #20]
 8007930:	cb02      	ldmia	r3!, {r1}
 8007932:	40c1      	lsrs	r1, r0
 8007934:	429a      	cmp	r2, r3
 8007936:	d8f3      	bhi.n	8007920 <__lshift+0x7c>
 8007938:	0020      	movs	r0, r4
 800793a:	3015      	adds	r0, #21
 800793c:	2304      	movs	r3, #4
 800793e:	4282      	cmp	r2, r0
 8007940:	d304      	bcc.n	800794c <__lshift+0xa8>
 8007942:	1b13      	subs	r3, r2, r4
 8007944:	3b15      	subs	r3, #21
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	3301      	adds	r3, #1
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	50e9      	str	r1, [r5, r3]
 800794e:	2900      	cmp	r1, #0
 8007950:	d002      	beq.n	8007958 <__lshift+0xb4>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	3302      	adds	r3, #2
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	9804      	ldr	r0, [sp, #16]
 800795c:	3b01      	subs	r3, #1
 800795e:	0021      	movs	r1, r4
 8007960:	6133      	str	r3, [r6, #16]
 8007962:	f7ff fd7f 	bl	8007464 <_Bfree>
 8007966:	0030      	movs	r0, r6
 8007968:	b007      	add	sp, #28
 800796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796c:	cb02      	ldmia	r3!, {r1}
 800796e:	c502      	stmia	r5!, {r1}
 8007970:	429a      	cmp	r2, r3
 8007972:	d8fb      	bhi.n	800796c <__lshift+0xc8>
 8007974:	e7f0      	b.n	8007958 <__lshift+0xb4>
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	08009ef9 	.word	0x08009ef9
 800797c:	08009f0a 	.word	0x08009f0a

08007980 <__mcmp>:
 8007980:	b530      	push	{r4, r5, lr}
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	6904      	ldr	r4, [r0, #16]
 8007986:	0002      	movs	r2, r0
 8007988:	1ae0      	subs	r0, r4, r3
 800798a:	429c      	cmp	r4, r3
 800798c:	d10e      	bne.n	80079ac <__mcmp+0x2c>
 800798e:	3214      	adds	r2, #20
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	3114      	adds	r1, #20
 8007994:	0014      	movs	r4, r2
 8007996:	18c9      	adds	r1, r1, r3
 8007998:	18d2      	adds	r2, r2, r3
 800799a:	3a04      	subs	r2, #4
 800799c:	3904      	subs	r1, #4
 800799e:	6815      	ldr	r5, [r2, #0]
 80079a0:	680b      	ldr	r3, [r1, #0]
 80079a2:	429d      	cmp	r5, r3
 80079a4:	d003      	beq.n	80079ae <__mcmp+0x2e>
 80079a6:	2001      	movs	r0, #1
 80079a8:	429d      	cmp	r5, r3
 80079aa:	d303      	bcc.n	80079b4 <__mcmp+0x34>
 80079ac:	bd30      	pop	{r4, r5, pc}
 80079ae:	4294      	cmp	r4, r2
 80079b0:	d3f3      	bcc.n	800799a <__mcmp+0x1a>
 80079b2:	e7fb      	b.n	80079ac <__mcmp+0x2c>
 80079b4:	4240      	negs	r0, r0
 80079b6:	e7f9      	b.n	80079ac <__mcmp+0x2c>

080079b8 <__mdiff>:
 80079b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ba:	000e      	movs	r6, r1
 80079bc:	0007      	movs	r7, r0
 80079be:	0011      	movs	r1, r2
 80079c0:	0030      	movs	r0, r6
 80079c2:	b087      	sub	sp, #28
 80079c4:	0014      	movs	r4, r2
 80079c6:	f7ff ffdb 	bl	8007980 <__mcmp>
 80079ca:	1e05      	subs	r5, r0, #0
 80079cc:	d110      	bne.n	80079f0 <__mdiff+0x38>
 80079ce:	0001      	movs	r1, r0
 80079d0:	0038      	movs	r0, r7
 80079d2:	f7ff fd03 	bl	80073dc <_Balloc>
 80079d6:	1e02      	subs	r2, r0, #0
 80079d8:	d104      	bne.n	80079e4 <__mdiff+0x2c>
 80079da:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <__mdiff+0x120>)
 80079dc:	483f      	ldr	r0, [pc, #252]	; (8007adc <__mdiff+0x124>)
 80079de:	4940      	ldr	r1, [pc, #256]	; (8007ae0 <__mdiff+0x128>)
 80079e0:	f001 faca 	bl	8008f78 <__assert_func>
 80079e4:	2301      	movs	r3, #1
 80079e6:	6145      	str	r5, [r0, #20]
 80079e8:	6103      	str	r3, [r0, #16]
 80079ea:	0010      	movs	r0, r2
 80079ec:	b007      	add	sp, #28
 80079ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f0:	2301      	movs	r3, #1
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	2800      	cmp	r0, #0
 80079f6:	db04      	blt.n	8007a02 <__mdiff+0x4a>
 80079f8:	0023      	movs	r3, r4
 80079fa:	0034      	movs	r4, r6
 80079fc:	001e      	movs	r6, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	0038      	movs	r0, r7
 8007a04:	6861      	ldr	r1, [r4, #4]
 8007a06:	f7ff fce9 	bl	80073dc <_Balloc>
 8007a0a:	1e02      	subs	r2, r0, #0
 8007a0c:	d103      	bne.n	8007a16 <__mdiff+0x5e>
 8007a0e:	4b32      	ldr	r3, [pc, #200]	; (8007ad8 <__mdiff+0x120>)
 8007a10:	4832      	ldr	r0, [pc, #200]	; (8007adc <__mdiff+0x124>)
 8007a12:	4934      	ldr	r1, [pc, #208]	; (8007ae4 <__mdiff+0x12c>)
 8007a14:	e7e4      	b.n	80079e0 <__mdiff+0x28>
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	2700      	movs	r7, #0
 8007a1a:	60c3      	str	r3, [r0, #12]
 8007a1c:	6920      	ldr	r0, [r4, #16]
 8007a1e:	3414      	adds	r4, #20
 8007a20:	0083      	lsls	r3, r0, #2
 8007a22:	18e3      	adds	r3, r4, r3
 8007a24:	0021      	movs	r1, r4
 8007a26:	9401      	str	r4, [sp, #4]
 8007a28:	0034      	movs	r4, r6
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	6933      	ldr	r3, [r6, #16]
 8007a2e:	3414      	adds	r4, #20
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	18e3      	adds	r3, r4, r3
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	0013      	movs	r3, r2
 8007a38:	3314      	adds	r3, #20
 8007a3a:	469c      	mov	ip, r3
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	9104      	str	r1, [sp, #16]
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	cc02      	ldmia	r4!, {r1}
 8007a44:	cb20      	ldmia	r3!, {r5}
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	b2ab      	uxth	r3, r5
 8007a4a:	19df      	adds	r7, r3, r7
 8007a4c:	b28b      	uxth	r3, r1
 8007a4e:	1afb      	subs	r3, r7, r3
 8007a50:	0c09      	lsrs	r1, r1, #16
 8007a52:	0c2d      	lsrs	r5, r5, #16
 8007a54:	1a6d      	subs	r5, r5, r1
 8007a56:	1419      	asrs	r1, r3, #16
 8007a58:	1869      	adds	r1, r5, r1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	140f      	asrs	r7, r1, #16
 8007a5e:	0409      	lsls	r1, r1, #16
 8007a60:	4319      	orrs	r1, r3
 8007a62:	4663      	mov	r3, ip
 8007a64:	c302      	stmia	r3!, {r1}
 8007a66:	469c      	mov	ip, r3
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	d8e8      	bhi.n	8007a40 <__mdiff+0x88>
 8007a6e:	0031      	movs	r1, r6
 8007a70:	9c03      	ldr	r4, [sp, #12]
 8007a72:	3115      	adds	r1, #21
 8007a74:	2304      	movs	r3, #4
 8007a76:	428c      	cmp	r4, r1
 8007a78:	d304      	bcc.n	8007a84 <__mdiff+0xcc>
 8007a7a:	1ba3      	subs	r3, r4, r6
 8007a7c:	3b15      	subs	r3, #21
 8007a7e:	089b      	lsrs	r3, r3, #2
 8007a80:	3301      	adds	r3, #1
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	9901      	ldr	r1, [sp, #4]
 8007a86:	18cd      	adds	r5, r1, r3
 8007a88:	9905      	ldr	r1, [sp, #20]
 8007a8a:	002e      	movs	r6, r5
 8007a8c:	18cb      	adds	r3, r1, r3
 8007a8e:	469c      	mov	ip, r3
 8007a90:	9902      	ldr	r1, [sp, #8]
 8007a92:	428e      	cmp	r6, r1
 8007a94:	d310      	bcc.n	8007ab8 <__mdiff+0x100>
 8007a96:	9e02      	ldr	r6, [sp, #8]
 8007a98:	1ee9      	subs	r1, r5, #3
 8007a9a:	2400      	movs	r4, #0
 8007a9c:	428e      	cmp	r6, r1
 8007a9e:	d304      	bcc.n	8007aaa <__mdiff+0xf2>
 8007aa0:	0031      	movs	r1, r6
 8007aa2:	3103      	adds	r1, #3
 8007aa4:	1b49      	subs	r1, r1, r5
 8007aa6:	0889      	lsrs	r1, r1, #2
 8007aa8:	008c      	lsls	r4, r1, #2
 8007aaa:	191b      	adds	r3, r3, r4
 8007aac:	3b04      	subs	r3, #4
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d00f      	beq.n	8007ad4 <__mdiff+0x11c>
 8007ab4:	6110      	str	r0, [r2, #16]
 8007ab6:	e798      	b.n	80079ea <__mdiff+0x32>
 8007ab8:	ce02      	ldmia	r6!, {r1}
 8007aba:	b28c      	uxth	r4, r1
 8007abc:	19e4      	adds	r4, r4, r7
 8007abe:	0c0f      	lsrs	r7, r1, #16
 8007ac0:	1421      	asrs	r1, r4, #16
 8007ac2:	1879      	adds	r1, r7, r1
 8007ac4:	b2a4      	uxth	r4, r4
 8007ac6:	140f      	asrs	r7, r1, #16
 8007ac8:	0409      	lsls	r1, r1, #16
 8007aca:	4321      	orrs	r1, r4
 8007acc:	4664      	mov	r4, ip
 8007ace:	c402      	stmia	r4!, {r1}
 8007ad0:	46a4      	mov	ip, r4
 8007ad2:	e7dd      	b.n	8007a90 <__mdiff+0xd8>
 8007ad4:	3801      	subs	r0, #1
 8007ad6:	e7e9      	b.n	8007aac <__mdiff+0xf4>
 8007ad8:	08009ef9 	.word	0x08009ef9
 8007adc:	08009f0a 	.word	0x08009f0a
 8007ae0:	00000237 	.word	0x00000237
 8007ae4:	00000245 	.word	0x00000245

08007ae8 <__ulp>:
 8007ae8:	2000      	movs	r0, #0
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <__ulp+0x30>)
 8007aec:	4019      	ands	r1, r3
 8007aee:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <__ulp+0x34>)
 8007af0:	18c9      	adds	r1, r1, r3
 8007af2:	4281      	cmp	r1, r0
 8007af4:	dc06      	bgt.n	8007b04 <__ulp+0x1c>
 8007af6:	4249      	negs	r1, r1
 8007af8:	150b      	asrs	r3, r1, #20
 8007afa:	2b13      	cmp	r3, #19
 8007afc:	dc03      	bgt.n	8007b06 <__ulp+0x1e>
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	0309      	lsls	r1, r1, #12
 8007b02:	4119      	asrs	r1, r3
 8007b04:	4770      	bx	lr
 8007b06:	3b14      	subs	r3, #20
 8007b08:	2001      	movs	r0, #1
 8007b0a:	2b1e      	cmp	r3, #30
 8007b0c:	dc02      	bgt.n	8007b14 <__ulp+0x2c>
 8007b0e:	2080      	movs	r0, #128	; 0x80
 8007b10:	0600      	lsls	r0, r0, #24
 8007b12:	40d8      	lsrs	r0, r3
 8007b14:	2100      	movs	r1, #0
 8007b16:	e7f5      	b.n	8007b04 <__ulp+0x1c>
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	fcc00000 	.word	0xfcc00000

08007b20 <__b2d>:
 8007b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b22:	0006      	movs	r6, r0
 8007b24:	6903      	ldr	r3, [r0, #16]
 8007b26:	3614      	adds	r6, #20
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	18f3      	adds	r3, r6, r3
 8007b2c:	1f1d      	subs	r5, r3, #4
 8007b2e:	682c      	ldr	r4, [r5, #0]
 8007b30:	000f      	movs	r7, r1
 8007b32:	0020      	movs	r0, r4
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	f7ff fd49 	bl	80075cc <__hi0bits>
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	1a12      	subs	r2, r2, r0
 8007b3e:	603a      	str	r2, [r7, #0]
 8007b40:	0003      	movs	r3, r0
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <__b2d+0x94>)
 8007b44:	280a      	cmp	r0, #10
 8007b46:	dc15      	bgt.n	8007b74 <__b2d+0x54>
 8007b48:	210b      	movs	r1, #11
 8007b4a:	0027      	movs	r7, r4
 8007b4c:	1a09      	subs	r1, r1, r0
 8007b4e:	40cf      	lsrs	r7, r1
 8007b50:	433a      	orrs	r2, r7
 8007b52:	468c      	mov	ip, r1
 8007b54:	0011      	movs	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	42ae      	cmp	r6, r5
 8007b5a:	d202      	bcs.n	8007b62 <__b2d+0x42>
 8007b5c:	9a01      	ldr	r2, [sp, #4]
 8007b5e:	3a08      	subs	r2, #8
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	3315      	adds	r3, #21
 8007b64:	409c      	lsls	r4, r3
 8007b66:	4663      	mov	r3, ip
 8007b68:	0027      	movs	r7, r4
 8007b6a:	40da      	lsrs	r2, r3
 8007b6c:	4317      	orrs	r7, r2
 8007b6e:	0038      	movs	r0, r7
 8007b70:	b003      	add	sp, #12
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b74:	2700      	movs	r7, #0
 8007b76:	42ae      	cmp	r6, r5
 8007b78:	d202      	bcs.n	8007b80 <__b2d+0x60>
 8007b7a:	9d01      	ldr	r5, [sp, #4]
 8007b7c:	3d08      	subs	r5, #8
 8007b7e:	682f      	ldr	r7, [r5, #0]
 8007b80:	210b      	movs	r1, #11
 8007b82:	4249      	negs	r1, r1
 8007b84:	468c      	mov	ip, r1
 8007b86:	449c      	add	ip, r3
 8007b88:	2b0b      	cmp	r3, #11
 8007b8a:	d010      	beq.n	8007bae <__b2d+0x8e>
 8007b8c:	4661      	mov	r1, ip
 8007b8e:	2320      	movs	r3, #32
 8007b90:	408c      	lsls	r4, r1
 8007b92:	1a5b      	subs	r3, r3, r1
 8007b94:	0039      	movs	r1, r7
 8007b96:	40d9      	lsrs	r1, r3
 8007b98:	430c      	orrs	r4, r1
 8007b9a:	4322      	orrs	r2, r4
 8007b9c:	0011      	movs	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	42b5      	cmp	r5, r6
 8007ba2:	d901      	bls.n	8007ba8 <__b2d+0x88>
 8007ba4:	3d04      	subs	r5, #4
 8007ba6:	682a      	ldr	r2, [r5, #0]
 8007ba8:	4664      	mov	r4, ip
 8007baa:	40a7      	lsls	r7, r4
 8007bac:	e7dd      	b.n	8007b6a <__b2d+0x4a>
 8007bae:	4322      	orrs	r2, r4
 8007bb0:	0011      	movs	r1, r2
 8007bb2:	e7dc      	b.n	8007b6e <__b2d+0x4e>
 8007bb4:	3ff00000 	.word	0x3ff00000

08007bb8 <__d2b>:
 8007bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bba:	2101      	movs	r1, #1
 8007bbc:	0014      	movs	r4, r2
 8007bbe:	001d      	movs	r5, r3
 8007bc0:	9f08      	ldr	r7, [sp, #32]
 8007bc2:	f7ff fc0b 	bl	80073dc <_Balloc>
 8007bc6:	1e06      	subs	r6, r0, #0
 8007bc8:	d105      	bne.n	8007bd6 <__d2b+0x1e>
 8007bca:	0032      	movs	r2, r6
 8007bcc:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <__d2b+0xa8>)
 8007bce:	4825      	ldr	r0, [pc, #148]	; (8007c64 <__d2b+0xac>)
 8007bd0:	4925      	ldr	r1, [pc, #148]	; (8007c68 <__d2b+0xb0>)
 8007bd2:	f001 f9d1 	bl	8008f78 <__assert_func>
 8007bd6:	032b      	lsls	r3, r5, #12
 8007bd8:	006d      	lsls	r5, r5, #1
 8007bda:	0b1b      	lsrs	r3, r3, #12
 8007bdc:	0d6d      	lsrs	r5, r5, #21
 8007bde:	d125      	bne.n	8007c2c <__d2b+0x74>
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2c00      	cmp	r4, #0
 8007be4:	d028      	beq.n	8007c38 <__d2b+0x80>
 8007be6:	4668      	mov	r0, sp
 8007be8:	9400      	str	r4, [sp, #0]
 8007bea:	f7ff fd09 	bl	8007600 <__lo0bits>
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	9900      	ldr	r1, [sp, #0]
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d01e      	beq.n	8007c34 <__d2b+0x7c>
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	001c      	movs	r4, r3
 8007bfa:	1a12      	subs	r2, r2, r0
 8007bfc:	4094      	lsls	r4, r2
 8007bfe:	0022      	movs	r2, r4
 8007c00:	40c3      	lsrs	r3, r0
 8007c02:	430a      	orrs	r2, r1
 8007c04:	6172      	str	r2, [r6, #20]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	9c01      	ldr	r4, [sp, #4]
 8007c0a:	61b4      	str	r4, [r6, #24]
 8007c0c:	1e63      	subs	r3, r4, #1
 8007c0e:	419c      	sbcs	r4, r3
 8007c10:	3401      	adds	r4, #1
 8007c12:	6134      	str	r4, [r6, #16]
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	d017      	beq.n	8007c48 <__d2b+0x90>
 8007c18:	2435      	movs	r4, #53	; 0x35
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <__d2b+0xb4>)
 8007c1c:	18ed      	adds	r5, r5, r3
 8007c1e:	182d      	adds	r5, r5, r0
 8007c20:	603d      	str	r5, [r7, #0]
 8007c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c24:	1a24      	subs	r4, r4, r0
 8007c26:	601c      	str	r4, [r3, #0]
 8007c28:	0030      	movs	r0, r6
 8007c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c2c:	2280      	movs	r2, #128	; 0x80
 8007c2e:	0352      	lsls	r2, r2, #13
 8007c30:	4313      	orrs	r3, r2
 8007c32:	e7d5      	b.n	8007be0 <__d2b+0x28>
 8007c34:	6171      	str	r1, [r6, #20]
 8007c36:	e7e7      	b.n	8007c08 <__d2b+0x50>
 8007c38:	a801      	add	r0, sp, #4
 8007c3a:	f7ff fce1 	bl	8007600 <__lo0bits>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	2401      	movs	r4, #1
 8007c42:	6173      	str	r3, [r6, #20]
 8007c44:	3020      	adds	r0, #32
 8007c46:	e7e4      	b.n	8007c12 <__d2b+0x5a>
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <__d2b+0xb8>)
 8007c4a:	18c0      	adds	r0, r0, r3
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <__d2b+0xbc>)
 8007c4e:	6038      	str	r0, [r7, #0]
 8007c50:	18e3      	adds	r3, r4, r3
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	18f3      	adds	r3, r6, r3
 8007c56:	6958      	ldr	r0, [r3, #20]
 8007c58:	f7ff fcb8 	bl	80075cc <__hi0bits>
 8007c5c:	0164      	lsls	r4, r4, #5
 8007c5e:	e7e0      	b.n	8007c22 <__d2b+0x6a>
 8007c60:	08009ef9 	.word	0x08009ef9
 8007c64:	08009f0a 	.word	0x08009f0a
 8007c68:	0000030f 	.word	0x0000030f
 8007c6c:	fffffbcd 	.word	0xfffffbcd
 8007c70:	fffffbce 	.word	0xfffffbce
 8007c74:	3fffffff 	.word	0x3fffffff

08007c78 <__ratio>:
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	000f      	movs	r7, r1
 8007c7e:	a904      	add	r1, sp, #16
 8007c80:	0006      	movs	r6, r0
 8007c82:	f7ff ff4d 	bl	8007b20 <__b2d>
 8007c86:	9000      	str	r0, [sp, #0]
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	9c00      	ldr	r4, [sp, #0]
 8007c8c:	9d01      	ldr	r5, [sp, #4]
 8007c8e:	0038      	movs	r0, r7
 8007c90:	a905      	add	r1, sp, #20
 8007c92:	f7ff ff45 	bl	8007b20 <__b2d>
 8007c96:	9002      	str	r0, [sp, #8]
 8007c98:	9103      	str	r1, [sp, #12]
 8007c9a:	9a02      	ldr	r2, [sp, #8]
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	6930      	ldr	r0, [r6, #16]
 8007ca0:	6939      	ldr	r1, [r7, #16]
 8007ca2:	9e04      	ldr	r6, [sp, #16]
 8007ca4:	1a40      	subs	r0, r0, r1
 8007ca6:	9905      	ldr	r1, [sp, #20]
 8007ca8:	0140      	lsls	r0, r0, #5
 8007caa:	1a71      	subs	r1, r6, r1
 8007cac:	1841      	adds	r1, r0, r1
 8007cae:	0508      	lsls	r0, r1, #20
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	dd07      	ble.n	8007cc4 <__ratio+0x4c>
 8007cb4:	9901      	ldr	r1, [sp, #4]
 8007cb6:	1845      	adds	r5, r0, r1
 8007cb8:	0020      	movs	r0, r4
 8007cba:	0029      	movs	r1, r5
 8007cbc:	f7f9 f8de 	bl	8000e7c <__aeabi_ddiv>
 8007cc0:	b007      	add	sp, #28
 8007cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc4:	9903      	ldr	r1, [sp, #12]
 8007cc6:	1a0b      	subs	r3, r1, r0
 8007cc8:	e7f6      	b.n	8007cb8 <__ratio+0x40>

08007cca <__copybits>:
 8007cca:	b570      	push	{r4, r5, r6, lr}
 8007ccc:	0014      	movs	r4, r2
 8007cce:	0005      	movs	r5, r0
 8007cd0:	3901      	subs	r1, #1
 8007cd2:	6913      	ldr	r3, [r2, #16]
 8007cd4:	1149      	asrs	r1, r1, #5
 8007cd6:	3101      	adds	r1, #1
 8007cd8:	0089      	lsls	r1, r1, #2
 8007cda:	3414      	adds	r4, #20
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	1841      	adds	r1, r0, r1
 8007ce0:	18e3      	adds	r3, r4, r3
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	d80d      	bhi.n	8007d02 <__copybits+0x38>
 8007ce6:	0014      	movs	r4, r2
 8007ce8:	3411      	adds	r4, #17
 8007cea:	2500      	movs	r5, #0
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d803      	bhi.n	8007cf8 <__copybits+0x2e>
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	3b11      	subs	r3, #17
 8007cf4:	089b      	lsrs	r3, r3, #2
 8007cf6:	009d      	lsls	r5, r3, #2
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	1940      	adds	r0, r0, r5
 8007cfc:	4281      	cmp	r1, r0
 8007cfe:	d803      	bhi.n	8007d08 <__copybits+0x3e>
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
 8007d02:	cc40      	ldmia	r4!, {r6}
 8007d04:	c540      	stmia	r5!, {r6}
 8007d06:	e7ec      	b.n	8007ce2 <__copybits+0x18>
 8007d08:	c008      	stmia	r0!, {r3}
 8007d0a:	e7f7      	b.n	8007cfc <__copybits+0x32>

08007d0c <__any_on>:
 8007d0c:	0002      	movs	r2, r0
 8007d0e:	6900      	ldr	r0, [r0, #16]
 8007d10:	b510      	push	{r4, lr}
 8007d12:	3214      	adds	r2, #20
 8007d14:	114b      	asrs	r3, r1, #5
 8007d16:	4298      	cmp	r0, r3
 8007d18:	db13      	blt.n	8007d42 <__any_on+0x36>
 8007d1a:	dd0c      	ble.n	8007d36 <__any_on+0x2a>
 8007d1c:	241f      	movs	r4, #31
 8007d1e:	0008      	movs	r0, r1
 8007d20:	4020      	ands	r0, r4
 8007d22:	4221      	tst	r1, r4
 8007d24:	d007      	beq.n	8007d36 <__any_on+0x2a>
 8007d26:	0099      	lsls	r1, r3, #2
 8007d28:	588c      	ldr	r4, [r1, r2]
 8007d2a:	0021      	movs	r1, r4
 8007d2c:	40c1      	lsrs	r1, r0
 8007d2e:	4081      	lsls	r1, r0
 8007d30:	2001      	movs	r0, #1
 8007d32:	428c      	cmp	r4, r1
 8007d34:	d104      	bne.n	8007d40 <__any_on+0x34>
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	18d3      	adds	r3, r2, r3
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d803      	bhi.n	8007d46 <__any_on+0x3a>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	0003      	movs	r3, r0
 8007d44:	e7f7      	b.n	8007d36 <__any_on+0x2a>
 8007d46:	3b04      	subs	r3, #4
 8007d48:	6819      	ldr	r1, [r3, #0]
 8007d4a:	2900      	cmp	r1, #0
 8007d4c:	d0f5      	beq.n	8007d3a <__any_on+0x2e>
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e7f6      	b.n	8007d40 <__any_on+0x34>
	...

08007d54 <sulp>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	0016      	movs	r6, r2
 8007d58:	000d      	movs	r5, r1
 8007d5a:	f7ff fec5 	bl	8007ae8 <__ulp>
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d00d      	beq.n	8007d7e <sulp+0x2a>
 8007d62:	236b      	movs	r3, #107	; 0x6b
 8007d64:	006a      	lsls	r2, r5, #1
 8007d66:	0d52      	lsrs	r2, r2, #21
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dd07      	ble.n	8007d7e <sulp+0x2a>
 8007d6e:	2400      	movs	r4, #0
 8007d70:	4a03      	ldr	r2, [pc, #12]	; (8007d80 <sulp+0x2c>)
 8007d72:	051b      	lsls	r3, r3, #20
 8007d74:	189d      	adds	r5, r3, r2
 8007d76:	002b      	movs	r3, r5
 8007d78:	0022      	movs	r2, r4
 8007d7a:	f7f9 fc79 	bl	8001670 <__aeabi_dmul>
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	3ff00000 	.word	0x3ff00000

08007d84 <_strtod_l>:
 8007d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d86:	b0a1      	sub	sp, #132	; 0x84
 8007d88:	9219      	str	r2, [sp, #100]	; 0x64
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	2700      	movs	r7, #0
 8007d90:	9004      	str	r0, [sp, #16]
 8007d92:	9107      	str	r1, [sp, #28]
 8007d94:	921c      	str	r2, [sp, #112]	; 0x70
 8007d96:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d98:	780a      	ldrb	r2, [r1, #0]
 8007d9a:	2a2b      	cmp	r2, #43	; 0x2b
 8007d9c:	d055      	beq.n	8007e4a <_strtod_l+0xc6>
 8007d9e:	d841      	bhi.n	8007e24 <_strtod_l+0xa0>
 8007da0:	2a0d      	cmp	r2, #13
 8007da2:	d83b      	bhi.n	8007e1c <_strtod_l+0x98>
 8007da4:	2a08      	cmp	r2, #8
 8007da6:	d83b      	bhi.n	8007e20 <_strtod_l+0x9c>
 8007da8:	2a00      	cmp	r2, #0
 8007daa:	d044      	beq.n	8007e36 <_strtod_l+0xb2>
 8007dac:	2200      	movs	r2, #0
 8007dae:	920f      	str	r2, [sp, #60]	; 0x3c
 8007db0:	2100      	movs	r1, #0
 8007db2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007db4:	9109      	str	r1, [sp, #36]	; 0x24
 8007db6:	782a      	ldrb	r2, [r5, #0]
 8007db8:	2a30      	cmp	r2, #48	; 0x30
 8007dba:	d000      	beq.n	8007dbe <_strtod_l+0x3a>
 8007dbc:	e085      	b.n	8007eca <_strtod_l+0x146>
 8007dbe:	786a      	ldrb	r2, [r5, #1]
 8007dc0:	3120      	adds	r1, #32
 8007dc2:	438a      	bics	r2, r1
 8007dc4:	2a58      	cmp	r2, #88	; 0x58
 8007dc6:	d000      	beq.n	8007dca <_strtod_l+0x46>
 8007dc8:	e075      	b.n	8007eb6 <_strtod_l+0x132>
 8007dca:	9302      	str	r3, [sp, #8]
 8007dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dce:	4a97      	ldr	r2, [pc, #604]	; (800802c <_strtod_l+0x2a8>)
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	ab1c      	add	r3, sp, #112	; 0x70
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	9804      	ldr	r0, [sp, #16]
 8007dd8:	ab1d      	add	r3, sp, #116	; 0x74
 8007dda:	a91b      	add	r1, sp, #108	; 0x6c
 8007ddc:	f001 f982 	bl	80090e4 <__gethex>
 8007de0:	230f      	movs	r3, #15
 8007de2:	0002      	movs	r2, r0
 8007de4:	401a      	ands	r2, r3
 8007de6:	0004      	movs	r4, r0
 8007de8:	9205      	str	r2, [sp, #20]
 8007dea:	4218      	tst	r0, r3
 8007dec:	d005      	beq.n	8007dfa <_strtod_l+0x76>
 8007dee:	2a06      	cmp	r2, #6
 8007df0:	d12d      	bne.n	8007e4e <_strtod_l+0xca>
 8007df2:	1c6b      	adds	r3, r5, #1
 8007df4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007df6:	2300      	movs	r3, #0
 8007df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <_strtod_l+0x82>
 8007e00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <_strtod_l+0xc0>
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	0032      	movs	r2, r6
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	18fb      	adds	r3, r7, r3
 8007e14:	0010      	movs	r0, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	b021      	add	sp, #132	; 0x84
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1c:	2a20      	cmp	r2, #32
 8007e1e:	d1c5      	bne.n	8007dac <_strtod_l+0x28>
 8007e20:	3101      	adds	r1, #1
 8007e22:	e7b8      	b.n	8007d96 <_strtod_l+0x12>
 8007e24:	2a2d      	cmp	r2, #45	; 0x2d
 8007e26:	d1c1      	bne.n	8007dac <_strtod_l+0x28>
 8007e28:	3a2c      	subs	r2, #44	; 0x2c
 8007e2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8007e2c:	1c4a      	adds	r2, r1, #1
 8007e2e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e30:	784a      	ldrb	r2, [r1, #1]
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	d1bc      	bne.n	8007db0 <_strtod_l+0x2c>
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1dd      	bne.n	8007e00 <_strtod_l+0x7c>
 8007e44:	0032      	movs	r2, r6
 8007e46:	003b      	movs	r3, r7
 8007e48:	e7e4      	b.n	8007e14 <_strtod_l+0x90>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	e7ed      	b.n	8007e2a <_strtod_l+0xa6>
 8007e4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d007      	beq.n	8007e64 <_strtod_l+0xe0>
 8007e54:	2135      	movs	r1, #53	; 0x35
 8007e56:	a81e      	add	r0, sp, #120	; 0x78
 8007e58:	f7ff ff37 	bl	8007cca <__copybits>
 8007e5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e5e:	9804      	ldr	r0, [sp, #16]
 8007e60:	f7ff fb00 	bl	8007464 <_Bfree>
 8007e64:	9805      	ldr	r0, [sp, #20]
 8007e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e68:	3801      	subs	r0, #1
 8007e6a:	2804      	cmp	r0, #4
 8007e6c:	d806      	bhi.n	8007e7c <_strtod_l+0xf8>
 8007e6e:	f7f8 f953 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007e72:	0312      	.short	0x0312
 8007e74:	1e1c      	.short	0x1e1c
 8007e76:	12          	.byte	0x12
 8007e77:	00          	.byte	0x00
 8007e78:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007e7a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007e7c:	05e4      	lsls	r4, r4, #23
 8007e7e:	d502      	bpl.n	8007e86 <_strtod_l+0x102>
 8007e80:	2380      	movs	r3, #128	; 0x80
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	431f      	orrs	r7, r3
 8007e86:	4b6a      	ldr	r3, [pc, #424]	; (8008030 <_strtod_l+0x2ac>)
 8007e88:	423b      	tst	r3, r7
 8007e8a:	d1b6      	bne.n	8007dfa <_strtod_l+0x76>
 8007e8c:	f7fe fac4 	bl	8006418 <__errno>
 8007e90:	2322      	movs	r3, #34	; 0x22
 8007e92:	6003      	str	r3, [r0, #0]
 8007e94:	e7b1      	b.n	8007dfa <_strtod_l+0x76>
 8007e96:	4967      	ldr	r1, [pc, #412]	; (8008034 <_strtod_l+0x2b0>)
 8007e98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e9a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007e9c:	400a      	ands	r2, r1
 8007e9e:	4966      	ldr	r1, [pc, #408]	; (8008038 <_strtod_l+0x2b4>)
 8007ea0:	185b      	adds	r3, r3, r1
 8007ea2:	051b      	lsls	r3, r3, #20
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	0017      	movs	r7, r2
 8007ea8:	e7e8      	b.n	8007e7c <_strtod_l+0xf8>
 8007eaa:	4f61      	ldr	r7, [pc, #388]	; (8008030 <_strtod_l+0x2ac>)
 8007eac:	e7e6      	b.n	8007e7c <_strtod_l+0xf8>
 8007eae:	2601      	movs	r6, #1
 8007eb0:	4f62      	ldr	r7, [pc, #392]	; (800803c <_strtod_l+0x2b8>)
 8007eb2:	4276      	negs	r6, r6
 8007eb4:	e7e2      	b.n	8007e7c <_strtod_l+0xf8>
 8007eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	2b30      	cmp	r3, #48	; 0x30
 8007ec0:	d0f9      	beq.n	8007eb6 <_strtod_l+0x132>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d099      	beq.n	8007dfa <_strtod_l+0x76>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eca:	2500      	movs	r5, #0
 8007ecc:	220a      	movs	r2, #10
 8007ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ed0:	950d      	str	r5, [sp, #52]	; 0x34
 8007ed2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ed4:	9508      	str	r5, [sp, #32]
 8007ed6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007ed8:	7804      	ldrb	r4, [r0, #0]
 8007eda:	0023      	movs	r3, r4
 8007edc:	3b30      	subs	r3, #48	; 0x30
 8007ede:	b2d9      	uxtb	r1, r3
 8007ee0:	2909      	cmp	r1, #9
 8007ee2:	d927      	bls.n	8007f34 <_strtod_l+0x1b0>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4956      	ldr	r1, [pc, #344]	; (8008040 <_strtod_l+0x2bc>)
 8007ee8:	f001 f812 	bl	8008f10 <strncmp>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d031      	beq.n	8007f54 <_strtod_l+0x1d0>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	0023      	movs	r3, r4
 8007ef4:	4684      	mov	ip, r0
 8007ef6:	9a08      	ldr	r2, [sp, #32]
 8007ef8:	900c      	str	r0, [sp, #48]	; 0x30
 8007efa:	9205      	str	r2, [sp, #20]
 8007efc:	2220      	movs	r2, #32
 8007efe:	0019      	movs	r1, r3
 8007f00:	4391      	bics	r1, r2
 8007f02:	000a      	movs	r2, r1
 8007f04:	2100      	movs	r1, #0
 8007f06:	9106      	str	r1, [sp, #24]
 8007f08:	2a45      	cmp	r2, #69	; 0x45
 8007f0a:	d000      	beq.n	8007f0e <_strtod_l+0x18a>
 8007f0c:	e0c2      	b.n	8008094 <_strtod_l+0x310>
 8007f0e:	9b05      	ldr	r3, [sp, #20]
 8007f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f12:	4303      	orrs	r3, r0
 8007f14:	4313      	orrs	r3, r2
 8007f16:	428b      	cmp	r3, r1
 8007f18:	d08d      	beq.n	8007e36 <_strtod_l+0xb2>
 8007f1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f22:	9b07      	ldr	r3, [sp, #28]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b2b      	cmp	r3, #43	; 0x2b
 8007f28:	d071      	beq.n	800800e <_strtod_l+0x28a>
 8007f2a:	000c      	movs	r4, r1
 8007f2c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f2e:	d174      	bne.n	800801a <_strtod_l+0x296>
 8007f30:	2401      	movs	r4, #1
 8007f32:	e06d      	b.n	8008010 <_strtod_l+0x28c>
 8007f34:	9908      	ldr	r1, [sp, #32]
 8007f36:	2908      	cmp	r1, #8
 8007f38:	dc09      	bgt.n	8007f4e <_strtod_l+0x1ca>
 8007f3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f3c:	4351      	muls	r1, r2
 8007f3e:	185b      	adds	r3, r3, r1
 8007f40:	930d      	str	r3, [sp, #52]	; 0x34
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	3001      	adds	r0, #1
 8007f46:	3301      	adds	r3, #1
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007f4c:	e7c3      	b.n	8007ed6 <_strtod_l+0x152>
 8007f4e:	4355      	muls	r5, r2
 8007f50:	195d      	adds	r5, r3, r5
 8007f52:	e7f6      	b.n	8007f42 <_strtod_l+0x1be>
 8007f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f5a:	9a08      	ldr	r2, [sp, #32]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d03a      	beq.n	8007fd8 <_strtod_l+0x254>
 8007f62:	900c      	str	r0, [sp, #48]	; 0x30
 8007f64:	9205      	str	r2, [sp, #20]
 8007f66:	001a      	movs	r2, r3
 8007f68:	3a30      	subs	r2, #48	; 0x30
 8007f6a:	2a09      	cmp	r2, #9
 8007f6c:	d912      	bls.n	8007f94 <_strtod_l+0x210>
 8007f6e:	2201      	movs	r2, #1
 8007f70:	4694      	mov	ip, r2
 8007f72:	e7c3      	b.n	8007efc <_strtod_l+0x178>
 8007f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f76:	3001      	adds	r0, #1
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d0f8      	beq.n	8007f74 <_strtod_l+0x1f0>
 8007f82:	001a      	movs	r2, r3
 8007f84:	3a31      	subs	r2, #49	; 0x31
 8007f86:	2a08      	cmp	r2, #8
 8007f88:	d83c      	bhi.n	8008004 <_strtod_l+0x280>
 8007f8a:	900c      	str	r0, [sp, #48]	; 0x30
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f90:	9005      	str	r0, [sp, #20]
 8007f92:	9210      	str	r2, [sp, #64]	; 0x40
 8007f94:	001a      	movs	r2, r3
 8007f96:	1c41      	adds	r1, r0, #1
 8007f98:	3a30      	subs	r2, #48	; 0x30
 8007f9a:	2b30      	cmp	r3, #48	; 0x30
 8007f9c:	d016      	beq.n	8007fcc <_strtod_l+0x248>
 8007f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fa0:	185b      	adds	r3, r3, r1
 8007fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa4:	9b05      	ldr	r3, [sp, #20]
 8007fa6:	210a      	movs	r1, #10
 8007fa8:	469c      	mov	ip, r3
 8007faa:	4484      	add	ip, r0
 8007fac:	4563      	cmp	r3, ip
 8007fae:	d115      	bne.n	8007fdc <_strtod_l+0x258>
 8007fb0:	9905      	ldr	r1, [sp, #20]
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	1809      	adds	r1, r1, r0
 8007fb8:	181b      	adds	r3, r3, r0
 8007fba:	9105      	str	r1, [sp, #20]
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	dc19      	bgt.n	8007ff4 <_strtod_l+0x270>
 8007fc0:	230a      	movs	r3, #10
 8007fc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fc4:	434b      	muls	r3, r1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	18d3      	adds	r3, r2, r3
 8007fca:	930d      	str	r3, [sp, #52]	; 0x34
 8007fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fce:	0008      	movs	r0, r1
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	e7c6      	b.n	8007f66 <_strtod_l+0x1e2>
 8007fd8:	9808      	ldr	r0, [sp, #32]
 8007fda:	e7d0      	b.n	8007f7e <_strtod_l+0x1fa>
 8007fdc:	1c5c      	adds	r4, r3, #1
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	dc04      	bgt.n	8007fec <_strtod_l+0x268>
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe4:	434b      	muls	r3, r1
 8007fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fe8:	0023      	movs	r3, r4
 8007fea:	e7df      	b.n	8007fac <_strtod_l+0x228>
 8007fec:	2c10      	cmp	r4, #16
 8007fee:	dcfb      	bgt.n	8007fe8 <_strtod_l+0x264>
 8007ff0:	434d      	muls	r5, r1
 8007ff2:	e7f9      	b.n	8007fe8 <_strtod_l+0x264>
 8007ff4:	9b05      	ldr	r3, [sp, #20]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	dce7      	bgt.n	8007fcc <_strtod_l+0x248>
 8007ffc:	230a      	movs	r3, #10
 8007ffe:	435d      	muls	r5, r3
 8008000:	1955      	adds	r5, r2, r5
 8008002:	e7e3      	b.n	8007fcc <_strtod_l+0x248>
 8008004:	2200      	movs	r2, #0
 8008006:	920c      	str	r2, [sp, #48]	; 0x30
 8008008:	9205      	str	r2, [sp, #20]
 800800a:	3201      	adds	r2, #1
 800800c:	e7b0      	b.n	8007f70 <_strtod_l+0x1ec>
 800800e:	2400      	movs	r4, #0
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	3302      	adds	r3, #2
 8008014:	931b      	str	r3, [sp, #108]	; 0x6c
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	789b      	ldrb	r3, [r3, #2]
 800801a:	001a      	movs	r2, r3
 800801c:	3a30      	subs	r2, #48	; 0x30
 800801e:	2a09      	cmp	r2, #9
 8008020:	d914      	bls.n	800804c <_strtod_l+0x2c8>
 8008022:	9a07      	ldr	r2, [sp, #28]
 8008024:	921b      	str	r2, [sp, #108]	; 0x6c
 8008026:	2200      	movs	r2, #0
 8008028:	e033      	b.n	8008092 <_strtod_l+0x30e>
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	0800a068 	.word	0x0800a068
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	ffefffff 	.word	0xffefffff
 8008038:	00000433 	.word	0x00000433
 800803c:	7fffffff 	.word	0x7fffffff
 8008040:	0800a064 	.word	0x0800a064
 8008044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	921b      	str	r2, [sp, #108]	; 0x6c
 800804a:	785b      	ldrb	r3, [r3, #1]
 800804c:	2b30      	cmp	r3, #48	; 0x30
 800804e:	d0f9      	beq.n	8008044 <_strtod_l+0x2c0>
 8008050:	2200      	movs	r2, #0
 8008052:	9206      	str	r2, [sp, #24]
 8008054:	001a      	movs	r2, r3
 8008056:	3a31      	subs	r2, #49	; 0x31
 8008058:	2a08      	cmp	r2, #8
 800805a:	d81b      	bhi.n	8008094 <_strtod_l+0x310>
 800805c:	3b30      	subs	r3, #48	; 0x30
 800805e:	930e      	str	r3, [sp, #56]	; 0x38
 8008060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	911b      	str	r1, [sp, #108]	; 0x6c
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	001a      	movs	r2, r3
 800806e:	3a30      	subs	r2, #48	; 0x30
 8008070:	2a09      	cmp	r2, #9
 8008072:	d93a      	bls.n	80080ea <_strtod_l+0x366>
 8008074:	9a06      	ldr	r2, [sp, #24]
 8008076:	1a8a      	subs	r2, r1, r2
 8008078:	49b2      	ldr	r1, [pc, #712]	; (8008344 <_strtod_l+0x5c0>)
 800807a:	9106      	str	r1, [sp, #24]
 800807c:	2a08      	cmp	r2, #8
 800807e:	dc04      	bgt.n	800808a <_strtod_l+0x306>
 8008080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008082:	9206      	str	r2, [sp, #24]
 8008084:	428a      	cmp	r2, r1
 8008086:	dd00      	ble.n	800808a <_strtod_l+0x306>
 8008088:	9106      	str	r1, [sp, #24]
 800808a:	2c00      	cmp	r4, #0
 800808c:	d002      	beq.n	8008094 <_strtod_l+0x310>
 800808e:	9a06      	ldr	r2, [sp, #24]
 8008090:	4252      	negs	r2, r2
 8008092:	9206      	str	r2, [sp, #24]
 8008094:	9a05      	ldr	r2, [sp, #20]
 8008096:	2a00      	cmp	r2, #0
 8008098:	d14d      	bne.n	8008136 <_strtod_l+0x3b2>
 800809a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800809c:	4310      	orrs	r0, r2
 800809e:	d000      	beq.n	80080a2 <_strtod_l+0x31e>
 80080a0:	e6ab      	b.n	8007dfa <_strtod_l+0x76>
 80080a2:	4662      	mov	r2, ip
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d000      	beq.n	80080aa <_strtod_l+0x326>
 80080a8:	e6c5      	b.n	8007e36 <_strtod_l+0xb2>
 80080aa:	2b69      	cmp	r3, #105	; 0x69
 80080ac:	d027      	beq.n	80080fe <_strtod_l+0x37a>
 80080ae:	dc23      	bgt.n	80080f8 <_strtod_l+0x374>
 80080b0:	2b49      	cmp	r3, #73	; 0x49
 80080b2:	d024      	beq.n	80080fe <_strtod_l+0x37a>
 80080b4:	2b4e      	cmp	r3, #78	; 0x4e
 80080b6:	d000      	beq.n	80080ba <_strtod_l+0x336>
 80080b8:	e6bd      	b.n	8007e36 <_strtod_l+0xb2>
 80080ba:	49a3      	ldr	r1, [pc, #652]	; (8008348 <_strtod_l+0x5c4>)
 80080bc:	a81b      	add	r0, sp, #108	; 0x6c
 80080be:	f001 fa47 	bl	8009550 <__match>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d100      	bne.n	80080c8 <_strtod_l+0x344>
 80080c6:	e6b6      	b.n	8007e36 <_strtod_l+0xb2>
 80080c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b28      	cmp	r3, #40	; 0x28
 80080ce:	d12c      	bne.n	800812a <_strtod_l+0x3a6>
 80080d0:	499e      	ldr	r1, [pc, #632]	; (800834c <_strtod_l+0x5c8>)
 80080d2:	aa1e      	add	r2, sp, #120	; 0x78
 80080d4:	a81b      	add	r0, sp, #108	; 0x6c
 80080d6:	f001 fa4f 	bl	8009578 <__hexnan>
 80080da:	2805      	cmp	r0, #5
 80080dc:	d125      	bne.n	800812a <_strtod_l+0x3a6>
 80080de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080e0:	4a9b      	ldr	r2, [pc, #620]	; (8008350 <_strtod_l+0x5cc>)
 80080e2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80080e4:	431a      	orrs	r2, r3
 80080e6:	0017      	movs	r7, r2
 80080e8:	e687      	b.n	8007dfa <_strtod_l+0x76>
 80080ea:	220a      	movs	r2, #10
 80080ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080ee:	434a      	muls	r2, r1
 80080f0:	18d2      	adds	r2, r2, r3
 80080f2:	3a30      	subs	r2, #48	; 0x30
 80080f4:	920e      	str	r2, [sp, #56]	; 0x38
 80080f6:	e7b5      	b.n	8008064 <_strtod_l+0x2e0>
 80080f8:	2b6e      	cmp	r3, #110	; 0x6e
 80080fa:	d0de      	beq.n	80080ba <_strtod_l+0x336>
 80080fc:	e69b      	b.n	8007e36 <_strtod_l+0xb2>
 80080fe:	4995      	ldr	r1, [pc, #596]	; (8008354 <_strtod_l+0x5d0>)
 8008100:	a81b      	add	r0, sp, #108	; 0x6c
 8008102:	f001 fa25 	bl	8009550 <__match>
 8008106:	2800      	cmp	r0, #0
 8008108:	d100      	bne.n	800810c <_strtod_l+0x388>
 800810a:	e694      	b.n	8007e36 <_strtod_l+0xb2>
 800810c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800810e:	4992      	ldr	r1, [pc, #584]	; (8008358 <_strtod_l+0x5d4>)
 8008110:	3b01      	subs	r3, #1
 8008112:	a81b      	add	r0, sp, #108	; 0x6c
 8008114:	931b      	str	r3, [sp, #108]	; 0x6c
 8008116:	f001 fa1b 	bl	8009550 <__match>
 800811a:	2800      	cmp	r0, #0
 800811c:	d102      	bne.n	8008124 <_strtod_l+0x3a0>
 800811e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008120:	3301      	adds	r3, #1
 8008122:	931b      	str	r3, [sp, #108]	; 0x6c
 8008124:	2600      	movs	r6, #0
 8008126:	4f8a      	ldr	r7, [pc, #552]	; (8008350 <_strtod_l+0x5cc>)
 8008128:	e667      	b.n	8007dfa <_strtod_l+0x76>
 800812a:	488c      	ldr	r0, [pc, #560]	; (800835c <_strtod_l+0x5d8>)
 800812c:	f000 ff1e 	bl	8008f6c <nan>
 8008130:	0006      	movs	r6, r0
 8008132:	000f      	movs	r7, r1
 8008134:	e661      	b.n	8007dfa <_strtod_l+0x76>
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	9309      	str	r3, [sp, #36]	; 0x24
 800813e:	9b08      	ldr	r3, [sp, #32]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <_strtod_l+0x3c4>
 8008144:	9b05      	ldr	r3, [sp, #20]
 8008146:	9308      	str	r3, [sp, #32]
 8008148:	9c05      	ldr	r4, [sp, #20]
 800814a:	2c10      	cmp	r4, #16
 800814c:	dd00      	ble.n	8008150 <_strtod_l+0x3cc>
 800814e:	2410      	movs	r4, #16
 8008150:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008152:	f7fa f955 	bl	8002400 <__aeabi_ui2d>
 8008156:	9b05      	ldr	r3, [sp, #20]
 8008158:	0006      	movs	r6, r0
 800815a:	000f      	movs	r7, r1
 800815c:	2b09      	cmp	r3, #9
 800815e:	dd15      	ble.n	800818c <_strtod_l+0x408>
 8008160:	0022      	movs	r2, r4
 8008162:	4b7f      	ldr	r3, [pc, #508]	; (8008360 <_strtod_l+0x5dc>)
 8008164:	3a09      	subs	r2, #9
 8008166:	00d2      	lsls	r2, r2, #3
 8008168:	189b      	adds	r3, r3, r2
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f7f9 fa7f 	bl	8001670 <__aeabi_dmul>
 8008172:	0006      	movs	r6, r0
 8008174:	0028      	movs	r0, r5
 8008176:	000f      	movs	r7, r1
 8008178:	f7fa f942 	bl	8002400 <__aeabi_ui2d>
 800817c:	0002      	movs	r2, r0
 800817e:	000b      	movs	r3, r1
 8008180:	0030      	movs	r0, r6
 8008182:	0039      	movs	r1, r7
 8008184:	f7f8 fb1a 	bl	80007bc <__aeabi_dadd>
 8008188:	0006      	movs	r6, r0
 800818a:	000f      	movs	r7, r1
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	2b0f      	cmp	r3, #15
 8008190:	dc39      	bgt.n	8008206 <_strtod_l+0x482>
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d100      	bne.n	800819a <_strtod_l+0x416>
 8008198:	e62f      	b.n	8007dfa <_strtod_l+0x76>
 800819a:	dd24      	ble.n	80081e6 <_strtod_l+0x462>
 800819c:	2b16      	cmp	r3, #22
 800819e:	dc09      	bgt.n	80081b4 <_strtod_l+0x430>
 80081a0:	496f      	ldr	r1, [pc, #444]	; (8008360 <_strtod_l+0x5dc>)
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	18c9      	adds	r1, r1, r3
 80081a6:	0032      	movs	r2, r6
 80081a8:	6808      	ldr	r0, [r1, #0]
 80081aa:	6849      	ldr	r1, [r1, #4]
 80081ac:	003b      	movs	r3, r7
 80081ae:	f7f9 fa5f 	bl	8001670 <__aeabi_dmul>
 80081b2:	e7bd      	b.n	8008130 <_strtod_l+0x3ac>
 80081b4:	2325      	movs	r3, #37	; 0x25
 80081b6:	9a05      	ldr	r2, [sp, #20]
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081bc:	4293      	cmp	r3, r2
 80081be:	db22      	blt.n	8008206 <_strtod_l+0x482>
 80081c0:	240f      	movs	r4, #15
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	4d66      	ldr	r5, [pc, #408]	; (8008360 <_strtod_l+0x5dc>)
 80081c6:	1ae4      	subs	r4, r4, r3
 80081c8:	00e1      	lsls	r1, r4, #3
 80081ca:	1869      	adds	r1, r5, r1
 80081cc:	0032      	movs	r2, r6
 80081ce:	6808      	ldr	r0, [r1, #0]
 80081d0:	6849      	ldr	r1, [r1, #4]
 80081d2:	003b      	movs	r3, r7
 80081d4:	f7f9 fa4c 	bl	8001670 <__aeabi_dmul>
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	1b1c      	subs	r4, r3, r4
 80081dc:	00e4      	lsls	r4, r4, #3
 80081de:	192d      	adds	r5, r5, r4
 80081e0:	682a      	ldr	r2, [r5, #0]
 80081e2:	686b      	ldr	r3, [r5, #4]
 80081e4:	e7e3      	b.n	80081ae <_strtod_l+0x42a>
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	3316      	adds	r3, #22
 80081ea:	db0c      	blt.n	8008206 <_strtod_l+0x482>
 80081ec:	9906      	ldr	r1, [sp, #24]
 80081ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f0:	4b5b      	ldr	r3, [pc, #364]	; (8008360 <_strtod_l+0x5dc>)
 80081f2:	1a52      	subs	r2, r2, r1
 80081f4:	00d2      	lsls	r2, r2, #3
 80081f6:	189b      	adds	r3, r3, r2
 80081f8:	0030      	movs	r0, r6
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	0039      	movs	r1, r7
 8008200:	f7f8 fe3c 	bl	8000e7c <__aeabi_ddiv>
 8008204:	e794      	b.n	8008130 <_strtod_l+0x3ac>
 8008206:	9b05      	ldr	r3, [sp, #20]
 8008208:	1b1c      	subs	r4, r3, r4
 800820a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820c:	18e4      	adds	r4, r4, r3
 800820e:	2c00      	cmp	r4, #0
 8008210:	dd72      	ble.n	80082f8 <_strtod_l+0x574>
 8008212:	220f      	movs	r2, #15
 8008214:	0023      	movs	r3, r4
 8008216:	4013      	ands	r3, r2
 8008218:	4214      	tst	r4, r2
 800821a:	d00a      	beq.n	8008232 <_strtod_l+0x4ae>
 800821c:	4950      	ldr	r1, [pc, #320]	; (8008360 <_strtod_l+0x5dc>)
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	18c9      	adds	r1, r1, r3
 8008222:	0032      	movs	r2, r6
 8008224:	6808      	ldr	r0, [r1, #0]
 8008226:	6849      	ldr	r1, [r1, #4]
 8008228:	003b      	movs	r3, r7
 800822a:	f7f9 fa21 	bl	8001670 <__aeabi_dmul>
 800822e:	0006      	movs	r6, r0
 8008230:	000f      	movs	r7, r1
 8008232:	230f      	movs	r3, #15
 8008234:	439c      	bics	r4, r3
 8008236:	d04a      	beq.n	80082ce <_strtod_l+0x54a>
 8008238:	3326      	adds	r3, #38	; 0x26
 800823a:	33ff      	adds	r3, #255	; 0xff
 800823c:	429c      	cmp	r4, r3
 800823e:	dd22      	ble.n	8008286 <_strtod_l+0x502>
 8008240:	2300      	movs	r3, #0
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	930d      	str	r3, [sp, #52]	; 0x34
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	2322      	movs	r3, #34	; 0x22
 800824c:	2600      	movs	r6, #0
 800824e:	9a04      	ldr	r2, [sp, #16]
 8008250:	4f3f      	ldr	r7, [pc, #252]	; (8008350 <_strtod_l+0x5cc>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008256:	42b3      	cmp	r3, r6
 8008258:	d100      	bne.n	800825c <_strtod_l+0x4d8>
 800825a:	e5ce      	b.n	8007dfa <_strtod_l+0x76>
 800825c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800825e:	9804      	ldr	r0, [sp, #16]
 8008260:	f7ff f900 	bl	8007464 <_Bfree>
 8008264:	9908      	ldr	r1, [sp, #32]
 8008266:	9804      	ldr	r0, [sp, #16]
 8008268:	f7ff f8fc 	bl	8007464 <_Bfree>
 800826c:	9906      	ldr	r1, [sp, #24]
 800826e:	9804      	ldr	r0, [sp, #16]
 8008270:	f7ff f8f8 	bl	8007464 <_Bfree>
 8008274:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008276:	9804      	ldr	r0, [sp, #16]
 8008278:	f7ff f8f4 	bl	8007464 <_Bfree>
 800827c:	9905      	ldr	r1, [sp, #20]
 800827e:	9804      	ldr	r0, [sp, #16]
 8008280:	f7ff f8f0 	bl	8007464 <_Bfree>
 8008284:	e5b9      	b.n	8007dfa <_strtod_l+0x76>
 8008286:	2300      	movs	r3, #0
 8008288:	0030      	movs	r0, r6
 800828a:	0039      	movs	r1, r7
 800828c:	4d35      	ldr	r5, [pc, #212]	; (8008364 <_strtod_l+0x5e0>)
 800828e:	1124      	asrs	r4, r4, #4
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	2c01      	cmp	r4, #1
 8008294:	dc1e      	bgt.n	80082d4 <_strtod_l+0x550>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <_strtod_l+0x51a>
 800829a:	0006      	movs	r6, r0
 800829c:	000f      	movs	r7, r1
 800829e:	4b32      	ldr	r3, [pc, #200]	; (8008368 <_strtod_l+0x5e4>)
 80082a0:	9a07      	ldr	r2, [sp, #28]
 80082a2:	18ff      	adds	r7, r7, r3
 80082a4:	4b2f      	ldr	r3, [pc, #188]	; (8008364 <_strtod_l+0x5e0>)
 80082a6:	00d2      	lsls	r2, r2, #3
 80082a8:	189d      	adds	r5, r3, r2
 80082aa:	6828      	ldr	r0, [r5, #0]
 80082ac:	6869      	ldr	r1, [r5, #4]
 80082ae:	0032      	movs	r2, r6
 80082b0:	003b      	movs	r3, r7
 80082b2:	f7f9 f9dd 	bl	8001670 <__aeabi_dmul>
 80082b6:	4b26      	ldr	r3, [pc, #152]	; (8008350 <_strtod_l+0x5cc>)
 80082b8:	4a2c      	ldr	r2, [pc, #176]	; (800836c <_strtod_l+0x5e8>)
 80082ba:	0006      	movs	r6, r0
 80082bc:	400b      	ands	r3, r1
 80082be:	4293      	cmp	r3, r2
 80082c0:	d8be      	bhi.n	8008240 <_strtod_l+0x4bc>
 80082c2:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <_strtod_l+0x5ec>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d913      	bls.n	80082f0 <_strtod_l+0x56c>
 80082c8:	2601      	movs	r6, #1
 80082ca:	4f2a      	ldr	r7, [pc, #168]	; (8008374 <_strtod_l+0x5f0>)
 80082cc:	4276      	negs	r6, r6
 80082ce:	2300      	movs	r3, #0
 80082d0:	9307      	str	r3, [sp, #28]
 80082d2:	e088      	b.n	80083e6 <_strtod_l+0x662>
 80082d4:	2201      	movs	r2, #1
 80082d6:	4214      	tst	r4, r2
 80082d8:	d004      	beq.n	80082e4 <_strtod_l+0x560>
 80082da:	682a      	ldr	r2, [r5, #0]
 80082dc:	686b      	ldr	r3, [r5, #4]
 80082de:	f7f9 f9c7 	bl	8001670 <__aeabi_dmul>
 80082e2:	2301      	movs	r3, #1
 80082e4:	9a07      	ldr	r2, [sp, #28]
 80082e6:	1064      	asrs	r4, r4, #1
 80082e8:	3201      	adds	r2, #1
 80082ea:	9207      	str	r2, [sp, #28]
 80082ec:	3508      	adds	r5, #8
 80082ee:	e7d0      	b.n	8008292 <_strtod_l+0x50e>
 80082f0:	23d4      	movs	r3, #212	; 0xd4
 80082f2:	049b      	lsls	r3, r3, #18
 80082f4:	18cf      	adds	r7, r1, r3
 80082f6:	e7ea      	b.n	80082ce <_strtod_l+0x54a>
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	d0e8      	beq.n	80082ce <_strtod_l+0x54a>
 80082fc:	4264      	negs	r4, r4
 80082fe:	230f      	movs	r3, #15
 8008300:	0022      	movs	r2, r4
 8008302:	401a      	ands	r2, r3
 8008304:	421c      	tst	r4, r3
 8008306:	d00a      	beq.n	800831e <_strtod_l+0x59a>
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <_strtod_l+0x5dc>)
 800830a:	00d2      	lsls	r2, r2, #3
 800830c:	189b      	adds	r3, r3, r2
 800830e:	0030      	movs	r0, r6
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	0039      	movs	r1, r7
 8008316:	f7f8 fdb1 	bl	8000e7c <__aeabi_ddiv>
 800831a:	0006      	movs	r6, r0
 800831c:	000f      	movs	r7, r1
 800831e:	1124      	asrs	r4, r4, #4
 8008320:	d0d5      	beq.n	80082ce <_strtod_l+0x54a>
 8008322:	2c1f      	cmp	r4, #31
 8008324:	dd28      	ble.n	8008378 <_strtod_l+0x5f4>
 8008326:	2300      	movs	r3, #0
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	9306      	str	r3, [sp, #24]
 800832c:	930d      	str	r3, [sp, #52]	; 0x34
 800832e:	9308      	str	r3, [sp, #32]
 8008330:	2322      	movs	r3, #34	; 0x22
 8008332:	9a04      	ldr	r2, [sp, #16]
 8008334:	2600      	movs	r6, #0
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833a:	2700      	movs	r7, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d18d      	bne.n	800825c <_strtod_l+0x4d8>
 8008340:	e55b      	b.n	8007dfa <_strtod_l+0x76>
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	00004e1f 	.word	0x00004e1f
 8008348:	08009e51 	.word	0x08009e51
 800834c:	0800a07c 	.word	0x0800a07c
 8008350:	7ff00000 	.word	0x7ff00000
 8008354:	08009e49 	.word	0x08009e49
 8008358:	08009e80 	.word	0x08009e80
 800835c:	0800a20d 	.word	0x0800a20d
 8008360:	08009f90 	.word	0x08009f90
 8008364:	08009f68 	.word	0x08009f68
 8008368:	fcb00000 	.word	0xfcb00000
 800836c:	7ca00000 	.word	0x7ca00000
 8008370:	7c900000 	.word	0x7c900000
 8008374:	7fefffff 	.word	0x7fefffff
 8008378:	2310      	movs	r3, #16
 800837a:	0022      	movs	r2, r4
 800837c:	401a      	ands	r2, r3
 800837e:	9207      	str	r2, [sp, #28]
 8008380:	421c      	tst	r4, r3
 8008382:	d001      	beq.n	8008388 <_strtod_l+0x604>
 8008384:	335a      	adds	r3, #90	; 0x5a
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	0030      	movs	r0, r6
 800838a:	0039      	movs	r1, r7
 800838c:	2300      	movs	r3, #0
 800838e:	4dc4      	ldr	r5, [pc, #784]	; (80086a0 <_strtod_l+0x91c>)
 8008390:	2201      	movs	r2, #1
 8008392:	4214      	tst	r4, r2
 8008394:	d004      	beq.n	80083a0 <_strtod_l+0x61c>
 8008396:	682a      	ldr	r2, [r5, #0]
 8008398:	686b      	ldr	r3, [r5, #4]
 800839a:	f7f9 f969 	bl	8001670 <__aeabi_dmul>
 800839e:	2301      	movs	r3, #1
 80083a0:	1064      	asrs	r4, r4, #1
 80083a2:	3508      	adds	r5, #8
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	d1f3      	bne.n	8008390 <_strtod_l+0x60c>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <_strtod_l+0x62c>
 80083ac:	0006      	movs	r6, r0
 80083ae:	000f      	movs	r7, r1
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <_strtod_l+0x652>
 80083b6:	236b      	movs	r3, #107	; 0x6b
 80083b8:	007a      	lsls	r2, r7, #1
 80083ba:	0d52      	lsrs	r2, r2, #21
 80083bc:	0039      	movs	r1, r7
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dd08      	ble.n	80083d6 <_strtod_l+0x652>
 80083c4:	2b1f      	cmp	r3, #31
 80083c6:	dc00      	bgt.n	80083ca <_strtod_l+0x646>
 80083c8:	e121      	b.n	800860e <_strtod_l+0x88a>
 80083ca:	2600      	movs	r6, #0
 80083cc:	2b34      	cmp	r3, #52	; 0x34
 80083ce:	dc00      	bgt.n	80083d2 <_strtod_l+0x64e>
 80083d0:	e116      	b.n	8008600 <_strtod_l+0x87c>
 80083d2:	27dc      	movs	r7, #220	; 0xdc
 80083d4:	04bf      	lsls	r7, r7, #18
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	0030      	movs	r0, r6
 80083dc:	0039      	movs	r1, r7
 80083de:	f7f8 f835 	bl	800044c <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d19f      	bne.n	8008326 <_strtod_l+0x5a2>
 80083e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e8:	9a08      	ldr	r2, [sp, #32]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80083ee:	9b05      	ldr	r3, [sp, #20]
 80083f0:	9804      	ldr	r0, [sp, #16]
 80083f2:	f7ff f89f 	bl	8007534 <__s2b>
 80083f6:	900d      	str	r0, [sp, #52]	; 0x34
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d100      	bne.n	80083fe <_strtod_l+0x67a>
 80083fc:	e720      	b.n	8008240 <_strtod_l+0x4bc>
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	9906      	ldr	r1, [sp, #24]
 8008402:	17da      	asrs	r2, r3, #31
 8008404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	401a      	ands	r2, r3
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	9215      	str	r2, [sp, #84]	; 0x54
 800840e:	43db      	mvns	r3, r3
 8008410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008412:	17db      	asrs	r3, r3, #31
 8008414:	401a      	ands	r2, r3
 8008416:	2300      	movs	r3, #0
 8008418:	9218      	str	r2, [sp, #96]	; 0x60
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	9306      	str	r3, [sp, #24]
 800841e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008420:	9804      	ldr	r0, [sp, #16]
 8008422:	6859      	ldr	r1, [r3, #4]
 8008424:	f7fe ffda 	bl	80073dc <_Balloc>
 8008428:	9008      	str	r0, [sp, #32]
 800842a:	2800      	cmp	r0, #0
 800842c:	d100      	bne.n	8008430 <_strtod_l+0x6ac>
 800842e:	e70c      	b.n	800824a <_strtod_l+0x4c6>
 8008430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008432:	300c      	adds	r0, #12
 8008434:	0019      	movs	r1, r3
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	310c      	adds	r1, #12
 800843a:	3202      	adds	r2, #2
 800843c:	0092      	lsls	r2, r2, #2
 800843e:	f000 fd8b 	bl	8008f58 <memcpy>
 8008442:	ab1e      	add	r3, sp, #120	; 0x78
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	ab1d      	add	r3, sp, #116	; 0x74
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	0032      	movs	r2, r6
 800844c:	003b      	movs	r3, r7
 800844e:	9804      	ldr	r0, [sp, #16]
 8008450:	9610      	str	r6, [sp, #64]	; 0x40
 8008452:	9711      	str	r7, [sp, #68]	; 0x44
 8008454:	f7ff fbb0 	bl	8007bb8 <__d2b>
 8008458:	901c      	str	r0, [sp, #112]	; 0x70
 800845a:	2800      	cmp	r0, #0
 800845c:	d100      	bne.n	8008460 <_strtod_l+0x6dc>
 800845e:	e6f4      	b.n	800824a <_strtod_l+0x4c6>
 8008460:	2101      	movs	r1, #1
 8008462:	9804      	ldr	r0, [sp, #16]
 8008464:	f7ff f8fa 	bl	800765c <__i2b>
 8008468:	9006      	str	r0, [sp, #24]
 800846a:	2800      	cmp	r0, #0
 800846c:	d100      	bne.n	8008470 <_strtod_l+0x6ec>
 800846e:	e6ec      	b.n	800824a <_strtod_l+0x4c6>
 8008470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008474:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008476:	1ad4      	subs	r4, r2, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	db01      	blt.n	8008480 <_strtod_l+0x6fc>
 800847c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800847e:	195d      	adds	r5, r3, r5
 8008480:	9907      	ldr	r1, [sp, #28]
 8008482:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008484:	1a5b      	subs	r3, r3, r1
 8008486:	2136      	movs	r1, #54	; 0x36
 8008488:	189b      	adds	r3, r3, r2
 800848a:	1a8a      	subs	r2, r1, r2
 800848c:	4985      	ldr	r1, [pc, #532]	; (80086a4 <_strtod_l+0x920>)
 800848e:	2001      	movs	r0, #1
 8008490:	468c      	mov	ip, r1
 8008492:	2100      	movs	r1, #0
 8008494:	3b01      	subs	r3, #1
 8008496:	9114      	str	r1, [sp, #80]	; 0x50
 8008498:	9012      	str	r0, [sp, #72]	; 0x48
 800849a:	4563      	cmp	r3, ip
 800849c:	da07      	bge.n	80084ae <_strtod_l+0x72a>
 800849e:	4661      	mov	r1, ip
 80084a0:	1ac9      	subs	r1, r1, r3
 80084a2:	1a52      	subs	r2, r2, r1
 80084a4:	291f      	cmp	r1, #31
 80084a6:	dd00      	ble.n	80084aa <_strtod_l+0x726>
 80084a8:	e0b6      	b.n	8008618 <_strtod_l+0x894>
 80084aa:	4088      	lsls	r0, r1
 80084ac:	9012      	str	r0, [sp, #72]	; 0x48
 80084ae:	18ab      	adds	r3, r5, r2
 80084b0:	930c      	str	r3, [sp, #48]	; 0x30
 80084b2:	18a4      	adds	r4, r4, r2
 80084b4:	9b07      	ldr	r3, [sp, #28]
 80084b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b8:	191c      	adds	r4, r3, r4
 80084ba:	002b      	movs	r3, r5
 80084bc:	4295      	cmp	r5, r2
 80084be:	dd00      	ble.n	80084c2 <_strtod_l+0x73e>
 80084c0:	0013      	movs	r3, r2
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	dd00      	ble.n	80084c8 <_strtod_l+0x744>
 80084c6:	0023      	movs	r3, r4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dd04      	ble.n	80084d6 <_strtod_l+0x752>
 80084cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ce:	1ae4      	subs	r4, r4, r3
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	920c      	str	r2, [sp, #48]	; 0x30
 80084d4:	1aed      	subs	r5, r5, r3
 80084d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dd17      	ble.n	800850c <_strtod_l+0x788>
 80084dc:	001a      	movs	r2, r3
 80084de:	9906      	ldr	r1, [sp, #24]
 80084e0:	9804      	ldr	r0, [sp, #16]
 80084e2:	f7ff f983 	bl	80077ec <__pow5mult>
 80084e6:	9006      	str	r0, [sp, #24]
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d100      	bne.n	80084ee <_strtod_l+0x76a>
 80084ec:	e6ad      	b.n	800824a <_strtod_l+0x4c6>
 80084ee:	0001      	movs	r1, r0
 80084f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80084f2:	9804      	ldr	r0, [sp, #16]
 80084f4:	f7ff f8ca 	bl	800768c <__multiply>
 80084f8:	900e      	str	r0, [sp, #56]	; 0x38
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d100      	bne.n	8008500 <_strtod_l+0x77c>
 80084fe:	e6a4      	b.n	800824a <_strtod_l+0x4c6>
 8008500:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008502:	9804      	ldr	r0, [sp, #16]
 8008504:	f7fe ffae 	bl	8007464 <_Bfree>
 8008508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800850a:	931c      	str	r3, [sp, #112]	; 0x70
 800850c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd00      	ble.n	8008514 <_strtod_l+0x790>
 8008512:	e087      	b.n	8008624 <_strtod_l+0x8a0>
 8008514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	dd08      	ble.n	800852c <_strtod_l+0x7a8>
 800851a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800851c:	9908      	ldr	r1, [sp, #32]
 800851e:	9804      	ldr	r0, [sp, #16]
 8008520:	f7ff f964 	bl	80077ec <__pow5mult>
 8008524:	9008      	str	r0, [sp, #32]
 8008526:	2800      	cmp	r0, #0
 8008528:	d100      	bne.n	800852c <_strtod_l+0x7a8>
 800852a:	e68e      	b.n	800824a <_strtod_l+0x4c6>
 800852c:	2c00      	cmp	r4, #0
 800852e:	dd08      	ble.n	8008542 <_strtod_l+0x7be>
 8008530:	0022      	movs	r2, r4
 8008532:	9908      	ldr	r1, [sp, #32]
 8008534:	9804      	ldr	r0, [sp, #16]
 8008536:	f7ff f9b5 	bl	80078a4 <__lshift>
 800853a:	9008      	str	r0, [sp, #32]
 800853c:	2800      	cmp	r0, #0
 800853e:	d100      	bne.n	8008542 <_strtod_l+0x7be>
 8008540:	e683      	b.n	800824a <_strtod_l+0x4c6>
 8008542:	2d00      	cmp	r5, #0
 8008544:	dd08      	ble.n	8008558 <_strtod_l+0x7d4>
 8008546:	002a      	movs	r2, r5
 8008548:	9906      	ldr	r1, [sp, #24]
 800854a:	9804      	ldr	r0, [sp, #16]
 800854c:	f7ff f9aa 	bl	80078a4 <__lshift>
 8008550:	9006      	str	r0, [sp, #24]
 8008552:	2800      	cmp	r0, #0
 8008554:	d100      	bne.n	8008558 <_strtod_l+0x7d4>
 8008556:	e678      	b.n	800824a <_strtod_l+0x4c6>
 8008558:	9a08      	ldr	r2, [sp, #32]
 800855a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800855c:	9804      	ldr	r0, [sp, #16]
 800855e:	f7ff fa2b 	bl	80079b8 <__mdiff>
 8008562:	9005      	str	r0, [sp, #20]
 8008564:	2800      	cmp	r0, #0
 8008566:	d100      	bne.n	800856a <_strtod_l+0x7e6>
 8008568:	e66f      	b.n	800824a <_strtod_l+0x4c6>
 800856a:	2200      	movs	r2, #0
 800856c:	68c3      	ldr	r3, [r0, #12]
 800856e:	9906      	ldr	r1, [sp, #24]
 8008570:	60c2      	str	r2, [r0, #12]
 8008572:	930c      	str	r3, [sp, #48]	; 0x30
 8008574:	f7ff fa04 	bl	8007980 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	da5d      	bge.n	8008638 <_strtod_l+0x8b4>
 800857c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800857e:	4333      	orrs	r3, r6
 8008580:	d000      	beq.n	8008584 <_strtod_l+0x800>
 8008582:	e088      	b.n	8008696 <_strtod_l+0x912>
 8008584:	033b      	lsls	r3, r7, #12
 8008586:	d000      	beq.n	800858a <_strtod_l+0x806>
 8008588:	e085      	b.n	8008696 <_strtod_l+0x912>
 800858a:	22d6      	movs	r2, #214	; 0xd6
 800858c:	4b46      	ldr	r3, [pc, #280]	; (80086a8 <_strtod_l+0x924>)
 800858e:	04d2      	lsls	r2, r2, #19
 8008590:	403b      	ands	r3, r7
 8008592:	4293      	cmp	r3, r2
 8008594:	d97f      	bls.n	8008696 <_strtod_l+0x912>
 8008596:	9b05      	ldr	r3, [sp, #20]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <_strtod_l+0x822>
 800859e:	9b05      	ldr	r3, [sp, #20]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	dd77      	ble.n	8008696 <_strtod_l+0x912>
 80085a6:	9905      	ldr	r1, [sp, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	9804      	ldr	r0, [sp, #16]
 80085ac:	f7ff f97a 	bl	80078a4 <__lshift>
 80085b0:	9906      	ldr	r1, [sp, #24]
 80085b2:	9005      	str	r0, [sp, #20]
 80085b4:	f7ff f9e4 	bl	8007980 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dd6c      	ble.n	8008696 <_strtod_l+0x912>
 80085bc:	9907      	ldr	r1, [sp, #28]
 80085be:	003b      	movs	r3, r7
 80085c0:	4a39      	ldr	r2, [pc, #228]	; (80086a8 <_strtod_l+0x924>)
 80085c2:	2900      	cmp	r1, #0
 80085c4:	d100      	bne.n	80085c8 <_strtod_l+0x844>
 80085c6:	e094      	b.n	80086f2 <_strtod_l+0x96e>
 80085c8:	0011      	movs	r1, r2
 80085ca:	20d6      	movs	r0, #214	; 0xd6
 80085cc:	4039      	ands	r1, r7
 80085ce:	04c0      	lsls	r0, r0, #19
 80085d0:	4281      	cmp	r1, r0
 80085d2:	dd00      	ble.n	80085d6 <_strtod_l+0x852>
 80085d4:	e08d      	b.n	80086f2 <_strtod_l+0x96e>
 80085d6:	23dc      	movs	r3, #220	; 0xdc
 80085d8:	049b      	lsls	r3, r3, #18
 80085da:	4299      	cmp	r1, r3
 80085dc:	dc00      	bgt.n	80085e0 <_strtod_l+0x85c>
 80085de:	e6a7      	b.n	8008330 <_strtod_l+0x5ac>
 80085e0:	0030      	movs	r0, r6
 80085e2:	0039      	movs	r1, r7
 80085e4:	4b31      	ldr	r3, [pc, #196]	; (80086ac <_strtod_l+0x928>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	f7f9 f842 	bl	8001670 <__aeabi_dmul>
 80085ec:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <_strtod_l+0x924>)
 80085ee:	0006      	movs	r6, r0
 80085f0:	000f      	movs	r7, r1
 80085f2:	420b      	tst	r3, r1
 80085f4:	d000      	beq.n	80085f8 <_strtod_l+0x874>
 80085f6:	e631      	b.n	800825c <_strtod_l+0x4d8>
 80085f8:	2322      	movs	r3, #34	; 0x22
 80085fa:	9a04      	ldr	r2, [sp, #16]
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e62d      	b.n	800825c <_strtod_l+0x4d8>
 8008600:	234b      	movs	r3, #75	; 0x4b
 8008602:	1a9a      	subs	r2, r3, r2
 8008604:	3b4c      	subs	r3, #76	; 0x4c
 8008606:	4093      	lsls	r3, r2
 8008608:	4019      	ands	r1, r3
 800860a:	000f      	movs	r7, r1
 800860c:	e6e3      	b.n	80083d6 <_strtod_l+0x652>
 800860e:	2201      	movs	r2, #1
 8008610:	4252      	negs	r2, r2
 8008612:	409a      	lsls	r2, r3
 8008614:	4016      	ands	r6, r2
 8008616:	e6de      	b.n	80083d6 <_strtod_l+0x652>
 8008618:	4925      	ldr	r1, [pc, #148]	; (80086b0 <_strtod_l+0x92c>)
 800861a:	1acb      	subs	r3, r1, r3
 800861c:	0001      	movs	r1, r0
 800861e:	4099      	lsls	r1, r3
 8008620:	9114      	str	r1, [sp, #80]	; 0x50
 8008622:	e743      	b.n	80084ac <_strtod_l+0x728>
 8008624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008626:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008628:	9804      	ldr	r0, [sp, #16]
 800862a:	f7ff f93b 	bl	80078a4 <__lshift>
 800862e:	901c      	str	r0, [sp, #112]	; 0x70
 8008630:	2800      	cmp	r0, #0
 8008632:	d000      	beq.n	8008636 <_strtod_l+0x8b2>
 8008634:	e76e      	b.n	8008514 <_strtod_l+0x790>
 8008636:	e608      	b.n	800824a <_strtod_l+0x4c6>
 8008638:	970e      	str	r7, [sp, #56]	; 0x38
 800863a:	2800      	cmp	r0, #0
 800863c:	d177      	bne.n	800872e <_strtod_l+0x9aa>
 800863e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008640:	033b      	lsls	r3, r7, #12
 8008642:	0b1b      	lsrs	r3, r3, #12
 8008644:	2a00      	cmp	r2, #0
 8008646:	d039      	beq.n	80086bc <_strtod_l+0x938>
 8008648:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <_strtod_l+0x930>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d139      	bne.n	80086c2 <_strtod_l+0x93e>
 800864e:	2101      	movs	r1, #1
 8008650:	9b07      	ldr	r3, [sp, #28]
 8008652:	4249      	negs	r1, r1
 8008654:	0032      	movs	r2, r6
 8008656:	0008      	movs	r0, r1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <_strtod_l+0x8f0>
 800865c:	24d4      	movs	r4, #212	; 0xd4
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <_strtod_l+0x924>)
 8008660:	0008      	movs	r0, r1
 8008662:	403b      	ands	r3, r7
 8008664:	04e4      	lsls	r4, r4, #19
 8008666:	42a3      	cmp	r3, r4
 8008668:	d804      	bhi.n	8008674 <_strtod_l+0x8f0>
 800866a:	306c      	adds	r0, #108	; 0x6c
 800866c:	0d1b      	lsrs	r3, r3, #20
 800866e:	1ac3      	subs	r3, r0, r3
 8008670:	4099      	lsls	r1, r3
 8008672:	0008      	movs	r0, r1
 8008674:	4282      	cmp	r2, r0
 8008676:	d124      	bne.n	80086c2 <_strtod_l+0x93e>
 8008678:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <_strtod_l+0x934>)
 800867a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800867c:	4299      	cmp	r1, r3
 800867e:	d102      	bne.n	8008686 <_strtod_l+0x902>
 8008680:	3201      	adds	r2, #1
 8008682:	d100      	bne.n	8008686 <_strtod_l+0x902>
 8008684:	e5e1      	b.n	800824a <_strtod_l+0x4c6>
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <_strtod_l+0x924>)
 8008688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800868a:	2600      	movs	r6, #0
 800868c:	401a      	ands	r2, r3
 800868e:	0013      	movs	r3, r2
 8008690:	2280      	movs	r2, #128	; 0x80
 8008692:	0352      	lsls	r2, r2, #13
 8008694:	189f      	adds	r7, r3, r2
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1a1      	bne.n	80085e0 <_strtod_l+0x85c>
 800869c:	e5de      	b.n	800825c <_strtod_l+0x4d8>
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	0800a090 	.word	0x0800a090
 80086a4:	fffffc02 	.word	0xfffffc02
 80086a8:	7ff00000 	.word	0x7ff00000
 80086ac:	39500000 	.word	0x39500000
 80086b0:	fffffbe2 	.word	0xfffffbe2
 80086b4:	000fffff 	.word	0x000fffff
 80086b8:	7fefffff 	.word	0x7fefffff
 80086bc:	4333      	orrs	r3, r6
 80086be:	d100      	bne.n	80086c2 <_strtod_l+0x93e>
 80086c0:	e77c      	b.n	80085bc <_strtod_l+0x838>
 80086c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01d      	beq.n	8008704 <_strtod_l+0x980>
 80086c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086cc:	4213      	tst	r3, r2
 80086ce:	d0e2      	beq.n	8008696 <_strtod_l+0x912>
 80086d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086d2:	0030      	movs	r0, r6
 80086d4:	0039      	movs	r1, r7
 80086d6:	9a07      	ldr	r2, [sp, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d017      	beq.n	800870c <_strtod_l+0x988>
 80086dc:	f7ff fb3a 	bl	8007d54 <sulp>
 80086e0:	0002      	movs	r2, r0
 80086e2:	000b      	movs	r3, r1
 80086e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086e8:	f7f8 f868 	bl	80007bc <__aeabi_dadd>
 80086ec:	0006      	movs	r6, r0
 80086ee:	000f      	movs	r7, r1
 80086f0:	e7d1      	b.n	8008696 <_strtod_l+0x912>
 80086f2:	2601      	movs	r6, #1
 80086f4:	4013      	ands	r3, r2
 80086f6:	4a98      	ldr	r2, [pc, #608]	; (8008958 <_strtod_l+0xbd4>)
 80086f8:	4276      	negs	r6, r6
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	4a97      	ldr	r2, [pc, #604]	; (800895c <_strtod_l+0xbd8>)
 80086fe:	431a      	orrs	r2, r3
 8008700:	0017      	movs	r7, r2
 8008702:	e7c8      	b.n	8008696 <_strtod_l+0x912>
 8008704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008706:	4233      	tst	r3, r6
 8008708:	d0c5      	beq.n	8008696 <_strtod_l+0x912>
 800870a:	e7e1      	b.n	80086d0 <_strtod_l+0x94c>
 800870c:	f7ff fb22 	bl	8007d54 <sulp>
 8008710:	0002      	movs	r2, r0
 8008712:	000b      	movs	r3, r1
 8008714:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008716:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008718:	f7f9 fa6c 	bl	8001bf4 <__aeabi_dsub>
 800871c:	2200      	movs	r2, #0
 800871e:	2300      	movs	r3, #0
 8008720:	0006      	movs	r6, r0
 8008722:	000f      	movs	r7, r1
 8008724:	f7f7 fe92 	bl	800044c <__aeabi_dcmpeq>
 8008728:	2800      	cmp	r0, #0
 800872a:	d0b4      	beq.n	8008696 <_strtod_l+0x912>
 800872c:	e600      	b.n	8008330 <_strtod_l+0x5ac>
 800872e:	9906      	ldr	r1, [sp, #24]
 8008730:	9805      	ldr	r0, [sp, #20]
 8008732:	f7ff faa1 	bl	8007c78 <__ratio>
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	2200      	movs	r2, #0
 800873a:	05db      	lsls	r3, r3, #23
 800873c:	0004      	movs	r4, r0
 800873e:	000d      	movs	r5, r1
 8008740:	f7f7 fe94 	bl	800046c <__aeabi_dcmple>
 8008744:	2800      	cmp	r0, #0
 8008746:	d06d      	beq.n	8008824 <_strtod_l+0xaa0>
 8008748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	d000      	beq.n	8008750 <_strtod_l+0x9cc>
 800874e:	e07e      	b.n	800884e <_strtod_l+0xaca>
 8008750:	2e00      	cmp	r6, #0
 8008752:	d158      	bne.n	8008806 <_strtod_l+0xa82>
 8008754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008756:	031b      	lsls	r3, r3, #12
 8008758:	d000      	beq.n	800875c <_strtod_l+0x9d8>
 800875a:	e07f      	b.n	800885c <_strtod_l+0xad8>
 800875c:	2200      	movs	r2, #0
 800875e:	0020      	movs	r0, r4
 8008760:	0029      	movs	r1, r5
 8008762:	4b7f      	ldr	r3, [pc, #508]	; (8008960 <_strtod_l+0xbdc>)
 8008764:	f7f7 fe78 	bl	8000458 <__aeabi_dcmplt>
 8008768:	2800      	cmp	r0, #0
 800876a:	d158      	bne.n	800881e <_strtod_l+0xa9a>
 800876c:	0020      	movs	r0, r4
 800876e:	0029      	movs	r1, r5
 8008770:	2200      	movs	r2, #0
 8008772:	4b7c      	ldr	r3, [pc, #496]	; (8008964 <_strtod_l+0xbe0>)
 8008774:	f7f8 ff7c 	bl	8001670 <__aeabi_dmul>
 8008778:	0004      	movs	r4, r0
 800877a:	000d      	movs	r5, r1
 800877c:	2380      	movs	r3, #128	; 0x80
 800877e:	061b      	lsls	r3, r3, #24
 8008780:	940a      	str	r4, [sp, #40]	; 0x28
 8008782:	18eb      	adds	r3, r5, r3
 8008784:	930b      	str	r3, [sp, #44]	; 0x2c
 8008786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878a:	9212      	str	r2, [sp, #72]	; 0x48
 800878c:	9313      	str	r3, [sp, #76]	; 0x4c
 800878e:	4a76      	ldr	r2, [pc, #472]	; (8008968 <_strtod_l+0xbe4>)
 8008790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008792:	4013      	ands	r3, r2
 8008794:	9314      	str	r3, [sp, #80]	; 0x50
 8008796:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008798:	4b74      	ldr	r3, [pc, #464]	; (800896c <_strtod_l+0xbe8>)
 800879a:	429a      	cmp	r2, r3
 800879c:	d000      	beq.n	80087a0 <_strtod_l+0xa1c>
 800879e:	e091      	b.n	80088c4 <_strtod_l+0xb40>
 80087a0:	4a73      	ldr	r2, [pc, #460]	; (8008970 <_strtod_l+0xbec>)
 80087a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a4:	4694      	mov	ip, r2
 80087a6:	4463      	add	r3, ip
 80087a8:	001f      	movs	r7, r3
 80087aa:	0030      	movs	r0, r6
 80087ac:	0019      	movs	r1, r3
 80087ae:	f7ff f99b 	bl	8007ae8 <__ulp>
 80087b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b6:	f7f8 ff5b 	bl	8001670 <__aeabi_dmul>
 80087ba:	0032      	movs	r2, r6
 80087bc:	003b      	movs	r3, r7
 80087be:	f7f7 fffd 	bl	80007bc <__aeabi_dadd>
 80087c2:	4a69      	ldr	r2, [pc, #420]	; (8008968 <_strtod_l+0xbe4>)
 80087c4:	4b6b      	ldr	r3, [pc, #428]	; (8008974 <_strtod_l+0xbf0>)
 80087c6:	0006      	movs	r6, r0
 80087c8:	400a      	ands	r2, r1
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d949      	bls.n	8008862 <_strtod_l+0xade>
 80087ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087d0:	4b69      	ldr	r3, [pc, #420]	; (8008978 <_strtod_l+0xbf4>)
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d103      	bne.n	80087de <_strtod_l+0xa5a>
 80087d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087d8:	3301      	adds	r3, #1
 80087da:	d100      	bne.n	80087de <_strtod_l+0xa5a>
 80087dc:	e535      	b.n	800824a <_strtod_l+0x4c6>
 80087de:	2601      	movs	r6, #1
 80087e0:	4f65      	ldr	r7, [pc, #404]	; (8008978 <_strtod_l+0xbf4>)
 80087e2:	4276      	negs	r6, r6
 80087e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087e6:	9804      	ldr	r0, [sp, #16]
 80087e8:	f7fe fe3c 	bl	8007464 <_Bfree>
 80087ec:	9908      	ldr	r1, [sp, #32]
 80087ee:	9804      	ldr	r0, [sp, #16]
 80087f0:	f7fe fe38 	bl	8007464 <_Bfree>
 80087f4:	9906      	ldr	r1, [sp, #24]
 80087f6:	9804      	ldr	r0, [sp, #16]
 80087f8:	f7fe fe34 	bl	8007464 <_Bfree>
 80087fc:	9905      	ldr	r1, [sp, #20]
 80087fe:	9804      	ldr	r0, [sp, #16]
 8008800:	f7fe fe30 	bl	8007464 <_Bfree>
 8008804:	e60b      	b.n	800841e <_strtod_l+0x69a>
 8008806:	2e01      	cmp	r6, #1
 8008808:	d103      	bne.n	8008812 <_strtod_l+0xa8e>
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d100      	bne.n	8008812 <_strtod_l+0xa8e>
 8008810:	e58e      	b.n	8008330 <_strtod_l+0x5ac>
 8008812:	2300      	movs	r3, #0
 8008814:	4c59      	ldr	r4, [pc, #356]	; (800897c <_strtod_l+0xbf8>)
 8008816:	930a      	str	r3, [sp, #40]	; 0x28
 8008818:	940b      	str	r4, [sp, #44]	; 0x2c
 800881a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800881c:	e01c      	b.n	8008858 <_strtod_l+0xad4>
 800881e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008820:	4d50      	ldr	r5, [pc, #320]	; (8008964 <_strtod_l+0xbe0>)
 8008822:	e7ab      	b.n	800877c <_strtod_l+0x9f8>
 8008824:	2200      	movs	r2, #0
 8008826:	0020      	movs	r0, r4
 8008828:	0029      	movs	r1, r5
 800882a:	4b4e      	ldr	r3, [pc, #312]	; (8008964 <_strtod_l+0xbe0>)
 800882c:	f7f8 ff20 	bl	8001670 <__aeabi_dmul>
 8008830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008832:	0004      	movs	r4, r0
 8008834:	000b      	movs	r3, r1
 8008836:	000d      	movs	r5, r1
 8008838:	2a00      	cmp	r2, #0
 800883a:	d104      	bne.n	8008846 <_strtod_l+0xac2>
 800883c:	2280      	movs	r2, #128	; 0x80
 800883e:	0612      	lsls	r2, r2, #24
 8008840:	900a      	str	r0, [sp, #40]	; 0x28
 8008842:	188b      	adds	r3, r1, r2
 8008844:	e79e      	b.n	8008784 <_strtod_l+0xa00>
 8008846:	0002      	movs	r2, r0
 8008848:	920a      	str	r2, [sp, #40]	; 0x28
 800884a:	930b      	str	r3, [sp, #44]	; 0x2c
 800884c:	e79b      	b.n	8008786 <_strtod_l+0xa02>
 800884e:	2300      	movs	r3, #0
 8008850:	4c43      	ldr	r4, [pc, #268]	; (8008960 <_strtod_l+0xbdc>)
 8008852:	930a      	str	r3, [sp, #40]	; 0x28
 8008854:	940b      	str	r4, [sp, #44]	; 0x2c
 8008856:	2400      	movs	r4, #0
 8008858:	4d41      	ldr	r5, [pc, #260]	; (8008960 <_strtod_l+0xbdc>)
 800885a:	e794      	b.n	8008786 <_strtod_l+0xa02>
 800885c:	2300      	movs	r3, #0
 800885e:	4c47      	ldr	r4, [pc, #284]	; (800897c <_strtod_l+0xbf8>)
 8008860:	e7f7      	b.n	8008852 <_strtod_l+0xace>
 8008862:	23d4      	movs	r3, #212	; 0xd4
 8008864:	049b      	lsls	r3, r3, #18
 8008866:	18cf      	adds	r7, r1, r3
 8008868:	9b07      	ldr	r3, [sp, #28]
 800886a:	970e      	str	r7, [sp, #56]	; 0x38
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1b9      	bne.n	80087e4 <_strtod_l+0xa60>
 8008870:	4b3d      	ldr	r3, [pc, #244]	; (8008968 <_strtod_l+0xbe4>)
 8008872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008874:	403b      	ands	r3, r7
 8008876:	429a      	cmp	r2, r3
 8008878:	d1b4      	bne.n	80087e4 <_strtod_l+0xa60>
 800887a:	0020      	movs	r0, r4
 800887c:	0029      	movs	r1, r5
 800887e:	f7f7 fe31 	bl	80004e4 <__aeabi_d2lz>
 8008882:	f7f7 fe6b 	bl	800055c <__aeabi_l2d>
 8008886:	0002      	movs	r2, r0
 8008888:	000b      	movs	r3, r1
 800888a:	0020      	movs	r0, r4
 800888c:	0029      	movs	r1, r5
 800888e:	f7f9 f9b1 	bl	8001bf4 <__aeabi_dsub>
 8008892:	033b      	lsls	r3, r7, #12
 8008894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008896:	0b1b      	lsrs	r3, r3, #12
 8008898:	4333      	orrs	r3, r6
 800889a:	4313      	orrs	r3, r2
 800889c:	0004      	movs	r4, r0
 800889e:	000d      	movs	r5, r1
 80088a0:	4a37      	ldr	r2, [pc, #220]	; (8008980 <_strtod_l+0xbfc>)
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d054      	beq.n	8008950 <_strtod_l+0xbcc>
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <_strtod_l+0xc00>)
 80088a8:	f7f7 fdd6 	bl	8000458 <__aeabi_dcmplt>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d000      	beq.n	80088b2 <_strtod_l+0xb2e>
 80088b0:	e4d4      	b.n	800825c <_strtod_l+0x4d8>
 80088b2:	0020      	movs	r0, r4
 80088b4:	0029      	movs	r1, r5
 80088b6:	4a34      	ldr	r2, [pc, #208]	; (8008988 <_strtod_l+0xc04>)
 80088b8:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <_strtod_l+0xbe0>)
 80088ba:	f7f7 fde1 	bl	8000480 <__aeabi_dcmpgt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d090      	beq.n	80087e4 <_strtod_l+0xa60>
 80088c2:	e4cb      	b.n	800825c <_strtod_l+0x4d8>
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02b      	beq.n	8008922 <_strtod_l+0xb9e>
 80088ca:	23d4      	movs	r3, #212	; 0xd4
 80088cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088ce:	04db      	lsls	r3, r3, #19
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d826      	bhi.n	8008922 <_strtod_l+0xb9e>
 80088d4:	0020      	movs	r0, r4
 80088d6:	0029      	movs	r1, r5
 80088d8:	4a2c      	ldr	r2, [pc, #176]	; (800898c <_strtod_l+0xc08>)
 80088da:	4b2d      	ldr	r3, [pc, #180]	; (8008990 <_strtod_l+0xc0c>)
 80088dc:	f7f7 fdc6 	bl	800046c <__aeabi_dcmple>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d017      	beq.n	8008914 <_strtod_l+0xb90>
 80088e4:	0020      	movs	r0, r4
 80088e6:	0029      	movs	r1, r5
 80088e8:	f7f7 fdde 	bl	80004a8 <__aeabi_d2uiz>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d100      	bne.n	80088f2 <_strtod_l+0xb6e>
 80088f0:	3001      	adds	r0, #1
 80088f2:	f7f9 fd85 	bl	8002400 <__aeabi_ui2d>
 80088f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f8:	0004      	movs	r4, r0
 80088fa:	000b      	movs	r3, r1
 80088fc:	000d      	movs	r5, r1
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d122      	bne.n	8008948 <_strtod_l+0xbc4>
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	0612      	lsls	r2, r2, #24
 8008906:	188b      	adds	r3, r1, r2
 8008908:	9016      	str	r0, [sp, #88]	; 0x58
 800890a:	9317      	str	r3, [sp, #92]	; 0x5c
 800890c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800890e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008910:	9212      	str	r2, [sp, #72]	; 0x48
 8008912:	9313      	str	r3, [sp, #76]	; 0x4c
 8008914:	22d6      	movs	r2, #214	; 0xd6
 8008916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008918:	04d2      	lsls	r2, r2, #19
 800891a:	189b      	adds	r3, r3, r2
 800891c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	9313      	str	r3, [sp, #76]	; 0x4c
 8008922:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008924:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008926:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008928:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800892a:	f7ff f8dd 	bl	8007ae8 <__ulp>
 800892e:	0002      	movs	r2, r0
 8008930:	000b      	movs	r3, r1
 8008932:	0030      	movs	r0, r6
 8008934:	0039      	movs	r1, r7
 8008936:	f7f8 fe9b 	bl	8001670 <__aeabi_dmul>
 800893a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800893c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893e:	f7f7 ff3d 	bl	80007bc <__aeabi_dadd>
 8008942:	0006      	movs	r6, r0
 8008944:	000f      	movs	r7, r1
 8008946:	e78f      	b.n	8008868 <_strtod_l+0xae4>
 8008948:	0002      	movs	r2, r0
 800894a:	9216      	str	r2, [sp, #88]	; 0x58
 800894c:	9317      	str	r3, [sp, #92]	; 0x5c
 800894e:	e7dd      	b.n	800890c <_strtod_l+0xb88>
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <_strtod_l+0xc10>)
 8008952:	f7f7 fd81 	bl	8000458 <__aeabi_dcmplt>
 8008956:	e7b2      	b.n	80088be <_strtod_l+0xb3a>
 8008958:	fff00000 	.word	0xfff00000
 800895c:	000fffff 	.word	0x000fffff
 8008960:	3ff00000 	.word	0x3ff00000
 8008964:	3fe00000 	.word	0x3fe00000
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	7fe00000 	.word	0x7fe00000
 8008970:	fcb00000 	.word	0xfcb00000
 8008974:	7c9fffff 	.word	0x7c9fffff
 8008978:	7fefffff 	.word	0x7fefffff
 800897c:	bff00000 	.word	0xbff00000
 8008980:	94a03595 	.word	0x94a03595
 8008984:	3fdfffff 	.word	0x3fdfffff
 8008988:	35afe535 	.word	0x35afe535
 800898c:	ffc00000 	.word	0xffc00000
 8008990:	41dfffff 	.word	0x41dfffff
 8008994:	3fcfffff 	.word	0x3fcfffff

08008998 <_strtod_r>:
 8008998:	b510      	push	{r4, lr}
 800899a:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <_strtod_r+0xc>)
 800899c:	f7ff f9f2 	bl	8007d84 <_strtod_l>
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	20000068 	.word	0x20000068

080089a8 <_strtol_l.constprop.0>:
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	b087      	sub	sp, #28
 80089ac:	001e      	movs	r6, r3
 80089ae:	9005      	str	r0, [sp, #20]
 80089b0:	9101      	str	r1, [sp, #4]
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d048      	beq.n	8008a4a <_strtol_l.constprop.0+0xa2>
 80089b8:	000b      	movs	r3, r1
 80089ba:	2e24      	cmp	r6, #36	; 0x24
 80089bc:	d845      	bhi.n	8008a4a <_strtol_l.constprop.0+0xa2>
 80089be:	4a3b      	ldr	r2, [pc, #236]	; (8008aac <_strtol_l.constprop.0+0x104>)
 80089c0:	2108      	movs	r1, #8
 80089c2:	4694      	mov	ip, r2
 80089c4:	001a      	movs	r2, r3
 80089c6:	4660      	mov	r0, ip
 80089c8:	7814      	ldrb	r4, [r2, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	5d00      	ldrb	r0, [r0, r4]
 80089ce:	001d      	movs	r5, r3
 80089d0:	0007      	movs	r7, r0
 80089d2:	400f      	ands	r7, r1
 80089d4:	4208      	tst	r0, r1
 80089d6:	d1f5      	bne.n	80089c4 <_strtol_l.constprop.0+0x1c>
 80089d8:	2c2d      	cmp	r4, #45	; 0x2d
 80089da:	d13d      	bne.n	8008a58 <_strtol_l.constprop.0+0xb0>
 80089dc:	2701      	movs	r7, #1
 80089de:	781c      	ldrb	r4, [r3, #0]
 80089e0:	1c95      	adds	r5, r2, #2
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d05e      	beq.n	8008aa4 <_strtol_l.constprop.0+0xfc>
 80089e6:	2e10      	cmp	r6, #16
 80089e8:	d109      	bne.n	80089fe <_strtol_l.constprop.0+0x56>
 80089ea:	2c30      	cmp	r4, #48	; 0x30
 80089ec:	d107      	bne.n	80089fe <_strtol_l.constprop.0+0x56>
 80089ee:	2220      	movs	r2, #32
 80089f0:	782b      	ldrb	r3, [r5, #0]
 80089f2:	4393      	bics	r3, r2
 80089f4:	2b58      	cmp	r3, #88	; 0x58
 80089f6:	d150      	bne.n	8008a9a <_strtol_l.constprop.0+0xf2>
 80089f8:	2610      	movs	r6, #16
 80089fa:	786c      	ldrb	r4, [r5, #1]
 80089fc:	3502      	adds	r5, #2
 80089fe:	4b2c      	ldr	r3, [pc, #176]	; (8008ab0 <_strtol_l.constprop.0+0x108>)
 8008a00:	0031      	movs	r1, r6
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	0018      	movs	r0, r3
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	f7f7 fc20 	bl	800024c <__aeabi_uidivmod>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	9104      	str	r1, [sp, #16]
 8008a10:	2101      	movs	r1, #1
 8008a12:	4684      	mov	ip, r0
 8008a14:	0010      	movs	r0, r2
 8008a16:	4249      	negs	r1, r1
 8008a18:	0023      	movs	r3, r4
 8008a1a:	3b30      	subs	r3, #48	; 0x30
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d903      	bls.n	8008a28 <_strtol_l.constprop.0+0x80>
 8008a20:	3b11      	subs	r3, #17
 8008a22:	2b19      	cmp	r3, #25
 8008a24:	d81d      	bhi.n	8008a62 <_strtol_l.constprop.0+0xba>
 8008a26:	330a      	adds	r3, #10
 8008a28:	429e      	cmp	r6, r3
 8008a2a:	dd1e      	ble.n	8008a6a <_strtol_l.constprop.0+0xc2>
 8008a2c:	1c54      	adds	r4, r2, #1
 8008a2e:	d009      	beq.n	8008a44 <_strtol_l.constprop.0+0x9c>
 8008a30:	000a      	movs	r2, r1
 8008a32:	4584      	cmp	ip, r0
 8008a34:	d306      	bcc.n	8008a44 <_strtol_l.constprop.0+0x9c>
 8008a36:	d102      	bne.n	8008a3e <_strtol_l.constprop.0+0x96>
 8008a38:	9c04      	ldr	r4, [sp, #16]
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	db02      	blt.n	8008a44 <_strtol_l.constprop.0+0x9c>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4370      	muls	r0, r6
 8008a42:	1818      	adds	r0, r3, r0
 8008a44:	782c      	ldrb	r4, [r5, #0]
 8008a46:	3501      	adds	r5, #1
 8008a48:	e7e6      	b.n	8008a18 <_strtol_l.constprop.0+0x70>
 8008a4a:	f7fd fce5 	bl	8006418 <__errno>
 8008a4e:	2316      	movs	r3, #22
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	2000      	movs	r0, #0
 8008a54:	b007      	add	sp, #28
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	2c2b      	cmp	r4, #43	; 0x2b
 8008a5a:	d1c2      	bne.n	80089e2 <_strtol_l.constprop.0+0x3a>
 8008a5c:	781c      	ldrb	r4, [r3, #0]
 8008a5e:	1c95      	adds	r5, r2, #2
 8008a60:	e7bf      	b.n	80089e2 <_strtol_l.constprop.0+0x3a>
 8008a62:	0023      	movs	r3, r4
 8008a64:	3b61      	subs	r3, #97	; 0x61
 8008a66:	2b19      	cmp	r3, #25
 8008a68:	d9dd      	bls.n	8008a26 <_strtol_l.constprop.0+0x7e>
 8008a6a:	1c53      	adds	r3, r2, #1
 8008a6c:	d109      	bne.n	8008a82 <_strtol_l.constprop.0+0xda>
 8008a6e:	2322      	movs	r3, #34	; 0x22
 8008a70:	9a05      	ldr	r2, [sp, #20]
 8008a72:	9803      	ldr	r0, [sp, #12]
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0eb      	beq.n	8008a54 <_strtol_l.constprop.0+0xac>
 8008a7c:	1e6b      	subs	r3, r5, #1
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	e007      	b.n	8008a92 <_strtol_l.constprop.0+0xea>
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	d000      	beq.n	8008a88 <_strtol_l.constprop.0+0xe0>
 8008a86:	4240      	negs	r0, r0
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0e2      	beq.n	8008a54 <_strtol_l.constprop.0+0xac>
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d1f4      	bne.n	8008a7c <_strtol_l.constprop.0+0xd4>
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	9a01      	ldr	r2, [sp, #4]
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e7dc      	b.n	8008a54 <_strtol_l.constprop.0+0xac>
 8008a9a:	2430      	movs	r4, #48	; 0x30
 8008a9c:	2e00      	cmp	r6, #0
 8008a9e:	d1ae      	bne.n	80089fe <_strtol_l.constprop.0+0x56>
 8008aa0:	3608      	adds	r6, #8
 8008aa2:	e7ac      	b.n	80089fe <_strtol_l.constprop.0+0x56>
 8008aa4:	2c30      	cmp	r4, #48	; 0x30
 8008aa6:	d0a2      	beq.n	80089ee <_strtol_l.constprop.0+0x46>
 8008aa8:	260a      	movs	r6, #10
 8008aaa:	e7a8      	b.n	80089fe <_strtol_l.constprop.0+0x56>
 8008aac:	0800a0b9 	.word	0x0800a0b9
 8008ab0:	7fffffff 	.word	0x7fffffff

08008ab4 <_strtol_r>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f7ff ff77 	bl	80089a8 <_strtol_l.constprop.0>
 8008aba:	bd10      	pop	{r4, pc}

08008abc <__ssputs_r>:
 8008abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	688e      	ldr	r6, [r1, #8]
 8008ac6:	9a01      	ldr	r2, [sp, #4]
 8008ac8:	0007      	movs	r7, r0
 8008aca:	000c      	movs	r4, r1
 8008acc:	680b      	ldr	r3, [r1, #0]
 8008ace:	4296      	cmp	r6, r2
 8008ad0:	d831      	bhi.n	8008b36 <__ssputs_r+0x7a>
 8008ad2:	898a      	ldrh	r2, [r1, #12]
 8008ad4:	2190      	movs	r1, #144	; 0x90
 8008ad6:	00c9      	lsls	r1, r1, #3
 8008ad8:	420a      	tst	r2, r1
 8008ada:	d029      	beq.n	8008b30 <__ssputs_r+0x74>
 8008adc:	2003      	movs	r0, #3
 8008ade:	6921      	ldr	r1, [r4, #16]
 8008ae0:	1a5b      	subs	r3, r3, r1
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	6963      	ldr	r3, [r4, #20]
 8008ae6:	4343      	muls	r3, r0
 8008ae8:	0fdd      	lsrs	r5, r3, #31
 8008aea:	18ed      	adds	r5, r5, r3
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	9802      	ldr	r0, [sp, #8]
 8008af0:	3301      	adds	r3, #1
 8008af2:	181b      	adds	r3, r3, r0
 8008af4:	106d      	asrs	r5, r5, #1
 8008af6:	42ab      	cmp	r3, r5
 8008af8:	d900      	bls.n	8008afc <__ssputs_r+0x40>
 8008afa:	001d      	movs	r5, r3
 8008afc:	0552      	lsls	r2, r2, #21
 8008afe:	d529      	bpl.n	8008b54 <__ssputs_r+0x98>
 8008b00:	0029      	movs	r1, r5
 8008b02:	0038      	movs	r0, r7
 8008b04:	f7fe fbd8 	bl	80072b8 <_malloc_r>
 8008b08:	1e06      	subs	r6, r0, #0
 8008b0a:	d02d      	beq.n	8008b68 <__ssputs_r+0xac>
 8008b0c:	9a02      	ldr	r2, [sp, #8]
 8008b0e:	6921      	ldr	r1, [r4, #16]
 8008b10:	f000 fa22 	bl	8008f58 <memcpy>
 8008b14:	89a2      	ldrh	r2, [r4, #12]
 8008b16:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <__ssputs_r+0xc0>)
 8008b18:	401a      	ands	r2, r3
 8008b1a:	2380      	movs	r3, #128	; 0x80
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	9b02      	ldr	r3, [sp, #8]
 8008b22:	6126      	str	r6, [r4, #16]
 8008b24:	18f6      	adds	r6, r6, r3
 8008b26:	6026      	str	r6, [r4, #0]
 8008b28:	6165      	str	r5, [r4, #20]
 8008b2a:	9e01      	ldr	r6, [sp, #4]
 8008b2c:	1aed      	subs	r5, r5, r3
 8008b2e:	60a5      	str	r5, [r4, #8]
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	429e      	cmp	r6, r3
 8008b34:	d900      	bls.n	8008b38 <__ssputs_r+0x7c>
 8008b36:	9e01      	ldr	r6, [sp, #4]
 8008b38:	0032      	movs	r2, r6
 8008b3a:	9903      	ldr	r1, [sp, #12]
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	f000 f9d4 	bl	8008eea <memmove>
 8008b42:	2000      	movs	r0, #0
 8008b44:	68a3      	ldr	r3, [r4, #8]
 8008b46:	1b9b      	subs	r3, r3, r6
 8008b48:	60a3      	str	r3, [r4, #8]
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	199b      	adds	r3, r3, r6
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	b005      	add	sp, #20
 8008b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b54:	002a      	movs	r2, r5
 8008b56:	0038      	movs	r0, r7
 8008b58:	f000 fdc8 	bl	80096ec <_realloc_r>
 8008b5c:	1e06      	subs	r6, r0, #0
 8008b5e:	d1df      	bne.n	8008b20 <__ssputs_r+0x64>
 8008b60:	0038      	movs	r0, r7
 8008b62:	6921      	ldr	r1, [r4, #16]
 8008b64:	f7fe fb32 	bl	80071cc <_free_r>
 8008b68:	230c      	movs	r3, #12
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	89a2      	ldrh	r2, [r4, #12]
 8008b70:	3334      	adds	r3, #52	; 0x34
 8008b72:	4313      	orrs	r3, r2
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	4240      	negs	r0, r0
 8008b78:	e7ea      	b.n	8008b50 <__ssputs_r+0x94>
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	fffffb7f 	.word	0xfffffb7f

08008b80 <_svfiprintf_r>:
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	b0a1      	sub	sp, #132	; 0x84
 8008b84:	9003      	str	r0, [sp, #12]
 8008b86:	001d      	movs	r5, r3
 8008b88:	898b      	ldrh	r3, [r1, #12]
 8008b8a:	000f      	movs	r7, r1
 8008b8c:	0016      	movs	r6, r2
 8008b8e:	061b      	lsls	r3, r3, #24
 8008b90:	d511      	bpl.n	8008bb6 <_svfiprintf_r+0x36>
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10e      	bne.n	8008bb6 <_svfiprintf_r+0x36>
 8008b98:	2140      	movs	r1, #64	; 0x40
 8008b9a:	f7fe fb8d 	bl	80072b8 <_malloc_r>
 8008b9e:	6038      	str	r0, [r7, #0]
 8008ba0:	6138      	str	r0, [r7, #16]
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d105      	bne.n	8008bb2 <_svfiprintf_r+0x32>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	9a03      	ldr	r2, [sp, #12]
 8008baa:	3801      	subs	r0, #1
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	b021      	add	sp, #132	; 0x84
 8008bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	ac08      	add	r4, sp, #32
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	3320      	adds	r3, #32
 8008bbe:	7663      	strb	r3, [r4, #25]
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	76a3      	strb	r3, [r4, #26]
 8008bc4:	9507      	str	r5, [sp, #28]
 8008bc6:	0035      	movs	r5, r6
 8008bc8:	782b      	ldrb	r3, [r5, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <_svfiprintf_r+0x52>
 8008bce:	2b25      	cmp	r3, #37	; 0x25
 8008bd0:	d148      	bne.n	8008c64 <_svfiprintf_r+0xe4>
 8008bd2:	1bab      	subs	r3, r5, r6
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	42b5      	cmp	r5, r6
 8008bd8:	d00b      	beq.n	8008bf2 <_svfiprintf_r+0x72>
 8008bda:	0032      	movs	r2, r6
 8008bdc:	0039      	movs	r1, r7
 8008bde:	9803      	ldr	r0, [sp, #12]
 8008be0:	f7ff ff6c 	bl	8008abc <__ssputs_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d100      	bne.n	8008bea <_svfiprintf_r+0x6a>
 8008be8:	e0af      	b.n	8008d4a <_svfiprintf_r+0x1ca>
 8008bea:	6963      	ldr	r3, [r4, #20]
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	189b      	adds	r3, r3, r2
 8008bf0:	6163      	str	r3, [r4, #20]
 8008bf2:	782b      	ldrb	r3, [r5, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d100      	bne.n	8008bfa <_svfiprintf_r+0x7a>
 8008bf8:	e0a7      	b.n	8008d4a <_svfiprintf_r+0x1ca>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4252      	negs	r2, r2
 8008c00:	6062      	str	r2, [r4, #4]
 8008c02:	a904      	add	r1, sp, #16
 8008c04:	3254      	adds	r2, #84	; 0x54
 8008c06:	1852      	adds	r2, r2, r1
 8008c08:	1c6e      	adds	r6, r5, #1
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	60e3      	str	r3, [r4, #12]
 8008c0e:	60a3      	str	r3, [r4, #8]
 8008c10:	7013      	strb	r3, [r2, #0]
 8008c12:	65a3      	str	r3, [r4, #88]	; 0x58
 8008c14:	4b55      	ldr	r3, [pc, #340]	; (8008d6c <_svfiprintf_r+0x1ec>)
 8008c16:	2205      	movs	r2, #5
 8008c18:	0018      	movs	r0, r3
 8008c1a:	7831      	ldrb	r1, [r6, #0]
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	f7fd fc28 	bl	8006472 <memchr>
 8008c22:	1c75      	adds	r5, r6, #1
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d11f      	bne.n	8008c68 <_svfiprintf_r+0xe8>
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	06d3      	lsls	r3, r2, #27
 8008c2c:	d504      	bpl.n	8008c38 <_svfiprintf_r+0xb8>
 8008c2e:	2353      	movs	r3, #83	; 0x53
 8008c30:	a904      	add	r1, sp, #16
 8008c32:	185b      	adds	r3, r3, r1
 8008c34:	2120      	movs	r1, #32
 8008c36:	7019      	strb	r1, [r3, #0]
 8008c38:	0713      	lsls	r3, r2, #28
 8008c3a:	d504      	bpl.n	8008c46 <_svfiprintf_r+0xc6>
 8008c3c:	2353      	movs	r3, #83	; 0x53
 8008c3e:	a904      	add	r1, sp, #16
 8008c40:	185b      	adds	r3, r3, r1
 8008c42:	212b      	movs	r1, #43	; 0x2b
 8008c44:	7019      	strb	r1, [r3, #0]
 8008c46:	7833      	ldrb	r3, [r6, #0]
 8008c48:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4a:	d016      	beq.n	8008c7a <_svfiprintf_r+0xfa>
 8008c4c:	0035      	movs	r5, r6
 8008c4e:	2100      	movs	r1, #0
 8008c50:	200a      	movs	r0, #10
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	782a      	ldrb	r2, [r5, #0]
 8008c56:	1c6e      	adds	r6, r5, #1
 8008c58:	3a30      	subs	r2, #48	; 0x30
 8008c5a:	2a09      	cmp	r2, #9
 8008c5c:	d94e      	bls.n	8008cfc <_svfiprintf_r+0x17c>
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d111      	bne.n	8008c86 <_svfiprintf_r+0x106>
 8008c62:	e017      	b.n	8008c94 <_svfiprintf_r+0x114>
 8008c64:	3501      	adds	r5, #1
 8008c66:	e7af      	b.n	8008bc8 <_svfiprintf_r+0x48>
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	1ac0      	subs	r0, r0, r3
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4083      	lsls	r3, r0
 8008c72:	4313      	orrs	r3, r2
 8008c74:	002e      	movs	r6, r5
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	e7cc      	b.n	8008c14 <_svfiprintf_r+0x94>
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	1d19      	adds	r1, r3, #4
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	9107      	str	r1, [sp, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	db01      	blt.n	8008c8a <_svfiprintf_r+0x10a>
 8008c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c88:	e004      	b.n	8008c94 <_svfiprintf_r+0x114>
 8008c8a:	425b      	negs	r3, r3
 8008c8c:	60e3      	str	r3, [r4, #12]
 8008c8e:	2302      	movs	r3, #2
 8008c90:	4313      	orrs	r3, r2
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	782b      	ldrb	r3, [r5, #0]
 8008c96:	2b2e      	cmp	r3, #46	; 0x2e
 8008c98:	d10a      	bne.n	8008cb0 <_svfiprintf_r+0x130>
 8008c9a:	786b      	ldrb	r3, [r5, #1]
 8008c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9e:	d135      	bne.n	8008d0c <_svfiprintf_r+0x18c>
 8008ca0:	9b07      	ldr	r3, [sp, #28]
 8008ca2:	3502      	adds	r5, #2
 8008ca4:	1d1a      	adds	r2, r3, #4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	db2b      	blt.n	8008d06 <_svfiprintf_r+0x186>
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	4e2f      	ldr	r6, [pc, #188]	; (8008d70 <_svfiprintf_r+0x1f0>)
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	0030      	movs	r0, r6
 8008cb6:	7829      	ldrb	r1, [r5, #0]
 8008cb8:	f7fd fbdb 	bl	8006472 <memchr>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d006      	beq.n	8008cce <_svfiprintf_r+0x14e>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	1b80      	subs	r0, r0, r6
 8008cc4:	4083      	lsls	r3, r0
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	3501      	adds	r5, #1
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	7829      	ldrb	r1, [r5, #0]
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	4828      	ldr	r0, [pc, #160]	; (8008d74 <_svfiprintf_r+0x1f4>)
 8008cd4:	1c6e      	adds	r6, r5, #1
 8008cd6:	7621      	strb	r1, [r4, #24]
 8008cd8:	f7fd fbcb 	bl	8006472 <memchr>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d03c      	beq.n	8008d5a <_svfiprintf_r+0x1da>
 8008ce0:	4b25      	ldr	r3, [pc, #148]	; (8008d78 <_svfiprintf_r+0x1f8>)
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d125      	bne.n	8008d32 <_svfiprintf_r+0x1b2>
 8008ce6:	2207      	movs	r2, #7
 8008ce8:	9b07      	ldr	r3, [sp, #28]
 8008cea:	3307      	adds	r3, #7
 8008cec:	4393      	bics	r3, r2
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	6963      	ldr	r3, [r4, #20]
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	189b      	adds	r3, r3, r2
 8008cf8:	6163      	str	r3, [r4, #20]
 8008cfa:	e764      	b.n	8008bc6 <_svfiprintf_r+0x46>
 8008cfc:	4343      	muls	r3, r0
 8008cfe:	0035      	movs	r5, r6
 8008d00:	2101      	movs	r1, #1
 8008d02:	189b      	adds	r3, r3, r2
 8008d04:	e7a6      	b.n	8008c54 <_svfiprintf_r+0xd4>
 8008d06:	2301      	movs	r3, #1
 8008d08:	425b      	negs	r3, r3
 8008d0a:	e7d0      	b.n	8008cae <_svfiprintf_r+0x12e>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	200a      	movs	r0, #10
 8008d10:	001a      	movs	r2, r3
 8008d12:	3501      	adds	r5, #1
 8008d14:	6063      	str	r3, [r4, #4]
 8008d16:	7829      	ldrb	r1, [r5, #0]
 8008d18:	1c6e      	adds	r6, r5, #1
 8008d1a:	3930      	subs	r1, #48	; 0x30
 8008d1c:	2909      	cmp	r1, #9
 8008d1e:	d903      	bls.n	8008d28 <_svfiprintf_r+0x1a8>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0c5      	beq.n	8008cb0 <_svfiprintf_r+0x130>
 8008d24:	9209      	str	r2, [sp, #36]	; 0x24
 8008d26:	e7c3      	b.n	8008cb0 <_svfiprintf_r+0x130>
 8008d28:	4342      	muls	r2, r0
 8008d2a:	0035      	movs	r5, r6
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	1852      	adds	r2, r2, r1
 8008d30:	e7f1      	b.n	8008d16 <_svfiprintf_r+0x196>
 8008d32:	aa07      	add	r2, sp, #28
 8008d34:	9200      	str	r2, [sp, #0]
 8008d36:	0021      	movs	r1, r4
 8008d38:	003a      	movs	r2, r7
 8008d3a:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <_svfiprintf_r+0x1fc>)
 8008d3c:	9803      	ldr	r0, [sp, #12]
 8008d3e:	f7fc fc03 	bl	8005548 <_printf_float>
 8008d42:	9004      	str	r0, [sp, #16]
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	3301      	adds	r3, #1
 8008d48:	d1d3      	bne.n	8008cf2 <_svfiprintf_r+0x172>
 8008d4a:	89bb      	ldrh	r3, [r7, #12]
 8008d4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d4e:	065b      	lsls	r3, r3, #25
 8008d50:	d400      	bmi.n	8008d54 <_svfiprintf_r+0x1d4>
 8008d52:	e72c      	b.n	8008bae <_svfiprintf_r+0x2e>
 8008d54:	2001      	movs	r0, #1
 8008d56:	4240      	negs	r0, r0
 8008d58:	e729      	b.n	8008bae <_svfiprintf_r+0x2e>
 8008d5a:	aa07      	add	r2, sp, #28
 8008d5c:	9200      	str	r2, [sp, #0]
 8008d5e:	0021      	movs	r1, r4
 8008d60:	003a      	movs	r2, r7
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <_svfiprintf_r+0x1fc>)
 8008d64:	9803      	ldr	r0, [sp, #12]
 8008d66:	f7fc feb5 	bl	8005ad4 <_printf_i>
 8008d6a:	e7ea      	b.n	8008d42 <_svfiprintf_r+0x1c2>
 8008d6c:	0800a1b9 	.word	0x0800a1b9
 8008d70:	0800a1bf 	.word	0x0800a1bf
 8008d74:	0800a1c3 	.word	0x0800a1c3
 8008d78:	08005549 	.word	0x08005549
 8008d7c:	08008abd 	.word	0x08008abd

08008d80 <__sflush_r>:
 8008d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d82:	898b      	ldrh	r3, [r1, #12]
 8008d84:	0005      	movs	r5, r0
 8008d86:	000c      	movs	r4, r1
 8008d88:	071a      	lsls	r2, r3, #28
 8008d8a:	d45c      	bmi.n	8008e46 <__sflush_r+0xc6>
 8008d8c:	684a      	ldr	r2, [r1, #4]
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	dc04      	bgt.n	8008d9c <__sflush_r+0x1c>
 8008d92:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	dc01      	bgt.n	8008d9c <__sflush_r+0x1c>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d9e:	2f00      	cmp	r7, #0
 8008da0:	d0fa      	beq.n	8008d98 <__sflush_r+0x18>
 8008da2:	2200      	movs	r2, #0
 8008da4:	2080      	movs	r0, #128	; 0x80
 8008da6:	682e      	ldr	r6, [r5, #0]
 8008da8:	602a      	str	r2, [r5, #0]
 8008daa:	001a      	movs	r2, r3
 8008dac:	0140      	lsls	r0, r0, #5
 8008dae:	6a21      	ldr	r1, [r4, #32]
 8008db0:	4002      	ands	r2, r0
 8008db2:	4203      	tst	r3, r0
 8008db4:	d034      	beq.n	8008e20 <__sflush_r+0xa0>
 8008db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	075b      	lsls	r3, r3, #29
 8008dbc:	d506      	bpl.n	8008dcc <__sflush_r+0x4c>
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <__sflush_r+0x4c>
 8008dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dca:	1ac0      	subs	r0, r0, r3
 8008dcc:	0002      	movs	r2, r0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	0028      	movs	r0, r5
 8008dd2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	47b8      	blx	r7
 8008dd8:	89a2      	ldrh	r2, [r4, #12]
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	d106      	bne.n	8008dec <__sflush_r+0x6c>
 8008dde:	6829      	ldr	r1, [r5, #0]
 8008de0:	291d      	cmp	r1, #29
 8008de2:	d82c      	bhi.n	8008e3e <__sflush_r+0xbe>
 8008de4:	4b2a      	ldr	r3, [pc, #168]	; (8008e90 <__sflush_r+0x110>)
 8008de6:	410b      	asrs	r3, r1
 8008de8:	07db      	lsls	r3, r3, #31
 8008dea:	d428      	bmi.n	8008e3e <__sflush_r+0xbe>
 8008dec:	2300      	movs	r3, #0
 8008dee:	6063      	str	r3, [r4, #4]
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	04d2      	lsls	r2, r2, #19
 8008df6:	d505      	bpl.n	8008e04 <__sflush_r+0x84>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <__sflush_r+0x82>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d100      	bne.n	8008e04 <__sflush_r+0x84>
 8008e02:	6560      	str	r0, [r4, #84]	; 0x54
 8008e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e06:	602e      	str	r6, [r5, #0]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	d0c5      	beq.n	8008d98 <__sflush_r+0x18>
 8008e0c:	0023      	movs	r3, r4
 8008e0e:	3344      	adds	r3, #68	; 0x44
 8008e10:	4299      	cmp	r1, r3
 8008e12:	d002      	beq.n	8008e1a <__sflush_r+0x9a>
 8008e14:	0028      	movs	r0, r5
 8008e16:	f7fe f9d9 	bl	80071cc <_free_r>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e1e:	e7bc      	b.n	8008d9a <__sflush_r+0x1a>
 8008e20:	2301      	movs	r3, #1
 8008e22:	0028      	movs	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d1c6      	bne.n	8008db8 <__sflush_r+0x38>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c3      	beq.n	8008db8 <__sflush_r+0x38>
 8008e30:	2b1d      	cmp	r3, #29
 8008e32:	d001      	beq.n	8008e38 <__sflush_r+0xb8>
 8008e34:	2b16      	cmp	r3, #22
 8008e36:	d101      	bne.n	8008e3c <__sflush_r+0xbc>
 8008e38:	602e      	str	r6, [r5, #0]
 8008e3a:	e7ad      	b.n	8008d98 <__sflush_r+0x18>
 8008e3c:	89a2      	ldrh	r2, [r4, #12]
 8008e3e:	2340      	movs	r3, #64	; 0x40
 8008e40:	4313      	orrs	r3, r2
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	e7a9      	b.n	8008d9a <__sflush_r+0x1a>
 8008e46:	690e      	ldr	r6, [r1, #16]
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	d0a5      	beq.n	8008d98 <__sflush_r+0x18>
 8008e4c:	680f      	ldr	r7, [r1, #0]
 8008e4e:	600e      	str	r6, [r1, #0]
 8008e50:	1bba      	subs	r2, r7, r6
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	d100      	bne.n	8008e5c <__sflush_r+0xdc>
 8008e5a:	694a      	ldr	r2, [r1, #20]
 8008e5c:	60a2      	str	r2, [r4, #8]
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dd99      	ble.n	8008d98 <__sflush_r+0x18>
 8008e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e66:	0032      	movs	r2, r6
 8008e68:	001f      	movs	r7, r3
 8008e6a:	0028      	movs	r0, r5
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	6a21      	ldr	r1, [r4, #32]
 8008e70:	47b8      	blx	r7
 8008e72:	2800      	cmp	r0, #0
 8008e74:	dc06      	bgt.n	8008e84 <__sflush_r+0x104>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2001      	movs	r0, #1
 8008e7a:	89a2      	ldrh	r2, [r4, #12]
 8008e7c:	4240      	negs	r0, r0
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	e78a      	b.n	8008d9a <__sflush_r+0x1a>
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	1836      	adds	r6, r6, r0
 8008e88:	1a1b      	subs	r3, r3, r0
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	e7e7      	b.n	8008e5e <__sflush_r+0xde>
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	dfbffffe 	.word	0xdfbffffe

08008e94 <_fflush_r>:
 8008e94:	690b      	ldr	r3, [r1, #16]
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	0005      	movs	r5, r0
 8008e9a:	000c      	movs	r4, r1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <_fflush_r+0x12>
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	0028      	movs	r0, r5
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d004      	beq.n	8008eb4 <_fflush_r+0x20>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <_fflush_r+0x20>
 8008eb0:	f7fd f9b8 	bl	8006224 <__sinit>
 8008eb4:	220c      	movs	r2, #12
 8008eb6:	5ea3      	ldrsh	r3, [r4, r2]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f1      	beq.n	8008ea0 <_fflush_r+0xc>
 8008ebc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ebe:	07d2      	lsls	r2, r2, #31
 8008ec0:	d404      	bmi.n	8008ecc <_fflush_r+0x38>
 8008ec2:	059b      	lsls	r3, r3, #22
 8008ec4:	d402      	bmi.n	8008ecc <_fflush_r+0x38>
 8008ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec8:	f7fd fad1 	bl	800646e <__retarget_lock_acquire_recursive>
 8008ecc:	0028      	movs	r0, r5
 8008ece:	0021      	movs	r1, r4
 8008ed0:	f7ff ff56 	bl	8008d80 <__sflush_r>
 8008ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed6:	0005      	movs	r5, r0
 8008ed8:	07db      	lsls	r3, r3, #31
 8008eda:	d4e2      	bmi.n	8008ea2 <_fflush_r+0xe>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	059b      	lsls	r3, r3, #22
 8008ee0:	d4df      	bmi.n	8008ea2 <_fflush_r+0xe>
 8008ee2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee4:	f7fd fac4 	bl	8006470 <__retarget_lock_release_recursive>
 8008ee8:	e7db      	b.n	8008ea2 <_fflush_r+0xe>

08008eea <memmove>:
 8008eea:	b510      	push	{r4, lr}
 8008eec:	4288      	cmp	r0, r1
 8008eee:	d902      	bls.n	8008ef6 <memmove+0xc>
 8008ef0:	188b      	adds	r3, r1, r2
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	d303      	bcc.n	8008efe <memmove+0x14>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e007      	b.n	8008f0a <memmove+0x20>
 8008efa:	5c8b      	ldrb	r3, [r1, r2]
 8008efc:	5483      	strb	r3, [r0, r2]
 8008efe:	3a01      	subs	r2, #1
 8008f00:	d2fb      	bcs.n	8008efa <memmove+0x10>
 8008f02:	bd10      	pop	{r4, pc}
 8008f04:	5ccc      	ldrb	r4, [r1, r3]
 8008f06:	54c4      	strb	r4, [r0, r3]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d1fa      	bne.n	8008f04 <memmove+0x1a>
 8008f0e:	e7f8      	b.n	8008f02 <memmove+0x18>

08008f10 <strncmp>:
 8008f10:	b530      	push	{r4, r5, lr}
 8008f12:	0005      	movs	r5, r0
 8008f14:	1e10      	subs	r0, r2, #0
 8008f16:	d00b      	beq.n	8008f30 <strncmp+0x20>
 8008f18:	2400      	movs	r4, #0
 8008f1a:	3a01      	subs	r2, #1
 8008f1c:	5d2b      	ldrb	r3, [r5, r4]
 8008f1e:	5d08      	ldrb	r0, [r1, r4]
 8008f20:	4283      	cmp	r3, r0
 8008f22:	d104      	bne.n	8008f2e <strncmp+0x1e>
 8008f24:	42a2      	cmp	r2, r4
 8008f26:	d002      	beq.n	8008f2e <strncmp+0x1e>
 8008f28:	3401      	adds	r4, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f6      	bne.n	8008f1c <strncmp+0xc>
 8008f2e:	1a18      	subs	r0, r3, r0
 8008f30:	bd30      	pop	{r4, r5, pc}
	...

08008f34 <_sbrk_r>:
 8008f34:	2300      	movs	r3, #0
 8008f36:	b570      	push	{r4, r5, r6, lr}
 8008f38:	4d06      	ldr	r5, [pc, #24]	; (8008f54 <_sbrk_r+0x20>)
 8008f3a:	0004      	movs	r4, r0
 8008f3c:	0008      	movs	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f9 feee 	bl	8002d20 <_sbrk>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d103      	bne.n	8008f50 <_sbrk_r+0x1c>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d000      	beq.n	8008f50 <_sbrk_r+0x1c>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	20000450 	.word	0x20000450

08008f58 <memcpy>:
 8008f58:	2300      	movs	r3, #0
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d100      	bne.n	8008f62 <memcpy+0xa>
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	5ccc      	ldrb	r4, [r1, r3]
 8008f64:	54c4      	strb	r4, [r0, r3]
 8008f66:	3301      	adds	r3, #1
 8008f68:	e7f8      	b.n	8008f5c <memcpy+0x4>
	...

08008f6c <nan>:
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4901      	ldr	r1, [pc, #4]	; (8008f74 <nan+0x8>)
 8008f70:	4770      	bx	lr
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	7ff80000 	.word	0x7ff80000

08008f78 <__assert_func>:
 8008f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008f7a:	0014      	movs	r4, r2
 8008f7c:	001a      	movs	r2, r3
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <__assert_func+0x2c>)
 8008f80:	0005      	movs	r5, r0
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	000e      	movs	r6, r1
 8008f86:	68d8      	ldr	r0, [r3, #12]
 8008f88:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <__assert_func+0x30>)
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	d101      	bne.n	8008f92 <__assert_func+0x1a>
 8008f8e:	4b07      	ldr	r3, [pc, #28]	; (8008fac <__assert_func+0x34>)
 8008f90:	001c      	movs	r4, r3
 8008f92:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <__assert_func+0x38>)
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	9402      	str	r4, [sp, #8]
 8008f98:	002b      	movs	r3, r5
 8008f9a:	9600      	str	r6, [sp, #0]
 8008f9c:	f000 fbe2 	bl	8009764 <fiprintf>
 8008fa0:	f000 fbf0 	bl	8009784 <abort>
 8008fa4:	20000064 	.word	0x20000064
 8008fa8:	0800a1d2 	.word	0x0800a1d2
 8008fac:	0800a20d 	.word	0x0800a20d
 8008fb0:	0800a1df 	.word	0x0800a1df

08008fb4 <_calloc_r>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	0c0b      	lsrs	r3, r1, #16
 8008fb8:	0c15      	lsrs	r5, r2, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d11e      	bne.n	8008ffc <_calloc_r+0x48>
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	d10c      	bne.n	8008fdc <_calloc_r+0x28>
 8008fc2:	b289      	uxth	r1, r1
 8008fc4:	b294      	uxth	r4, r2
 8008fc6:	434c      	muls	r4, r1
 8008fc8:	0021      	movs	r1, r4
 8008fca:	f7fe f975 	bl	80072b8 <_malloc_r>
 8008fce:	1e05      	subs	r5, r0, #0
 8008fd0:	d01b      	beq.n	800900a <_calloc_r+0x56>
 8008fd2:	0022      	movs	r2, r4
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f7fd f9c5 	bl	8006364 <memset>
 8008fda:	e016      	b.n	800900a <_calloc_r+0x56>
 8008fdc:	1c2b      	adds	r3, r5, #0
 8008fde:	1c0c      	adds	r4, r1, #0
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	434a      	muls	r2, r1
 8008fe6:	b2a1      	uxth	r1, r4
 8008fe8:	b29c      	uxth	r4, r3
 8008fea:	434c      	muls	r4, r1
 8008fec:	0c13      	lsrs	r3, r2, #16
 8008fee:	18e4      	adds	r4, r4, r3
 8008ff0:	0c23      	lsrs	r3, r4, #16
 8008ff2:	d107      	bne.n	8009004 <_calloc_r+0x50>
 8008ff4:	0424      	lsls	r4, r4, #16
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	4314      	orrs	r4, r2
 8008ffa:	e7e5      	b.n	8008fc8 <_calloc_r+0x14>
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	d101      	bne.n	8009004 <_calloc_r+0x50>
 8009000:	1c14      	adds	r4, r2, #0
 8009002:	e7ed      	b.n	8008fe0 <_calloc_r+0x2c>
 8009004:	230c      	movs	r3, #12
 8009006:	2500      	movs	r5, #0
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	0028      	movs	r0, r5
 800900c:	bd70      	pop	{r4, r5, r6, pc}

0800900e <rshift>:
 800900e:	0002      	movs	r2, r0
 8009010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009012:	6904      	ldr	r4, [r0, #16]
 8009014:	114b      	asrs	r3, r1, #5
 8009016:	b085      	sub	sp, #20
 8009018:	3214      	adds	r2, #20
 800901a:	9302      	str	r3, [sp, #8]
 800901c:	114d      	asrs	r5, r1, #5
 800901e:	0013      	movs	r3, r2
 8009020:	42ac      	cmp	r4, r5
 8009022:	dd32      	ble.n	800908a <rshift+0x7c>
 8009024:	261f      	movs	r6, #31
 8009026:	000f      	movs	r7, r1
 8009028:	114b      	asrs	r3, r1, #5
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	00a5      	lsls	r5, r4, #2
 800902e:	18d3      	adds	r3, r2, r3
 8009030:	4037      	ands	r7, r6
 8009032:	1955      	adds	r5, r2, r5
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	9701      	str	r7, [sp, #4]
 8009038:	4231      	tst	r1, r6
 800903a:	d10d      	bne.n	8009058 <rshift+0x4a>
 800903c:	0016      	movs	r6, r2
 800903e:	0019      	movs	r1, r3
 8009040:	428d      	cmp	r5, r1
 8009042:	d836      	bhi.n	80090b2 <rshift+0xa4>
 8009044:	9900      	ldr	r1, [sp, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	3903      	subs	r1, #3
 800904a:	428d      	cmp	r5, r1
 800904c:	d302      	bcc.n	8009054 <rshift+0x46>
 800904e:	9b02      	ldr	r3, [sp, #8]
 8009050:	1ae4      	subs	r4, r4, r3
 8009052:	00a3      	lsls	r3, r4, #2
 8009054:	18d3      	adds	r3, r2, r3
 8009056:	e018      	b.n	800908a <rshift+0x7c>
 8009058:	2120      	movs	r1, #32
 800905a:	9e01      	ldr	r6, [sp, #4]
 800905c:	9f01      	ldr	r7, [sp, #4]
 800905e:	1b89      	subs	r1, r1, r6
 8009060:	9e00      	ldr	r6, [sp, #0]
 8009062:	9103      	str	r1, [sp, #12]
 8009064:	ce02      	ldmia	r6!, {r1}
 8009066:	4694      	mov	ip, r2
 8009068:	40f9      	lsrs	r1, r7
 800906a:	42b5      	cmp	r5, r6
 800906c:	d816      	bhi.n	800909c <rshift+0x8e>
 800906e:	9e00      	ldr	r6, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	3601      	adds	r6, #1
 8009074:	42b5      	cmp	r5, r6
 8009076:	d303      	bcc.n	8009080 <rshift+0x72>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	1ae3      	subs	r3, r4, r3
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	3b04      	subs	r3, #4
 8009080:	18d3      	adds	r3, r2, r3
 8009082:	6019      	str	r1, [r3, #0]
 8009084:	2900      	cmp	r1, #0
 8009086:	d000      	beq.n	800908a <rshift+0x7c>
 8009088:	3304      	adds	r3, #4
 800908a:	1a99      	subs	r1, r3, r2
 800908c:	1089      	asrs	r1, r1, #2
 800908e:	6101      	str	r1, [r0, #16]
 8009090:	4293      	cmp	r3, r2
 8009092:	d101      	bne.n	8009098 <rshift+0x8a>
 8009094:	2300      	movs	r3, #0
 8009096:	6143      	str	r3, [r0, #20]
 8009098:	b005      	add	sp, #20
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909c:	6837      	ldr	r7, [r6, #0]
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	409f      	lsls	r7, r3
 80090a2:	430f      	orrs	r7, r1
 80090a4:	4661      	mov	r1, ip
 80090a6:	c180      	stmia	r1!, {r7}
 80090a8:	468c      	mov	ip, r1
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	ce02      	ldmia	r6!, {r1}
 80090ae:	40d9      	lsrs	r1, r3
 80090b0:	e7db      	b.n	800906a <rshift+0x5c>
 80090b2:	c980      	ldmia	r1!, {r7}
 80090b4:	c680      	stmia	r6!, {r7}
 80090b6:	e7c3      	b.n	8009040 <rshift+0x32>

080090b8 <__hexdig_fun>:
 80090b8:	0002      	movs	r2, r0
 80090ba:	3a30      	subs	r2, #48	; 0x30
 80090bc:	0003      	movs	r3, r0
 80090be:	2a09      	cmp	r2, #9
 80090c0:	d802      	bhi.n	80090c8 <__hexdig_fun+0x10>
 80090c2:	3b20      	subs	r3, #32
 80090c4:	b2d8      	uxtb	r0, r3
 80090c6:	4770      	bx	lr
 80090c8:	0002      	movs	r2, r0
 80090ca:	3a61      	subs	r2, #97	; 0x61
 80090cc:	2a05      	cmp	r2, #5
 80090ce:	d801      	bhi.n	80090d4 <__hexdig_fun+0x1c>
 80090d0:	3b47      	subs	r3, #71	; 0x47
 80090d2:	e7f7      	b.n	80090c4 <__hexdig_fun+0xc>
 80090d4:	001a      	movs	r2, r3
 80090d6:	3a41      	subs	r2, #65	; 0x41
 80090d8:	2000      	movs	r0, #0
 80090da:	2a05      	cmp	r2, #5
 80090dc:	d8f3      	bhi.n	80090c6 <__hexdig_fun+0xe>
 80090de:	3b27      	subs	r3, #39	; 0x27
 80090e0:	e7f0      	b.n	80090c4 <__hexdig_fun+0xc>
	...

080090e4 <__gethex>:
 80090e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e6:	b089      	sub	sp, #36	; 0x24
 80090e8:	9307      	str	r3, [sp, #28]
 80090ea:	2302      	movs	r3, #2
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	680a      	ldr	r2, [r1, #0]
 80090f0:	425b      	negs	r3, r3
 80090f2:	9003      	str	r0, [sp, #12]
 80090f4:	9106      	str	r1, [sp, #24]
 80090f6:	1c96      	adds	r6, r2, #2
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	199a      	adds	r2, r3, r6
 80090fc:	9600      	str	r6, [sp, #0]
 80090fe:	9205      	str	r2, [sp, #20]
 8009100:	9a00      	ldr	r2, [sp, #0]
 8009102:	3601      	adds	r6, #1
 8009104:	7810      	ldrb	r0, [r2, #0]
 8009106:	2830      	cmp	r0, #48	; 0x30
 8009108:	d0f7      	beq.n	80090fa <__gethex+0x16>
 800910a:	f7ff ffd5 	bl	80090b8 <__hexdig_fun>
 800910e:	2300      	movs	r3, #0
 8009110:	001d      	movs	r5, r3
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	4298      	cmp	r0, r3
 8009116:	d11d      	bne.n	8009154 <__gethex+0x70>
 8009118:	2201      	movs	r2, #1
 800911a:	49a6      	ldr	r1, [pc, #664]	; (80093b4 <__gethex+0x2d0>)
 800911c:	9800      	ldr	r0, [sp, #0]
 800911e:	f7ff fef7 	bl	8008f10 <strncmp>
 8009122:	0007      	movs	r7, r0
 8009124:	42a8      	cmp	r0, r5
 8009126:	d169      	bne.n	80091fc <__gethex+0x118>
 8009128:	9b00      	ldr	r3, [sp, #0]
 800912a:	0034      	movs	r4, r6
 800912c:	7858      	ldrb	r0, [r3, #1]
 800912e:	f7ff ffc3 	bl	80090b8 <__hexdig_fun>
 8009132:	2301      	movs	r3, #1
 8009134:	9302      	str	r3, [sp, #8]
 8009136:	42a8      	cmp	r0, r5
 8009138:	d02f      	beq.n	800919a <__gethex+0xb6>
 800913a:	9600      	str	r6, [sp, #0]
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	7818      	ldrb	r0, [r3, #0]
 8009140:	2830      	cmp	r0, #48	; 0x30
 8009142:	d009      	beq.n	8009158 <__gethex+0x74>
 8009144:	f7ff ffb8 	bl	80090b8 <__hexdig_fun>
 8009148:	4242      	negs	r2, r0
 800914a:	4142      	adcs	r2, r0
 800914c:	2301      	movs	r3, #1
 800914e:	0035      	movs	r5, r6
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	9c00      	ldr	r4, [sp, #0]
 8009156:	e004      	b.n	8009162 <__gethex+0x7e>
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	3301      	adds	r3, #1
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	e7ed      	b.n	800913c <__gethex+0x58>
 8009160:	3401      	adds	r4, #1
 8009162:	7820      	ldrb	r0, [r4, #0]
 8009164:	f7ff ffa8 	bl	80090b8 <__hexdig_fun>
 8009168:	1e07      	subs	r7, r0, #0
 800916a:	d1f9      	bne.n	8009160 <__gethex+0x7c>
 800916c:	2201      	movs	r2, #1
 800916e:	0020      	movs	r0, r4
 8009170:	4990      	ldr	r1, [pc, #576]	; (80093b4 <__gethex+0x2d0>)
 8009172:	f7ff fecd 	bl	8008f10 <strncmp>
 8009176:	2800      	cmp	r0, #0
 8009178:	d10d      	bne.n	8009196 <__gethex+0xb2>
 800917a:	2d00      	cmp	r5, #0
 800917c:	d106      	bne.n	800918c <__gethex+0xa8>
 800917e:	3401      	adds	r4, #1
 8009180:	0025      	movs	r5, r4
 8009182:	7820      	ldrb	r0, [r4, #0]
 8009184:	f7ff ff98 	bl	80090b8 <__hexdig_fun>
 8009188:	2800      	cmp	r0, #0
 800918a:	d102      	bne.n	8009192 <__gethex+0xae>
 800918c:	1b2d      	subs	r5, r5, r4
 800918e:	00af      	lsls	r7, r5, #2
 8009190:	e003      	b.n	800919a <__gethex+0xb6>
 8009192:	3401      	adds	r4, #1
 8009194:	e7f5      	b.n	8009182 <__gethex+0x9e>
 8009196:	2d00      	cmp	r5, #0
 8009198:	d1f8      	bne.n	800918c <__gethex+0xa8>
 800919a:	2220      	movs	r2, #32
 800919c:	7823      	ldrb	r3, [r4, #0]
 800919e:	0026      	movs	r6, r4
 80091a0:	4393      	bics	r3, r2
 80091a2:	2b50      	cmp	r3, #80	; 0x50
 80091a4:	d11d      	bne.n	80091e2 <__gethex+0xfe>
 80091a6:	7863      	ldrb	r3, [r4, #1]
 80091a8:	2b2b      	cmp	r3, #43	; 0x2b
 80091aa:	d02c      	beq.n	8009206 <__gethex+0x122>
 80091ac:	2b2d      	cmp	r3, #45	; 0x2d
 80091ae:	d02e      	beq.n	800920e <__gethex+0x12a>
 80091b0:	2300      	movs	r3, #0
 80091b2:	1c66      	adds	r6, r4, #1
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	7830      	ldrb	r0, [r6, #0]
 80091b8:	f7ff ff7e 	bl	80090b8 <__hexdig_fun>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b18      	cmp	r3, #24
 80091c2:	d82b      	bhi.n	800921c <__gethex+0x138>
 80091c4:	3810      	subs	r0, #16
 80091c6:	0005      	movs	r5, r0
 80091c8:	7870      	ldrb	r0, [r6, #1]
 80091ca:	f7ff ff75 	bl	80090b8 <__hexdig_fun>
 80091ce:	1e43      	subs	r3, r0, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	3601      	adds	r6, #1
 80091d4:	2b18      	cmp	r3, #24
 80091d6:	d91c      	bls.n	8009212 <__gethex+0x12e>
 80091d8:	9b04      	ldr	r3, [sp, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d000      	beq.n	80091e0 <__gethex+0xfc>
 80091de:	426d      	negs	r5, r5
 80091e0:	197f      	adds	r7, r7, r5
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	601e      	str	r6, [r3, #0]
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d019      	beq.n	8009220 <__gethex+0x13c>
 80091ec:	2600      	movs	r6, #0
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	42b3      	cmp	r3, r6
 80091f2:	d100      	bne.n	80091f6 <__gethex+0x112>
 80091f4:	3606      	adds	r6, #6
 80091f6:	0030      	movs	r0, r6
 80091f8:	b009      	add	sp, #36	; 0x24
 80091fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fc:	2301      	movs	r3, #1
 80091fe:	2700      	movs	r7, #0
 8009200:	9c00      	ldr	r4, [sp, #0]
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	e7c9      	b.n	800919a <__gethex+0xb6>
 8009206:	2300      	movs	r3, #0
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	1ca6      	adds	r6, r4, #2
 800920c:	e7d3      	b.n	80091b6 <__gethex+0xd2>
 800920e:	2301      	movs	r3, #1
 8009210:	e7fa      	b.n	8009208 <__gethex+0x124>
 8009212:	230a      	movs	r3, #10
 8009214:	435d      	muls	r5, r3
 8009216:	182d      	adds	r5, r5, r0
 8009218:	3d10      	subs	r5, #16
 800921a:	e7d5      	b.n	80091c8 <__gethex+0xe4>
 800921c:	0026      	movs	r6, r4
 800921e:	e7e0      	b.n	80091e2 <__gethex+0xfe>
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	9902      	ldr	r1, [sp, #8]
 8009224:	1ae3      	subs	r3, r4, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	2b07      	cmp	r3, #7
 800922a:	dc0a      	bgt.n	8009242 <__gethex+0x15e>
 800922c:	9803      	ldr	r0, [sp, #12]
 800922e:	f7fe f8d5 	bl	80073dc <_Balloc>
 8009232:	1e05      	subs	r5, r0, #0
 8009234:	d108      	bne.n	8009248 <__gethex+0x164>
 8009236:	002a      	movs	r2, r5
 8009238:	21e4      	movs	r1, #228	; 0xe4
 800923a:	4b5f      	ldr	r3, [pc, #380]	; (80093b8 <__gethex+0x2d4>)
 800923c:	485f      	ldr	r0, [pc, #380]	; (80093bc <__gethex+0x2d8>)
 800923e:	f7ff fe9b 	bl	8008f78 <__assert_func>
 8009242:	3101      	adds	r1, #1
 8009244:	105b      	asrs	r3, r3, #1
 8009246:	e7ef      	b.n	8009228 <__gethex+0x144>
 8009248:	0003      	movs	r3, r0
 800924a:	3314      	adds	r3, #20
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	9305      	str	r3, [sp, #20]
 8009250:	2300      	movs	r3, #0
 8009252:	001e      	movs	r6, r3
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	42a3      	cmp	r3, r4
 800925a:	d33f      	bcc.n	80092dc <__gethex+0x1f8>
 800925c:	9c05      	ldr	r4, [sp, #20]
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	c440      	stmia	r4!, {r6}
 8009262:	1ae4      	subs	r4, r4, r3
 8009264:	10a4      	asrs	r4, r4, #2
 8009266:	0030      	movs	r0, r6
 8009268:	612c      	str	r4, [r5, #16]
 800926a:	f7fe f9af 	bl	80075cc <__hi0bits>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	0164      	lsls	r4, r4, #5
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	1a26      	subs	r6, r4, r0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	429e      	cmp	r6, r3
 800927a:	dd51      	ble.n	8009320 <__gethex+0x23c>
 800927c:	1af6      	subs	r6, r6, r3
 800927e:	0031      	movs	r1, r6
 8009280:	0028      	movs	r0, r5
 8009282:	f7fe fd43 	bl	8007d0c <__any_on>
 8009286:	1e04      	subs	r4, r0, #0
 8009288:	d016      	beq.n	80092b8 <__gethex+0x1d4>
 800928a:	2401      	movs	r4, #1
 800928c:	231f      	movs	r3, #31
 800928e:	0020      	movs	r0, r4
 8009290:	1e72      	subs	r2, r6, #1
 8009292:	4013      	ands	r3, r2
 8009294:	4098      	lsls	r0, r3
 8009296:	0003      	movs	r3, r0
 8009298:	1151      	asrs	r1, r2, #5
 800929a:	9802      	ldr	r0, [sp, #8]
 800929c:	0089      	lsls	r1, r1, #2
 800929e:	5809      	ldr	r1, [r1, r0]
 80092a0:	4219      	tst	r1, r3
 80092a2:	d009      	beq.n	80092b8 <__gethex+0x1d4>
 80092a4:	42a2      	cmp	r2, r4
 80092a6:	dd06      	ble.n	80092b6 <__gethex+0x1d2>
 80092a8:	0028      	movs	r0, r5
 80092aa:	1eb1      	subs	r1, r6, #2
 80092ac:	f7fe fd2e 	bl	8007d0c <__any_on>
 80092b0:	3402      	adds	r4, #2
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d100      	bne.n	80092b8 <__gethex+0x1d4>
 80092b6:	2402      	movs	r4, #2
 80092b8:	0031      	movs	r1, r6
 80092ba:	0028      	movs	r0, r5
 80092bc:	f7ff fea7 	bl	800900e <rshift>
 80092c0:	19bf      	adds	r7, r7, r6
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	42bb      	cmp	r3, r7
 80092c8:	da3a      	bge.n	8009340 <__gethex+0x25c>
 80092ca:	0029      	movs	r1, r5
 80092cc:	9803      	ldr	r0, [sp, #12]
 80092ce:	f7fe f8c9 	bl	8007464 <_Bfree>
 80092d2:	2300      	movs	r3, #0
 80092d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d6:	26a3      	movs	r6, #163	; 0xa3
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	e78c      	b.n	80091f6 <__gethex+0x112>
 80092dc:	3c01      	subs	r4, #1
 80092de:	7823      	ldrb	r3, [r4, #0]
 80092e0:	2b2e      	cmp	r3, #46	; 0x2e
 80092e2:	d012      	beq.n	800930a <__gethex+0x226>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d104      	bne.n	80092f4 <__gethex+0x210>
 80092ea:	9b05      	ldr	r3, [sp, #20]
 80092ec:	c340      	stmia	r3!, {r6}
 80092ee:	2600      	movs	r6, #0
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	9604      	str	r6, [sp, #16]
 80092f4:	7820      	ldrb	r0, [r4, #0]
 80092f6:	f7ff fedf 	bl	80090b8 <__hexdig_fun>
 80092fa:	230f      	movs	r3, #15
 80092fc:	4018      	ands	r0, r3
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	4098      	lsls	r0, r3
 8009302:	3304      	adds	r3, #4
 8009304:	4306      	orrs	r6, r0
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	e7a5      	b.n	8009256 <__gethex+0x172>
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	42a3      	cmp	r3, r4
 800930e:	d8e9      	bhi.n	80092e4 <__gethex+0x200>
 8009310:	2201      	movs	r2, #1
 8009312:	0020      	movs	r0, r4
 8009314:	4927      	ldr	r1, [pc, #156]	; (80093b4 <__gethex+0x2d0>)
 8009316:	f7ff fdfb 	bl	8008f10 <strncmp>
 800931a:	2800      	cmp	r0, #0
 800931c:	d1e2      	bne.n	80092e4 <__gethex+0x200>
 800931e:	e79a      	b.n	8009256 <__gethex+0x172>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	2400      	movs	r4, #0
 8009324:	429e      	cmp	r6, r3
 8009326:	dacc      	bge.n	80092c2 <__gethex+0x1de>
 8009328:	1b9e      	subs	r6, r3, r6
 800932a:	0029      	movs	r1, r5
 800932c:	0032      	movs	r2, r6
 800932e:	9803      	ldr	r0, [sp, #12]
 8009330:	f7fe fab8 	bl	80078a4 <__lshift>
 8009334:	0003      	movs	r3, r0
 8009336:	3314      	adds	r3, #20
 8009338:	0005      	movs	r5, r0
 800933a:	1bbf      	subs	r7, r7, r6
 800933c:	9302      	str	r3, [sp, #8]
 800933e:	e7c0      	b.n	80092c2 <__gethex+0x1de>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	685e      	ldr	r6, [r3, #4]
 8009344:	42be      	cmp	r6, r7
 8009346:	dd70      	ble.n	800942a <__gethex+0x346>
 8009348:	9b00      	ldr	r3, [sp, #0]
 800934a:	1bf6      	subs	r6, r6, r7
 800934c:	42b3      	cmp	r3, r6
 800934e:	dc37      	bgt.n	80093c0 <__gethex+0x2dc>
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d024      	beq.n	80093a2 <__gethex+0x2be>
 8009358:	2b03      	cmp	r3, #3
 800935a:	d026      	beq.n	80093aa <__gethex+0x2c6>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d117      	bne.n	8009390 <__gethex+0x2ac>
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	42b3      	cmp	r3, r6
 8009364:	d114      	bne.n	8009390 <__gethex+0x2ac>
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10b      	bne.n	8009382 <__gethex+0x29e>
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	9a07      	ldr	r2, [sp, #28]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2662      	movs	r6, #98	; 0x62
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	2301      	movs	r3, #1
 8009376:	9a02      	ldr	r2, [sp, #8]
 8009378:	612b      	str	r3, [r5, #16]
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800937e:	601d      	str	r5, [r3, #0]
 8009380:	e739      	b.n	80091f6 <__gethex+0x112>
 8009382:	9900      	ldr	r1, [sp, #0]
 8009384:	0028      	movs	r0, r5
 8009386:	3901      	subs	r1, #1
 8009388:	f7fe fcc0 	bl	8007d0c <__any_on>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1ec      	bne.n	800936a <__gethex+0x286>
 8009390:	0029      	movs	r1, r5
 8009392:	9803      	ldr	r0, [sp, #12]
 8009394:	f7fe f866 	bl	8007464 <_Bfree>
 8009398:	2300      	movs	r3, #0
 800939a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939c:	2650      	movs	r6, #80	; 0x50
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e729      	b.n	80091f6 <__gethex+0x112>
 80093a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f3      	bne.n	8009390 <__gethex+0x2ac>
 80093a8:	e7df      	b.n	800936a <__gethex+0x286>
 80093aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1dc      	bne.n	800936a <__gethex+0x286>
 80093b0:	e7ee      	b.n	8009390 <__gethex+0x2ac>
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	0800a064 	.word	0x0800a064
 80093b8:	08009ef9 	.word	0x08009ef9
 80093bc:	0800a20e 	.word	0x0800a20e
 80093c0:	1e77      	subs	r7, r6, #1
 80093c2:	2c00      	cmp	r4, #0
 80093c4:	d12f      	bne.n	8009426 <__gethex+0x342>
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	d004      	beq.n	80093d4 <__gethex+0x2f0>
 80093ca:	0039      	movs	r1, r7
 80093cc:	0028      	movs	r0, r5
 80093ce:	f7fe fc9d 	bl	8007d0c <__any_on>
 80093d2:	0004      	movs	r4, r0
 80093d4:	231f      	movs	r3, #31
 80093d6:	117a      	asrs	r2, r7, #5
 80093d8:	401f      	ands	r7, r3
 80093da:	3b1e      	subs	r3, #30
 80093dc:	40bb      	lsls	r3, r7
 80093de:	9902      	ldr	r1, [sp, #8]
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	5852      	ldr	r2, [r2, r1]
 80093e4:	421a      	tst	r2, r3
 80093e6:	d001      	beq.n	80093ec <__gethex+0x308>
 80093e8:	2302      	movs	r3, #2
 80093ea:	431c      	orrs	r4, r3
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	0031      	movs	r1, r6
 80093f0:	1b9b      	subs	r3, r3, r6
 80093f2:	2602      	movs	r6, #2
 80093f4:	0028      	movs	r0, r5
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	f7ff fe09 	bl	800900e <rshift>
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	685f      	ldr	r7, [r3, #4]
 8009400:	2c00      	cmp	r4, #0
 8009402:	d041      	beq.n	8009488 <__gethex+0x3a4>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d010      	beq.n	800942e <__gethex+0x34a>
 800940c:	2b03      	cmp	r3, #3
 800940e:	d012      	beq.n	8009436 <__gethex+0x352>
 8009410:	2b01      	cmp	r3, #1
 8009412:	d106      	bne.n	8009422 <__gethex+0x33e>
 8009414:	07a2      	lsls	r2, r4, #30
 8009416:	d504      	bpl.n	8009422 <__gethex+0x33e>
 8009418:	9a02      	ldr	r2, [sp, #8]
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	4314      	orrs	r4, r2
 800941e:	421c      	tst	r4, r3
 8009420:	d10c      	bne.n	800943c <__gethex+0x358>
 8009422:	2310      	movs	r3, #16
 8009424:	e02f      	b.n	8009486 <__gethex+0x3a2>
 8009426:	2401      	movs	r4, #1
 8009428:	e7d4      	b.n	80093d4 <__gethex+0x2f0>
 800942a:	2601      	movs	r6, #1
 800942c:	e7e8      	b.n	8009400 <__gethex+0x31c>
 800942e:	2301      	movs	r3, #1
 8009430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	930f      	str	r3, [sp, #60]	; 0x3c
 8009436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0f2      	beq.n	8009422 <__gethex+0x33e>
 800943c:	692b      	ldr	r3, [r5, #16]
 800943e:	2000      	movs	r0, #0
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	002b      	movs	r3, r5
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	3314      	adds	r3, #20
 800944c:	1899      	adds	r1, r3, r2
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	1c54      	adds	r4, r2, #1
 8009452:	d01e      	beq.n	8009492 <__gethex+0x3ae>
 8009454:	3201      	adds	r2, #1
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	002b      	movs	r3, r5
 800945a:	3314      	adds	r3, #20
 800945c:	2e02      	cmp	r6, #2
 800945e:	d141      	bne.n	80094e4 <__gethex+0x400>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	9900      	ldr	r1, [sp, #0]
 8009464:	6812      	ldr	r2, [r2, #0]
 8009466:	3a01      	subs	r2, #1
 8009468:	428a      	cmp	r2, r1
 800946a:	d10b      	bne.n	8009484 <__gethex+0x3a0>
 800946c:	221f      	movs	r2, #31
 800946e:	9800      	ldr	r0, [sp, #0]
 8009470:	1149      	asrs	r1, r1, #5
 8009472:	4002      	ands	r2, r0
 8009474:	2001      	movs	r0, #1
 8009476:	0004      	movs	r4, r0
 8009478:	4094      	lsls	r4, r2
 800947a:	0089      	lsls	r1, r1, #2
 800947c:	58cb      	ldr	r3, [r1, r3]
 800947e:	4223      	tst	r3, r4
 8009480:	d000      	beq.n	8009484 <__gethex+0x3a0>
 8009482:	2601      	movs	r6, #1
 8009484:	2320      	movs	r3, #32
 8009486:	431e      	orrs	r6, r3
 8009488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948a:	601d      	str	r5, [r3, #0]
 800948c:	9b07      	ldr	r3, [sp, #28]
 800948e:	601f      	str	r7, [r3, #0]
 8009490:	e6b1      	b.n	80091f6 <__gethex+0x112>
 8009492:	c301      	stmia	r3!, {r0}
 8009494:	4299      	cmp	r1, r3
 8009496:	d8da      	bhi.n	800944e <__gethex+0x36a>
 8009498:	68ab      	ldr	r3, [r5, #8]
 800949a:	9a02      	ldr	r2, [sp, #8]
 800949c:	429a      	cmp	r2, r3
 800949e:	db18      	blt.n	80094d2 <__gethex+0x3ee>
 80094a0:	6869      	ldr	r1, [r5, #4]
 80094a2:	9803      	ldr	r0, [sp, #12]
 80094a4:	3101      	adds	r1, #1
 80094a6:	f7fd ff99 	bl	80073dc <_Balloc>
 80094aa:	1e04      	subs	r4, r0, #0
 80094ac:	d104      	bne.n	80094b8 <__gethex+0x3d4>
 80094ae:	0022      	movs	r2, r4
 80094b0:	2184      	movs	r1, #132	; 0x84
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <__gethex+0x440>)
 80094b4:	481c      	ldr	r0, [pc, #112]	; (8009528 <__gethex+0x444>)
 80094b6:	e6c2      	b.n	800923e <__gethex+0x15a>
 80094b8:	0029      	movs	r1, r5
 80094ba:	692a      	ldr	r2, [r5, #16]
 80094bc:	310c      	adds	r1, #12
 80094be:	3202      	adds	r2, #2
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	300c      	adds	r0, #12
 80094c4:	f7ff fd48 	bl	8008f58 <memcpy>
 80094c8:	0029      	movs	r1, r5
 80094ca:	9803      	ldr	r0, [sp, #12]
 80094cc:	f7fd ffca 	bl	8007464 <_Bfree>
 80094d0:	0025      	movs	r5, r4
 80094d2:	692b      	ldr	r3, [r5, #16]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	612a      	str	r2, [r5, #16]
 80094d8:	2201      	movs	r2, #1
 80094da:	3304      	adds	r3, #4
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	18eb      	adds	r3, r5, r3
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	e7b9      	b.n	8009458 <__gethex+0x374>
 80094e4:	692a      	ldr	r2, [r5, #16]
 80094e6:	9902      	ldr	r1, [sp, #8]
 80094e8:	428a      	cmp	r2, r1
 80094ea:	dd09      	ble.n	8009500 <__gethex+0x41c>
 80094ec:	2101      	movs	r1, #1
 80094ee:	0028      	movs	r0, r5
 80094f0:	f7ff fd8d 	bl	800900e <rshift>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	3701      	adds	r7, #1
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	42bb      	cmp	r3, r7
 80094fc:	dac1      	bge.n	8009482 <__gethex+0x39e>
 80094fe:	e6e4      	b.n	80092ca <__gethex+0x1e6>
 8009500:	221f      	movs	r2, #31
 8009502:	9c00      	ldr	r4, [sp, #0]
 8009504:	9900      	ldr	r1, [sp, #0]
 8009506:	2601      	movs	r6, #1
 8009508:	4014      	ands	r4, r2
 800950a:	4211      	tst	r1, r2
 800950c:	d0ba      	beq.n	8009484 <__gethex+0x3a0>
 800950e:	9a04      	ldr	r2, [sp, #16]
 8009510:	189b      	adds	r3, r3, r2
 8009512:	3b04      	subs	r3, #4
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	f7fe f859 	bl	80075cc <__hi0bits>
 800951a:	2320      	movs	r3, #32
 800951c:	1b1b      	subs	r3, r3, r4
 800951e:	4298      	cmp	r0, r3
 8009520:	dbe4      	blt.n	80094ec <__gethex+0x408>
 8009522:	e7af      	b.n	8009484 <__gethex+0x3a0>
 8009524:	08009ef9 	.word	0x08009ef9
 8009528:	0800a20e 	.word	0x0800a20e

0800952c <L_shift>:
 800952c:	2308      	movs	r3, #8
 800952e:	b570      	push	{r4, r5, r6, lr}
 8009530:	2520      	movs	r5, #32
 8009532:	1a9a      	subs	r2, r3, r2
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	1aad      	subs	r5, r5, r2
 8009538:	6843      	ldr	r3, [r0, #4]
 800953a:	6804      	ldr	r4, [r0, #0]
 800953c:	001e      	movs	r6, r3
 800953e:	40ae      	lsls	r6, r5
 8009540:	40d3      	lsrs	r3, r2
 8009542:	4334      	orrs	r4, r6
 8009544:	6004      	str	r4, [r0, #0]
 8009546:	6043      	str	r3, [r0, #4]
 8009548:	3004      	adds	r0, #4
 800954a:	4288      	cmp	r0, r1
 800954c:	d3f4      	bcc.n	8009538 <L_shift+0xc>
 800954e:	bd70      	pop	{r4, r5, r6, pc}

08009550 <__match>:
 8009550:	b530      	push	{r4, r5, lr}
 8009552:	6803      	ldr	r3, [r0, #0]
 8009554:	780c      	ldrb	r4, [r1, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	2c00      	cmp	r4, #0
 800955a:	d102      	bne.n	8009562 <__match+0x12>
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	2001      	movs	r0, #1
 8009560:	bd30      	pop	{r4, r5, pc}
 8009562:	781a      	ldrb	r2, [r3, #0]
 8009564:	0015      	movs	r5, r2
 8009566:	3d41      	subs	r5, #65	; 0x41
 8009568:	2d19      	cmp	r5, #25
 800956a:	d800      	bhi.n	800956e <__match+0x1e>
 800956c:	3220      	adds	r2, #32
 800956e:	3101      	adds	r1, #1
 8009570:	42a2      	cmp	r2, r4
 8009572:	d0ef      	beq.n	8009554 <__match+0x4>
 8009574:	2000      	movs	r0, #0
 8009576:	e7f3      	b.n	8009560 <__match+0x10>

08009578 <__hexnan>:
 8009578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957a:	680b      	ldr	r3, [r1, #0]
 800957c:	b08b      	sub	sp, #44	; 0x2c
 800957e:	9201      	str	r2, [sp, #4]
 8009580:	9901      	ldr	r1, [sp, #4]
 8009582:	115a      	asrs	r2, r3, #5
 8009584:	0092      	lsls	r2, r2, #2
 8009586:	188a      	adds	r2, r1, r2
 8009588:	9202      	str	r2, [sp, #8]
 800958a:	0019      	movs	r1, r3
 800958c:	221f      	movs	r2, #31
 800958e:	4011      	ands	r1, r2
 8009590:	9008      	str	r0, [sp, #32]
 8009592:	9106      	str	r1, [sp, #24]
 8009594:	4213      	tst	r3, r2
 8009596:	d002      	beq.n	800959e <__hexnan+0x26>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	3304      	adds	r3, #4
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	9b02      	ldr	r3, [sp, #8]
 80095a0:	2500      	movs	r5, #0
 80095a2:	1f1f      	subs	r7, r3, #4
 80095a4:	003e      	movs	r6, r7
 80095a6:	003c      	movs	r4, r7
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	603d      	str	r5, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	9507      	str	r5, [sp, #28]
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	9503      	str	r5, [sp, #12]
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	3301      	adds	r3, #1
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	9304      	str	r3, [sp, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d028      	beq.n	8009616 <__hexnan+0x9e>
 80095c4:	9804      	ldr	r0, [sp, #16]
 80095c6:	f7ff fd77 	bl	80090b8 <__hexdig_fun>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d154      	bne.n	8009678 <__hexnan+0x100>
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d819      	bhi.n	8009608 <__hexnan+0x90>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	9a07      	ldr	r2, [sp, #28]
 80095d8:	4293      	cmp	r3, r2
 80095da:	dd12      	ble.n	8009602 <__hexnan+0x8a>
 80095dc:	42b4      	cmp	r4, r6
 80095de:	d206      	bcs.n	80095ee <__hexnan+0x76>
 80095e0:	2d07      	cmp	r5, #7
 80095e2:	dc04      	bgt.n	80095ee <__hexnan+0x76>
 80095e4:	002a      	movs	r2, r5
 80095e6:	0031      	movs	r1, r6
 80095e8:	0020      	movs	r0, r4
 80095ea:	f7ff ff9f 	bl	800952c <L_shift>
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	2508      	movs	r5, #8
 80095f2:	429c      	cmp	r4, r3
 80095f4:	d905      	bls.n	8009602 <__hexnan+0x8a>
 80095f6:	1f26      	subs	r6, r4, #4
 80095f8:	2500      	movs	r5, #0
 80095fa:	0034      	movs	r4, r6
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	6035      	str	r5, [r6, #0]
 8009600:	9307      	str	r3, [sp, #28]
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	9305      	str	r3, [sp, #20]
 8009606:	e7d5      	b.n	80095b4 <__hexnan+0x3c>
 8009608:	9b04      	ldr	r3, [sp, #16]
 800960a:	2b29      	cmp	r3, #41	; 0x29
 800960c:	d159      	bne.n	80096c2 <__hexnan+0x14a>
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	9a08      	ldr	r2, [sp, #32]
 8009612:	3302      	adds	r3, #2
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d052      	beq.n	80096c2 <__hexnan+0x14a>
 800961c:	42b4      	cmp	r4, r6
 800961e:	d206      	bcs.n	800962e <__hexnan+0xb6>
 8009620:	2d07      	cmp	r5, #7
 8009622:	dc04      	bgt.n	800962e <__hexnan+0xb6>
 8009624:	002a      	movs	r2, r5
 8009626:	0031      	movs	r1, r6
 8009628:	0020      	movs	r0, r4
 800962a:	f7ff ff7f 	bl	800952c <L_shift>
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	429c      	cmp	r4, r3
 8009632:	d935      	bls.n	80096a0 <__hexnan+0x128>
 8009634:	001a      	movs	r2, r3
 8009636:	0023      	movs	r3, r4
 8009638:	cb02      	ldmia	r3!, {r1}
 800963a:	c202      	stmia	r2!, {r1}
 800963c:	429f      	cmp	r7, r3
 800963e:	d2fb      	bcs.n	8009638 <__hexnan+0xc0>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	1c62      	adds	r2, r4, #1
 8009644:	1ed9      	subs	r1, r3, #3
 8009646:	2304      	movs	r3, #4
 8009648:	4291      	cmp	r1, r2
 800964a:	d305      	bcc.n	8009658 <__hexnan+0xe0>
 800964c:	9b02      	ldr	r3, [sp, #8]
 800964e:	3b04      	subs	r3, #4
 8009650:	1b1b      	subs	r3, r3, r4
 8009652:	089b      	lsrs	r3, r3, #2
 8009654:	3301      	adds	r3, #1
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	9a01      	ldr	r2, [sp, #4]
 800965a:	18d3      	adds	r3, r2, r3
 800965c:	2200      	movs	r2, #0
 800965e:	c304      	stmia	r3!, {r2}
 8009660:	429f      	cmp	r7, r3
 8009662:	d2fc      	bcs.n	800965e <__hexnan+0xe6>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <__hexnan+0xfc>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	429f      	cmp	r7, r3
 800966e:	d126      	bne.n	80096be <__hexnan+0x146>
 8009670:	2301      	movs	r3, #1
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	2005      	movs	r0, #5
 8009676:	e025      	b.n	80096c4 <__hexnan+0x14c>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3501      	adds	r5, #1
 800967c:	3301      	adds	r3, #1
 800967e:	9303      	str	r3, [sp, #12]
 8009680:	2d08      	cmp	r5, #8
 8009682:	dd06      	ble.n	8009692 <__hexnan+0x11a>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	429c      	cmp	r4, r3
 8009688:	d9bb      	bls.n	8009602 <__hexnan+0x8a>
 800968a:	2300      	movs	r3, #0
 800968c:	2501      	movs	r5, #1
 800968e:	3c04      	subs	r4, #4
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	220f      	movs	r2, #15
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	4010      	ands	r0, r2
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	4303      	orrs	r3, r0
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	e7b0      	b.n	8009602 <__hexnan+0x8a>
 80096a0:	9b06      	ldr	r3, [sp, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0de      	beq.n	8009664 <__hexnan+0xec>
 80096a6:	2320      	movs	r3, #32
 80096a8:	9a06      	ldr	r2, [sp, #24]
 80096aa:	9902      	ldr	r1, [sp, #8]
 80096ac:	1a9b      	subs	r3, r3, r2
 80096ae:	2201      	movs	r2, #1
 80096b0:	4252      	negs	r2, r2
 80096b2:	40da      	lsrs	r2, r3
 80096b4:	3904      	subs	r1, #4
 80096b6:	680b      	ldr	r3, [r1, #0]
 80096b8:	4013      	ands	r3, r2
 80096ba:	600b      	str	r3, [r1, #0]
 80096bc:	e7d2      	b.n	8009664 <__hexnan+0xec>
 80096be:	3f04      	subs	r7, #4
 80096c0:	e7d0      	b.n	8009664 <__hexnan+0xec>
 80096c2:	2004      	movs	r0, #4
 80096c4:	b00b      	add	sp, #44	; 0x2c
 80096c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096c8 <__ascii_mbtowc>:
 80096c8:	b082      	sub	sp, #8
 80096ca:	2900      	cmp	r1, #0
 80096cc:	d100      	bne.n	80096d0 <__ascii_mbtowc+0x8>
 80096ce:	a901      	add	r1, sp, #4
 80096d0:	1e10      	subs	r0, r2, #0
 80096d2:	d006      	beq.n	80096e2 <__ascii_mbtowc+0x1a>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <__ascii_mbtowc+0x1e>
 80096d8:	7813      	ldrb	r3, [r2, #0]
 80096da:	600b      	str	r3, [r1, #0]
 80096dc:	7810      	ldrb	r0, [r2, #0]
 80096de:	1e43      	subs	r3, r0, #1
 80096e0:	4198      	sbcs	r0, r3
 80096e2:	b002      	add	sp, #8
 80096e4:	4770      	bx	lr
 80096e6:	2002      	movs	r0, #2
 80096e8:	4240      	negs	r0, r0
 80096ea:	e7fa      	b.n	80096e2 <__ascii_mbtowc+0x1a>

080096ec <_realloc_r>:
 80096ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ee:	0007      	movs	r7, r0
 80096f0:	000e      	movs	r6, r1
 80096f2:	0014      	movs	r4, r2
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d105      	bne.n	8009704 <_realloc_r+0x18>
 80096f8:	0011      	movs	r1, r2
 80096fa:	f7fd fddd 	bl	80072b8 <_malloc_r>
 80096fe:	0005      	movs	r5, r0
 8009700:	0028      	movs	r0, r5
 8009702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009704:	2a00      	cmp	r2, #0
 8009706:	d103      	bne.n	8009710 <_realloc_r+0x24>
 8009708:	f7fd fd60 	bl	80071cc <_free_r>
 800970c:	0025      	movs	r5, r4
 800970e:	e7f7      	b.n	8009700 <_realloc_r+0x14>
 8009710:	f000 f83f 	bl	8009792 <_malloc_usable_size_r>
 8009714:	9001      	str	r0, [sp, #4]
 8009716:	4284      	cmp	r4, r0
 8009718:	d803      	bhi.n	8009722 <_realloc_r+0x36>
 800971a:	0035      	movs	r5, r6
 800971c:	0843      	lsrs	r3, r0, #1
 800971e:	42a3      	cmp	r3, r4
 8009720:	d3ee      	bcc.n	8009700 <_realloc_r+0x14>
 8009722:	0021      	movs	r1, r4
 8009724:	0038      	movs	r0, r7
 8009726:	f7fd fdc7 	bl	80072b8 <_malloc_r>
 800972a:	1e05      	subs	r5, r0, #0
 800972c:	d0e8      	beq.n	8009700 <_realloc_r+0x14>
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	0022      	movs	r2, r4
 8009732:	429c      	cmp	r4, r3
 8009734:	d900      	bls.n	8009738 <_realloc_r+0x4c>
 8009736:	001a      	movs	r2, r3
 8009738:	0031      	movs	r1, r6
 800973a:	0028      	movs	r0, r5
 800973c:	f7ff fc0c 	bl	8008f58 <memcpy>
 8009740:	0031      	movs	r1, r6
 8009742:	0038      	movs	r0, r7
 8009744:	f7fd fd42 	bl	80071cc <_free_r>
 8009748:	e7da      	b.n	8009700 <_realloc_r+0x14>

0800974a <__ascii_wctomb>:
 800974a:	0003      	movs	r3, r0
 800974c:	1e08      	subs	r0, r1, #0
 800974e:	d005      	beq.n	800975c <__ascii_wctomb+0x12>
 8009750:	2aff      	cmp	r2, #255	; 0xff
 8009752:	d904      	bls.n	800975e <__ascii_wctomb+0x14>
 8009754:	228a      	movs	r2, #138	; 0x8a
 8009756:	2001      	movs	r0, #1
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	4240      	negs	r0, r0
 800975c:	4770      	bx	lr
 800975e:	2001      	movs	r0, #1
 8009760:	700a      	strb	r2, [r1, #0]
 8009762:	e7fb      	b.n	800975c <__ascii_wctomb+0x12>

08009764 <fiprintf>:
 8009764:	b40e      	push	{r1, r2, r3}
 8009766:	b517      	push	{r0, r1, r2, r4, lr}
 8009768:	4c05      	ldr	r4, [pc, #20]	; (8009780 <fiprintf+0x1c>)
 800976a:	ab05      	add	r3, sp, #20
 800976c:	cb04      	ldmia	r3!, {r2}
 800976e:	0001      	movs	r1, r0
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	f000 f83c 	bl	80097f0 <_vfiprintf_r>
 8009778:	bc1e      	pop	{r1, r2, r3, r4}
 800977a:	bc08      	pop	{r3}
 800977c:	b003      	add	sp, #12
 800977e:	4718      	bx	r3
 8009780:	20000064 	.word	0x20000064

08009784 <abort>:
 8009784:	2006      	movs	r0, #6
 8009786:	b510      	push	{r4, lr}
 8009788:	f000 fa1e 	bl	8009bc8 <raise>
 800978c:	2001      	movs	r0, #1
 800978e:	f7f9 fa55 	bl	8002c3c <_exit>

08009792 <_malloc_usable_size_r>:
 8009792:	1f0b      	subs	r3, r1, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	1f18      	subs	r0, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	da01      	bge.n	80097a0 <_malloc_usable_size_r+0xe>
 800979c:	580b      	ldr	r3, [r1, r0]
 800979e:	18c0      	adds	r0, r0, r3
 80097a0:	4770      	bx	lr

080097a2 <__sfputc_r>:
 80097a2:	6893      	ldr	r3, [r2, #8]
 80097a4:	b510      	push	{r4, lr}
 80097a6:	3b01      	subs	r3, #1
 80097a8:	6093      	str	r3, [r2, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	da04      	bge.n	80097b8 <__sfputc_r+0x16>
 80097ae:	6994      	ldr	r4, [r2, #24]
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	db07      	blt.n	80097c4 <__sfputc_r+0x22>
 80097b4:	290a      	cmp	r1, #10
 80097b6:	d005      	beq.n	80097c4 <__sfputc_r+0x22>
 80097b8:	6813      	ldr	r3, [r2, #0]
 80097ba:	1c58      	adds	r0, r3, #1
 80097bc:	6010      	str	r0, [r2, #0]
 80097be:	7019      	strb	r1, [r3, #0]
 80097c0:	0008      	movs	r0, r1
 80097c2:	bd10      	pop	{r4, pc}
 80097c4:	f000 f930 	bl	8009a28 <__swbuf_r>
 80097c8:	0001      	movs	r1, r0
 80097ca:	e7f9      	b.n	80097c0 <__sfputc_r+0x1e>

080097cc <__sfputs_r>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	0006      	movs	r6, r0
 80097d0:	000f      	movs	r7, r1
 80097d2:	0014      	movs	r4, r2
 80097d4:	18d5      	adds	r5, r2, r3
 80097d6:	42ac      	cmp	r4, r5
 80097d8:	d101      	bne.n	80097de <__sfputs_r+0x12>
 80097da:	2000      	movs	r0, #0
 80097dc:	e007      	b.n	80097ee <__sfputs_r+0x22>
 80097de:	7821      	ldrb	r1, [r4, #0]
 80097e0:	003a      	movs	r2, r7
 80097e2:	0030      	movs	r0, r6
 80097e4:	f7ff ffdd 	bl	80097a2 <__sfputc_r>
 80097e8:	3401      	adds	r4, #1
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d1f3      	bne.n	80097d6 <__sfputs_r+0xa>
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097f0 <_vfiprintf_r>:
 80097f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097f2:	b0a1      	sub	sp, #132	; 0x84
 80097f4:	000f      	movs	r7, r1
 80097f6:	0015      	movs	r5, r2
 80097f8:	001e      	movs	r6, r3
 80097fa:	9003      	str	r0, [sp, #12]
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d004      	beq.n	800980a <_vfiprintf_r+0x1a>
 8009800:	6a03      	ldr	r3, [r0, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <_vfiprintf_r+0x1a>
 8009806:	f7fc fd0d 	bl	8006224 <__sinit>
 800980a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800980c:	07db      	lsls	r3, r3, #31
 800980e:	d405      	bmi.n	800981c <_vfiprintf_r+0x2c>
 8009810:	89bb      	ldrh	r3, [r7, #12]
 8009812:	059b      	lsls	r3, r3, #22
 8009814:	d402      	bmi.n	800981c <_vfiprintf_r+0x2c>
 8009816:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009818:	f7fc fe29 	bl	800646e <__retarget_lock_acquire_recursive>
 800981c:	89bb      	ldrh	r3, [r7, #12]
 800981e:	071b      	lsls	r3, r3, #28
 8009820:	d502      	bpl.n	8009828 <_vfiprintf_r+0x38>
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d113      	bne.n	8009850 <_vfiprintf_r+0x60>
 8009828:	0039      	movs	r1, r7
 800982a:	9803      	ldr	r0, [sp, #12]
 800982c:	f000 f93e 	bl	8009aac <__swsetup_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	d00d      	beq.n	8009850 <_vfiprintf_r+0x60>
 8009834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009836:	07db      	lsls	r3, r3, #31
 8009838:	d503      	bpl.n	8009842 <_vfiprintf_r+0x52>
 800983a:	2001      	movs	r0, #1
 800983c:	4240      	negs	r0, r0
 800983e:	b021      	add	sp, #132	; 0x84
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009842:	89bb      	ldrh	r3, [r7, #12]
 8009844:	059b      	lsls	r3, r3, #22
 8009846:	d4f8      	bmi.n	800983a <_vfiprintf_r+0x4a>
 8009848:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800984a:	f7fc fe11 	bl	8006470 <__retarget_lock_release_recursive>
 800984e:	e7f4      	b.n	800983a <_vfiprintf_r+0x4a>
 8009850:	2300      	movs	r3, #0
 8009852:	ac08      	add	r4, sp, #32
 8009854:	6163      	str	r3, [r4, #20]
 8009856:	3320      	adds	r3, #32
 8009858:	7663      	strb	r3, [r4, #25]
 800985a:	3310      	adds	r3, #16
 800985c:	76a3      	strb	r3, [r4, #26]
 800985e:	9607      	str	r6, [sp, #28]
 8009860:	002e      	movs	r6, r5
 8009862:	7833      	ldrb	r3, [r6, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <_vfiprintf_r+0x7c>
 8009868:	2b25      	cmp	r3, #37	; 0x25
 800986a:	d148      	bne.n	80098fe <_vfiprintf_r+0x10e>
 800986c:	1b73      	subs	r3, r6, r5
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	42ae      	cmp	r6, r5
 8009872:	d00b      	beq.n	800988c <_vfiprintf_r+0x9c>
 8009874:	002a      	movs	r2, r5
 8009876:	0039      	movs	r1, r7
 8009878:	9803      	ldr	r0, [sp, #12]
 800987a:	f7ff ffa7 	bl	80097cc <__sfputs_r>
 800987e:	3001      	adds	r0, #1
 8009880:	d100      	bne.n	8009884 <_vfiprintf_r+0x94>
 8009882:	e0af      	b.n	80099e4 <_vfiprintf_r+0x1f4>
 8009884:	6963      	ldr	r3, [r4, #20]
 8009886:	9a05      	ldr	r2, [sp, #20]
 8009888:	189b      	adds	r3, r3, r2
 800988a:	6163      	str	r3, [r4, #20]
 800988c:	7833      	ldrb	r3, [r6, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d100      	bne.n	8009894 <_vfiprintf_r+0xa4>
 8009892:	e0a7      	b.n	80099e4 <_vfiprintf_r+0x1f4>
 8009894:	2201      	movs	r2, #1
 8009896:	2300      	movs	r3, #0
 8009898:	4252      	negs	r2, r2
 800989a:	6062      	str	r2, [r4, #4]
 800989c:	a904      	add	r1, sp, #16
 800989e:	3254      	adds	r2, #84	; 0x54
 80098a0:	1852      	adds	r2, r2, r1
 80098a2:	1c75      	adds	r5, r6, #1
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	60e3      	str	r3, [r4, #12]
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	7013      	strb	r3, [r2, #0]
 80098ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80098ae:	4b59      	ldr	r3, [pc, #356]	; (8009a14 <_vfiprintf_r+0x224>)
 80098b0:	2205      	movs	r2, #5
 80098b2:	0018      	movs	r0, r3
 80098b4:	7829      	ldrb	r1, [r5, #0]
 80098b6:	9305      	str	r3, [sp, #20]
 80098b8:	f7fc fddb 	bl	8006472 <memchr>
 80098bc:	1c6e      	adds	r6, r5, #1
 80098be:	2800      	cmp	r0, #0
 80098c0:	d11f      	bne.n	8009902 <_vfiprintf_r+0x112>
 80098c2:	6822      	ldr	r2, [r4, #0]
 80098c4:	06d3      	lsls	r3, r2, #27
 80098c6:	d504      	bpl.n	80098d2 <_vfiprintf_r+0xe2>
 80098c8:	2353      	movs	r3, #83	; 0x53
 80098ca:	a904      	add	r1, sp, #16
 80098cc:	185b      	adds	r3, r3, r1
 80098ce:	2120      	movs	r1, #32
 80098d0:	7019      	strb	r1, [r3, #0]
 80098d2:	0713      	lsls	r3, r2, #28
 80098d4:	d504      	bpl.n	80098e0 <_vfiprintf_r+0xf0>
 80098d6:	2353      	movs	r3, #83	; 0x53
 80098d8:	a904      	add	r1, sp, #16
 80098da:	185b      	adds	r3, r3, r1
 80098dc:	212b      	movs	r1, #43	; 0x2b
 80098de:	7019      	strb	r1, [r3, #0]
 80098e0:	782b      	ldrb	r3, [r5, #0]
 80098e2:	2b2a      	cmp	r3, #42	; 0x2a
 80098e4:	d016      	beq.n	8009914 <_vfiprintf_r+0x124>
 80098e6:	002e      	movs	r6, r5
 80098e8:	2100      	movs	r1, #0
 80098ea:	200a      	movs	r0, #10
 80098ec:	68e3      	ldr	r3, [r4, #12]
 80098ee:	7832      	ldrb	r2, [r6, #0]
 80098f0:	1c75      	adds	r5, r6, #1
 80098f2:	3a30      	subs	r2, #48	; 0x30
 80098f4:	2a09      	cmp	r2, #9
 80098f6:	d94e      	bls.n	8009996 <_vfiprintf_r+0x1a6>
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d111      	bne.n	8009920 <_vfiprintf_r+0x130>
 80098fc:	e017      	b.n	800992e <_vfiprintf_r+0x13e>
 80098fe:	3601      	adds	r6, #1
 8009900:	e7af      	b.n	8009862 <_vfiprintf_r+0x72>
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	6822      	ldr	r2, [r4, #0]
 8009906:	1ac0      	subs	r0, r0, r3
 8009908:	2301      	movs	r3, #1
 800990a:	4083      	lsls	r3, r0
 800990c:	4313      	orrs	r3, r2
 800990e:	0035      	movs	r5, r6
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	e7cc      	b.n	80098ae <_vfiprintf_r+0xbe>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	1d19      	adds	r1, r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	9107      	str	r1, [sp, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	db01      	blt.n	8009924 <_vfiprintf_r+0x134>
 8009920:	930b      	str	r3, [sp, #44]	; 0x2c
 8009922:	e004      	b.n	800992e <_vfiprintf_r+0x13e>
 8009924:	425b      	negs	r3, r3
 8009926:	60e3      	str	r3, [r4, #12]
 8009928:	2302      	movs	r3, #2
 800992a:	4313      	orrs	r3, r2
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	7833      	ldrb	r3, [r6, #0]
 8009930:	2b2e      	cmp	r3, #46	; 0x2e
 8009932:	d10a      	bne.n	800994a <_vfiprintf_r+0x15a>
 8009934:	7873      	ldrb	r3, [r6, #1]
 8009936:	2b2a      	cmp	r3, #42	; 0x2a
 8009938:	d135      	bne.n	80099a6 <_vfiprintf_r+0x1b6>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	3602      	adds	r6, #2
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9207      	str	r2, [sp, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	db2b      	blt.n	80099a0 <_vfiprintf_r+0x1b0>
 8009948:	9309      	str	r3, [sp, #36]	; 0x24
 800994a:	4d33      	ldr	r5, [pc, #204]	; (8009a18 <_vfiprintf_r+0x228>)
 800994c:	2203      	movs	r2, #3
 800994e:	0028      	movs	r0, r5
 8009950:	7831      	ldrb	r1, [r6, #0]
 8009952:	f7fc fd8e 	bl	8006472 <memchr>
 8009956:	2800      	cmp	r0, #0
 8009958:	d006      	beq.n	8009968 <_vfiprintf_r+0x178>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	1b40      	subs	r0, r0, r5
 800995e:	4083      	lsls	r3, r0
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	3601      	adds	r6, #1
 8009964:	4313      	orrs	r3, r2
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	7831      	ldrb	r1, [r6, #0]
 800996a:	2206      	movs	r2, #6
 800996c:	482b      	ldr	r0, [pc, #172]	; (8009a1c <_vfiprintf_r+0x22c>)
 800996e:	1c75      	adds	r5, r6, #1
 8009970:	7621      	strb	r1, [r4, #24]
 8009972:	f7fc fd7e 	bl	8006472 <memchr>
 8009976:	2800      	cmp	r0, #0
 8009978:	d043      	beq.n	8009a02 <_vfiprintf_r+0x212>
 800997a:	4b29      	ldr	r3, [pc, #164]	; (8009a20 <_vfiprintf_r+0x230>)
 800997c:	2b00      	cmp	r3, #0
 800997e:	d125      	bne.n	80099cc <_vfiprintf_r+0x1dc>
 8009980:	2207      	movs	r2, #7
 8009982:	9b07      	ldr	r3, [sp, #28]
 8009984:	3307      	adds	r3, #7
 8009986:	4393      	bics	r3, r2
 8009988:	3308      	adds	r3, #8
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	6963      	ldr	r3, [r4, #20]
 800998e:	9a04      	ldr	r2, [sp, #16]
 8009990:	189b      	adds	r3, r3, r2
 8009992:	6163      	str	r3, [r4, #20]
 8009994:	e764      	b.n	8009860 <_vfiprintf_r+0x70>
 8009996:	4343      	muls	r3, r0
 8009998:	002e      	movs	r6, r5
 800999a:	2101      	movs	r1, #1
 800999c:	189b      	adds	r3, r3, r2
 800999e:	e7a6      	b.n	80098ee <_vfiprintf_r+0xfe>
 80099a0:	2301      	movs	r3, #1
 80099a2:	425b      	negs	r3, r3
 80099a4:	e7d0      	b.n	8009948 <_vfiprintf_r+0x158>
 80099a6:	2300      	movs	r3, #0
 80099a8:	200a      	movs	r0, #10
 80099aa:	001a      	movs	r2, r3
 80099ac:	3601      	adds	r6, #1
 80099ae:	6063      	str	r3, [r4, #4]
 80099b0:	7831      	ldrb	r1, [r6, #0]
 80099b2:	1c75      	adds	r5, r6, #1
 80099b4:	3930      	subs	r1, #48	; 0x30
 80099b6:	2909      	cmp	r1, #9
 80099b8:	d903      	bls.n	80099c2 <_vfiprintf_r+0x1d2>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c5      	beq.n	800994a <_vfiprintf_r+0x15a>
 80099be:	9209      	str	r2, [sp, #36]	; 0x24
 80099c0:	e7c3      	b.n	800994a <_vfiprintf_r+0x15a>
 80099c2:	4342      	muls	r2, r0
 80099c4:	002e      	movs	r6, r5
 80099c6:	2301      	movs	r3, #1
 80099c8:	1852      	adds	r2, r2, r1
 80099ca:	e7f1      	b.n	80099b0 <_vfiprintf_r+0x1c0>
 80099cc:	aa07      	add	r2, sp, #28
 80099ce:	9200      	str	r2, [sp, #0]
 80099d0:	0021      	movs	r1, r4
 80099d2:	003a      	movs	r2, r7
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <_vfiprintf_r+0x234>)
 80099d6:	9803      	ldr	r0, [sp, #12]
 80099d8:	f7fb fdb6 	bl	8005548 <_printf_float>
 80099dc:	9004      	str	r0, [sp, #16]
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	d1d3      	bne.n	800998c <_vfiprintf_r+0x19c>
 80099e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e6:	07db      	lsls	r3, r3, #31
 80099e8:	d405      	bmi.n	80099f6 <_vfiprintf_r+0x206>
 80099ea:	89bb      	ldrh	r3, [r7, #12]
 80099ec:	059b      	lsls	r3, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_vfiprintf_r+0x206>
 80099f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80099f2:	f7fc fd3d 	bl	8006470 <__retarget_lock_release_recursive>
 80099f6:	89bb      	ldrh	r3, [r7, #12]
 80099f8:	065b      	lsls	r3, r3, #25
 80099fa:	d500      	bpl.n	80099fe <_vfiprintf_r+0x20e>
 80099fc:	e71d      	b.n	800983a <_vfiprintf_r+0x4a>
 80099fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a00:	e71d      	b.n	800983e <_vfiprintf_r+0x4e>
 8009a02:	aa07      	add	r2, sp, #28
 8009a04:	9200      	str	r2, [sp, #0]
 8009a06:	0021      	movs	r1, r4
 8009a08:	003a      	movs	r2, r7
 8009a0a:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <_vfiprintf_r+0x234>)
 8009a0c:	9803      	ldr	r0, [sp, #12]
 8009a0e:	f7fc f861 	bl	8005ad4 <_printf_i>
 8009a12:	e7e3      	b.n	80099dc <_vfiprintf_r+0x1ec>
 8009a14:	0800a1b9 	.word	0x0800a1b9
 8009a18:	0800a1bf 	.word	0x0800a1bf
 8009a1c:	0800a1c3 	.word	0x0800a1c3
 8009a20:	08005549 	.word	0x08005549
 8009a24:	080097cd 	.word	0x080097cd

08009a28 <__swbuf_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	0006      	movs	r6, r0
 8009a2c:	000d      	movs	r5, r1
 8009a2e:	0014      	movs	r4, r2
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d004      	beq.n	8009a3e <__swbuf_r+0x16>
 8009a34:	6a03      	ldr	r3, [r0, #32]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <__swbuf_r+0x16>
 8009a3a:	f7fc fbf3 	bl	8006224 <__sinit>
 8009a3e:	69a3      	ldr	r3, [r4, #24]
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	071b      	lsls	r3, r3, #28
 8009a46:	d528      	bpl.n	8009a9a <__swbuf_r+0x72>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d025      	beq.n	8009a9a <__swbuf_r+0x72>
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	b2ef      	uxtb	r7, r5
 8009a54:	1ac0      	subs	r0, r0, r3
 8009a56:	6963      	ldr	r3, [r4, #20]
 8009a58:	b2ed      	uxtb	r5, r5
 8009a5a:	4283      	cmp	r3, r0
 8009a5c:	dc05      	bgt.n	8009a6a <__swbuf_r+0x42>
 8009a5e:	0021      	movs	r1, r4
 8009a60:	0030      	movs	r0, r6
 8009a62:	f7ff fa17 	bl	8008e94 <_fflush_r>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d11d      	bne.n	8009aa6 <__swbuf_r+0x7e>
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	60a3      	str	r3, [r4, #8]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	6022      	str	r2, [r4, #0]
 8009a78:	701f      	strb	r7, [r3, #0]
 8009a7a:	6963      	ldr	r3, [r4, #20]
 8009a7c:	4283      	cmp	r3, r0
 8009a7e:	d004      	beq.n	8009a8a <__swbuf_r+0x62>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	07db      	lsls	r3, r3, #31
 8009a84:	d507      	bpl.n	8009a96 <__swbuf_r+0x6e>
 8009a86:	2d0a      	cmp	r5, #10
 8009a88:	d105      	bne.n	8009a96 <__swbuf_r+0x6e>
 8009a8a:	0021      	movs	r1, r4
 8009a8c:	0030      	movs	r0, r6
 8009a8e:	f7ff fa01 	bl	8008e94 <_fflush_r>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d107      	bne.n	8009aa6 <__swbuf_r+0x7e>
 8009a96:	0028      	movs	r0, r5
 8009a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9a:	0021      	movs	r1, r4
 8009a9c:	0030      	movs	r0, r6
 8009a9e:	f000 f805 	bl	8009aac <__swsetup_r>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d0d3      	beq.n	8009a4e <__swbuf_r+0x26>
 8009aa6:	2501      	movs	r5, #1
 8009aa8:	426d      	negs	r5, r5
 8009aaa:	e7f4      	b.n	8009a96 <__swbuf_r+0x6e>

08009aac <__swsetup_r>:
 8009aac:	4b30      	ldr	r3, [pc, #192]	; (8009b70 <__swsetup_r+0xc4>)
 8009aae:	b570      	push	{r4, r5, r6, lr}
 8009ab0:	0005      	movs	r5, r0
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	000c      	movs	r4, r1
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d004      	beq.n	8009ac4 <__swsetup_r+0x18>
 8009aba:	6a03      	ldr	r3, [r0, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <__swsetup_r+0x18>
 8009ac0:	f7fc fbb0 	bl	8006224 <__sinit>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	5ee2      	ldrsh	r2, [r4, r3]
 8009ac8:	b293      	uxth	r3, r2
 8009aca:	0711      	lsls	r1, r2, #28
 8009acc:	d423      	bmi.n	8009b16 <__swsetup_r+0x6a>
 8009ace:	06d9      	lsls	r1, r3, #27
 8009ad0:	d407      	bmi.n	8009ae2 <__swsetup_r+0x36>
 8009ad2:	2309      	movs	r3, #9
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	3337      	adds	r3, #55	; 0x37
 8009ada:	4313      	orrs	r3, r2
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	4240      	negs	r0, r0
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	075b      	lsls	r3, r3, #29
 8009ae4:	d513      	bpl.n	8009b0e <__swsetup_r+0x62>
 8009ae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d008      	beq.n	8009afe <__swsetup_r+0x52>
 8009aec:	0023      	movs	r3, r4
 8009aee:	3344      	adds	r3, #68	; 0x44
 8009af0:	4299      	cmp	r1, r3
 8009af2:	d002      	beq.n	8009afa <__swsetup_r+0x4e>
 8009af4:	0028      	movs	r0, r5
 8009af6:	f7fd fb69 	bl	80071cc <_free_r>
 8009afa:	2300      	movs	r3, #0
 8009afc:	6363      	str	r3, [r4, #52]	; 0x34
 8009afe:	2224      	movs	r2, #36	; 0x24
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	4393      	bics	r3, r2
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	2300      	movs	r3, #0
 8009b08:	6063      	str	r3, [r4, #4]
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	2308      	movs	r3, #8
 8009b10:	89a2      	ldrh	r2, [r4, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <__swsetup_r+0x88>
 8009b1c:	21a0      	movs	r1, #160	; 0xa0
 8009b1e:	2280      	movs	r2, #128	; 0x80
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	0089      	lsls	r1, r1, #2
 8009b24:	0092      	lsls	r2, r2, #2
 8009b26:	400b      	ands	r3, r1
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <__swsetup_r+0x88>
 8009b2c:	0021      	movs	r1, r4
 8009b2e:	0028      	movs	r0, r5
 8009b30:	f000 f892 	bl	8009c58 <__smakebuf_r>
 8009b34:	220c      	movs	r2, #12
 8009b36:	5ea3      	ldrsh	r3, [r4, r2]
 8009b38:	2001      	movs	r0, #1
 8009b3a:	001a      	movs	r2, r3
 8009b3c:	b299      	uxth	r1, r3
 8009b3e:	4002      	ands	r2, r0
 8009b40:	4203      	tst	r3, r0
 8009b42:	d00f      	beq.n	8009b64 <__swsetup_r+0xb8>
 8009b44:	2200      	movs	r2, #0
 8009b46:	60a2      	str	r2, [r4, #8]
 8009b48:	6962      	ldr	r2, [r4, #20]
 8009b4a:	4252      	negs	r2, r2
 8009b4c:	61a2      	str	r2, [r4, #24]
 8009b4e:	2000      	movs	r0, #0
 8009b50:	6922      	ldr	r2, [r4, #16]
 8009b52:	4282      	cmp	r2, r0
 8009b54:	d1c4      	bne.n	8009ae0 <__swsetup_r+0x34>
 8009b56:	0609      	lsls	r1, r1, #24
 8009b58:	d5c2      	bpl.n	8009ae0 <__swsetup_r+0x34>
 8009b5a:	2240      	movs	r2, #64	; 0x40
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	3801      	subs	r0, #1
 8009b62:	e7bd      	b.n	8009ae0 <__swsetup_r+0x34>
 8009b64:	0788      	lsls	r0, r1, #30
 8009b66:	d400      	bmi.n	8009b6a <__swsetup_r+0xbe>
 8009b68:	6962      	ldr	r2, [r4, #20]
 8009b6a:	60a2      	str	r2, [r4, #8]
 8009b6c:	e7ef      	b.n	8009b4e <__swsetup_r+0xa2>
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	20000064 	.word	0x20000064

08009b74 <_raise_r>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	0004      	movs	r4, r0
 8009b78:	000d      	movs	r5, r1
 8009b7a:	291f      	cmp	r1, #31
 8009b7c:	d904      	bls.n	8009b88 <_raise_r+0x14>
 8009b7e:	2316      	movs	r3, #22
 8009b80:	6003      	str	r3, [r0, #0]
 8009b82:	2001      	movs	r0, #1
 8009b84:	4240      	negs	r0, r0
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <_raise_r+0x24>
 8009b8e:	008a      	lsls	r2, r1, #2
 8009b90:	189b      	adds	r3, r3, r2
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	2a00      	cmp	r2, #0
 8009b96:	d108      	bne.n	8009baa <_raise_r+0x36>
 8009b98:	0020      	movs	r0, r4
 8009b9a:	f000 f831 	bl	8009c00 <_getpid_r>
 8009b9e:	002a      	movs	r2, r5
 8009ba0:	0001      	movs	r1, r0
 8009ba2:	0020      	movs	r0, r4
 8009ba4:	f000 f81a 	bl	8009bdc <_kill_r>
 8009ba8:	e7ed      	b.n	8009b86 <_raise_r+0x12>
 8009baa:	2000      	movs	r0, #0
 8009bac:	2a01      	cmp	r2, #1
 8009bae:	d0ea      	beq.n	8009b86 <_raise_r+0x12>
 8009bb0:	1c51      	adds	r1, r2, #1
 8009bb2:	d103      	bne.n	8009bbc <_raise_r+0x48>
 8009bb4:	2316      	movs	r3, #22
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	e7e4      	b.n	8009b86 <_raise_r+0x12>
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	0028      	movs	r0, r5
 8009bc0:	601c      	str	r4, [r3, #0]
 8009bc2:	4790      	blx	r2
 8009bc4:	0020      	movs	r0, r4
 8009bc6:	e7de      	b.n	8009b86 <_raise_r+0x12>

08009bc8 <raise>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <raise+0x10>)
 8009bcc:	0001      	movs	r1, r0
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	f7ff ffd0 	bl	8009b74 <_raise_r>
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	20000064 	.word	0x20000064

08009bdc <_kill_r>:
 8009bdc:	2300      	movs	r3, #0
 8009bde:	b570      	push	{r4, r5, r6, lr}
 8009be0:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_kill_r+0x20>)
 8009be2:	0004      	movs	r4, r0
 8009be4:	0008      	movs	r0, r1
 8009be6:	0011      	movs	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f9 f817 	bl	8002c1c <_kill>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d103      	bne.n	8009bfa <_kill_r+0x1e>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d000      	beq.n	8009bfa <_kill_r+0x1e>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	20000450 	.word	0x20000450

08009c00 <_getpid_r>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	f7f9 f805 	bl	8002c10 <_getpid>
 8009c06:	bd10      	pop	{r4, pc}

08009c08 <__swhatbuf_r>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	000e      	movs	r6, r1
 8009c0c:	001d      	movs	r5, r3
 8009c0e:	230e      	movs	r3, #14
 8009c10:	5ec9      	ldrsh	r1, [r1, r3]
 8009c12:	0014      	movs	r4, r2
 8009c14:	b096      	sub	sp, #88	; 0x58
 8009c16:	2900      	cmp	r1, #0
 8009c18:	da0c      	bge.n	8009c34 <__swhatbuf_r+0x2c>
 8009c1a:	89b2      	ldrh	r2, [r6, #12]
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	0011      	movs	r1, r2
 8009c20:	4019      	ands	r1, r3
 8009c22:	421a      	tst	r2, r3
 8009c24:	d013      	beq.n	8009c4e <__swhatbuf_r+0x46>
 8009c26:	2100      	movs	r1, #0
 8009c28:	3b40      	subs	r3, #64	; 0x40
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	6029      	str	r1, [r5, #0]
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	b016      	add	sp, #88	; 0x58
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	466a      	mov	r2, sp
 8009c36:	f000 f84d 	bl	8009cd4 <_fstat_r>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	dbed      	blt.n	8009c1a <__swhatbuf_r+0x12>
 8009c3e:	23f0      	movs	r3, #240	; 0xf0
 8009c40:	9901      	ldr	r1, [sp, #4]
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	4019      	ands	r1, r3
 8009c46:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <__swhatbuf_r+0x4c>)
 8009c48:	18c9      	adds	r1, r1, r3
 8009c4a:	424b      	negs	r3, r1
 8009c4c:	4159      	adcs	r1, r3
 8009c4e:	2380      	movs	r3, #128	; 0x80
 8009c50:	00db      	lsls	r3, r3, #3
 8009c52:	e7ea      	b.n	8009c2a <__swhatbuf_r+0x22>
 8009c54:	ffffe000 	.word	0xffffe000

08009c58 <__smakebuf_r>:
 8009c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5a:	2602      	movs	r6, #2
 8009c5c:	898b      	ldrh	r3, [r1, #12]
 8009c5e:	0005      	movs	r5, r0
 8009c60:	000c      	movs	r4, r1
 8009c62:	4233      	tst	r3, r6
 8009c64:	d006      	beq.n	8009c74 <__smakebuf_r+0x1c>
 8009c66:	0023      	movs	r3, r4
 8009c68:	3347      	adds	r3, #71	; 0x47
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	6163      	str	r3, [r4, #20]
 8009c72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009c74:	466a      	mov	r2, sp
 8009c76:	ab01      	add	r3, sp, #4
 8009c78:	f7ff ffc6 	bl	8009c08 <__swhatbuf_r>
 8009c7c:	9900      	ldr	r1, [sp, #0]
 8009c7e:	0007      	movs	r7, r0
 8009c80:	0028      	movs	r0, r5
 8009c82:	f7fd fb19 	bl	80072b8 <_malloc_r>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d108      	bne.n	8009c9c <__smakebuf_r+0x44>
 8009c8a:	220c      	movs	r2, #12
 8009c8c:	5ea3      	ldrsh	r3, [r4, r2]
 8009c8e:	059a      	lsls	r2, r3, #22
 8009c90:	d4ef      	bmi.n	8009c72 <__smakebuf_r+0x1a>
 8009c92:	2203      	movs	r2, #3
 8009c94:	4393      	bics	r3, r2
 8009c96:	431e      	orrs	r6, r3
 8009c98:	81a6      	strh	r6, [r4, #12]
 8009c9a:	e7e4      	b.n	8009c66 <__smakebuf_r+0xe>
 8009c9c:	2380      	movs	r3, #128	; 0x80
 8009c9e:	89a2      	ldrh	r2, [r4, #12]
 8009ca0:	6020      	str	r0, [r4, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	9b00      	ldr	r3, [sp, #0]
 8009ca8:	6120      	str	r0, [r4, #16]
 8009caa:	6163      	str	r3, [r4, #20]
 8009cac:	9b01      	ldr	r3, [sp, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00c      	beq.n	8009ccc <__smakebuf_r+0x74>
 8009cb2:	0028      	movs	r0, r5
 8009cb4:	230e      	movs	r3, #14
 8009cb6:	5ee1      	ldrsh	r1, [r4, r3]
 8009cb8:	f000 f81e 	bl	8009cf8 <_isatty_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d005      	beq.n	8009ccc <__smakebuf_r+0x74>
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	89a2      	ldrh	r2, [r4, #12]
 8009cc4:	439a      	bics	r2, r3
 8009cc6:	3b02      	subs	r3, #2
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	433b      	orrs	r3, r7
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	e7ce      	b.n	8009c72 <__smakebuf_r+0x1a>

08009cd4 <_fstat_r>:
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	b570      	push	{r4, r5, r6, lr}
 8009cd8:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_fstat_r+0x20>)
 8009cda:	0004      	movs	r4, r0
 8009cdc:	0008      	movs	r0, r1
 8009cde:	0011      	movs	r1, r2
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f7f8 fffa 	bl	8002cda <_fstat>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d103      	bne.n	8009cf2 <_fstat_r+0x1e>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d000      	beq.n	8009cf2 <_fstat_r+0x1e>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	20000450 	.word	0x20000450

08009cf8 <_isatty_r>:
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	b570      	push	{r4, r5, r6, lr}
 8009cfc:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_isatty_r+0x20>)
 8009cfe:	0004      	movs	r4, r0
 8009d00:	0008      	movs	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f8 fff7 	bl	8002cf6 <_isatty>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d103      	bne.n	8009d14 <_isatty_r+0x1c>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d000      	beq.n	8009d14 <_isatty_r+0x1c>
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd70      	pop	{r4, r5, r6, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	20000450 	.word	0x20000450

08009d1c <_init>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr

08009d28 <_fini>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2e:	bc08      	pop	{r3}
 8009d30:	469e      	mov	lr, r3
 8009d32:	4770      	bx	lr
