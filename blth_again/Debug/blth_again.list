
blth_again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  080038c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080038c0  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082c4  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001780  00000000  00000000  0002838b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  00029b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000500  00000000  00000000  0002a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001040b  00000000  00000000  0002a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000970e  00000000  00000000  0003aaa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00060b9d  00000000  00000000  000441b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a78  00000000  00000000  000a4d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000a67c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037c8 	.word	0x080037c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080037c8 	.word	0x080037c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fb1a 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f81a 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8d8 	bl	80003f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f8a6 	bl	8000394 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000248:	f000 f874 	bl	8000334 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 800024c:	4906      	ldr	r1, [pc, #24]	; (8000268 <main+0x34>)
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <main+0x38>)
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f001 fc90 	bl	8001b78 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *)"Enter ML:- ", 11, HAL_MAX_DELAY);
 8000258:	2301      	movs	r3, #1
 800025a:	425b      	negs	r3, r3
 800025c:	4904      	ldr	r1, [pc, #16]	; (8000270 <main+0x3c>)
 800025e:	4803      	ldr	r0, [pc, #12]	; (800026c <main+0x38>)
 8000260:	220b      	movs	r2, #11
 8000262:	f001 fbe9 	bl	8001a38 <HAL_UART_Transmit>
//  HAL_UART_Transmit(&huart1, (uint8_t *)123, 3, 10);
  while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x32>
 8000268:	20000188 	.word	0x20000188
 800026c:	20000078 	.word	0x20000078
 8000270:	080037e0 	.word	0x080037e0

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b097      	sub	sp, #92	; 0x5c
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2428      	movs	r4, #40	; 0x28
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	2330      	movs	r3, #48	; 0x30
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 fe19 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	2318      	movs	r3, #24
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	0018      	movs	r0, r3
 8000290:	2310      	movs	r3, #16
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 fe11 	bl	8002ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2314      	movs	r3, #20
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f002 fe0a 	bl	8002ebc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a8:	0021      	movs	r1, r4
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0252      	lsls	r2, r2, #9
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2280      	movs	r2, #128	; 0x80
 80002c8:	0352      	lsls	r2, r2, #13
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fe19 	bl	8000f0c <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002de:	f000 f96f 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	2118      	movs	r1, #24
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f921 	bl	8001548 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030a:	f000 f959 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fa59 	bl	80017d4 <HAL_RCCEx_PeriphCLKConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000326:	f000 f94b 	bl	80005c0 <Error_Handler>
  }
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b017      	add	sp, #92	; 0x5c
 8000330:	bd90      	pop	{r4, r7, pc}
	...

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_USART1_UART_Init+0x58>)
 800033a:	4a15      	ldr	r2, [pc, #84]	; (8000390 <MX_USART1_UART_Init+0x5c>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000340:	2296      	movs	r2, #150	; 0x96
 8000342:	0192      	lsls	r2, r2, #6
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_USART1_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART1_UART_Init+0x58>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART1_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fb09 	bl	8001990 <HAL_UART_Init>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000382:	f000 f91d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000078 	.word	0x20000078
 8000390:	40013800 	.word	0x40013800

08000394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_USART2_UART_Init+0x58>)
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <MX_USART2_UART_Init+0x5c>)
 800039c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a0:	2296      	movs	r2, #150	; 0x96
 80003a2:	0192      	lsls	r2, r2, #6
 80003a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fad9 	bl	8001990 <HAL_UART_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003e2:	f000 f8ed 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000100 	.word	0x20000100
 80003f0:	40004400 	.word	0x40004400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b08b      	sub	sp, #44	; 0x2c
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	2414      	movs	r4, #20
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f002 fd59 	bl	8002ebc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b40      	ldr	r3, [pc, #256]	; (800050c <MX_GPIO_Init+0x118>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b3f      	ldr	r3, [pc, #252]	; (800050c <MX_GPIO_Init+0x118>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0309      	lsls	r1, r1, #12
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b3c      	ldr	r3, [pc, #240]	; (800050c <MX_GPIO_Init+0x118>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	031b      	lsls	r3, r3, #12
 8000420:	4013      	ands	r3, r2
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	4b39      	ldr	r3, [pc, #228]	; (800050c <MX_GPIO_Init+0x118>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b38      	ldr	r3, [pc, #224]	; (800050c <MX_GPIO_Init+0x118>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	03c9      	lsls	r1, r1, #15
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b35      	ldr	r3, [pc, #212]	; (800050c <MX_GPIO_Init+0x118>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	03db      	lsls	r3, r3, #15
 800043c:	4013      	ands	r3, r2
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b32      	ldr	r3, [pc, #200]	; (800050c <MX_GPIO_Init+0x118>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_GPIO_Init+0x118>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0289      	lsls	r1, r1, #10
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <MX_GPIO_Init+0x118>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	029b      	lsls	r3, r3, #10
 8000458:	4013      	ands	r3, r2
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MX_GPIO_Init+0x118>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <MX_GPIO_Init+0x118>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	02c9      	lsls	r1, r1, #11
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b27      	ldr	r3, [pc, #156]	; (800050c <MX_GPIO_Init+0x118>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	02db      	lsls	r3, r3, #11
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2200      	movs	r2, #0
 8000480:	2120      	movs	r1, #32
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fd24 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_GPIO_Init+0x11c>)
 800048a:	2200      	movs	r2, #0
 800048c:	2108      	movs	r1, #8
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fd1e 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0192      	lsls	r2, r2, #6
 800049a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2284      	movs	r2, #132	; 0x84
 80004a0:	0392      	lsls	r2, r2, #14
 80004a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	4a19      	ldr	r2, [pc, #100]	; (8000514 <MX_GPIO_Init+0x120>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	0010      	movs	r0, r2
 80004b2:	f000 fb9d 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2220      	movs	r2, #32
 80004ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2201      	movs	r2, #1
 80004c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004ce:	193a      	adds	r2, r7, r4
 80004d0:	2390      	movs	r3, #144	; 0x90
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 fb8a 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004dc:	0021      	movs	r1, r4
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2208      	movs	r2, #8
 80004e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <MX_GPIO_Init+0x11c>)
 80004fa:	0019      	movs	r1, r3
 80004fc:	0010      	movs	r0, r2
 80004fe:	f000 fb77 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b00b      	add	sp, #44	; 0x2c
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000
 8000510:	48000400 	.word	0x48000400
 8000514:	48000800 	.word	0x48000800

08000518 <HAL_UART_RxCpltCallback>:

int rxInteger = 0;
uint8_t rxIndex = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <HAL_UART_RxCpltCallback+0x94>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d13b      	bne.n	80005a2 <HAL_UART_RxCpltCallback+0x8a>
  {
    if(rxData!='\n') // Ascii value of 'N' is 78 (N for NO)
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b0a      	cmp	r3, #10
 8000530:	d020      	beq.n	8000574 <HAL_UART_RxCpltCallback+0x5c>
    {
//    	rxString[rxIndex++] = rxData;
    	if((rxData >= '0' && rxData <= '9') || rxData == '.'){
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b2f      	cmp	r3, #47	; 0x2f
 8000538:	d903      	bls.n	8000542 <HAL_UART_RxCpltCallback+0x2a>
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b39      	cmp	r3, #57	; 0x39
 8000540:	d903      	bls.n	800054a <HAL_UART_RxCpltCallback+0x32>
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b2e      	cmp	r3, #46	; 0x2e
 8000548:	d10c      	bne.n	8000564 <HAL_UART_RxCpltCallback+0x4c>
    		rxInteger = rxInteger*10 + (rxData - '0');
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	0013      	movs	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	189b      	adds	r3, r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	001a      	movs	r2, r3
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	3b30      	subs	r3, #48	; 0x30
 800055e:	18d2      	adds	r2, r2, r3
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 8000562:	601a      	str	r2, [r3, #0]
    	}
//    	HAL_UART_Transmit(&huart1, (uint8_t *)&rxData, 1, 10);
//    	rxIndex++;
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000564:	2390      	movs	r3, #144	; 0x90
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fcaf 	bl	8000ed0 <HAL_GPIO_WritePin>
 8000572:	e010      	b.n	8000596 <HAL_UART_RxCpltCallback+0x7e>
    else // Ascii value of 'Y' is 89 (Y for YES)
    {
//    	HAL_UART_Transmit(&huart1, (uint8_t *)"received the data \n", 20, 10);
//    	int x = atoi(rxString);
    	char buffer[12];
    	sprintf(buffer, "%d\n", rxInteger);
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	490f      	ldr	r1, [pc, #60]	; (80005b8 <HAL_UART_RxCpltCallback+0xa0>)
 800057a:	240c      	movs	r4, #12
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	f002 fc7c 	bl	8002e7c <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 3, 10);
 8000584:	1939      	adds	r1, r7, r4
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 8000588:	230a      	movs	r3, #10
 800058a:	2203      	movs	r2, #3
 800058c:	f001 fa54 	bl	8001a38 <HAL_UART_Transmit>
//    	dispense(rxInteger);
    	rxInteger = 0;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000596:	4906      	ldr	r1, [pc, #24]	; (80005b0 <HAL_UART_RxCpltCallback+0x98>)
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 800059a:	2201      	movs	r2, #1
 800059c:	0018      	movs	r0, r3
 800059e:	f001 faeb 	bl	8001b78 <HAL_UART_Receive_IT>
  }
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b007      	add	sp, #28
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40013800 	.word	0x40013800
 80005b0:	20000188 	.word	0x20000188
 80005b4:	2000018c 	.word	0x2000018c
 80005b8:	080037ec 	.word	0x080037ec
 80005bc:	20000078 	.word	0x20000078

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0549      	lsls	r1, r1, #21
 80005f4:	430a      	orrs	r2, r1
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x44>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	055b      	lsls	r3, r3, #21
 8000600:	4013      	ands	r3, r2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08d      	sub	sp, #52	; 0x34
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	241c      	movs	r4, #28
 800061e:	193b      	adds	r3, r7, r4
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f002 fc48 	bl	8002ebc <memset>
  if(huart->Instance==USART1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a41      	ldr	r2, [pc, #260]	; (8000738 <HAL_UART_MspInit+0x124>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d13c      	bne.n	80006b0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <HAL_UART_MspInit+0x128>)
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	4b40      	ldr	r3, [pc, #256]	; (800073c <HAL_UART_MspInit+0x128>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	01c9      	lsls	r1, r1, #7
 8000640:	430a      	orrs	r2, r1
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <HAL_UART_MspInit+0x128>)
 8000646:	699a      	ldr	r2, [r3, #24]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	4013      	ands	r3, r2
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <HAL_UART_MspInit+0x128>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <HAL_UART_MspInit+0x128>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_UART_MspInit+0x128>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	22c0      	movs	r2, #192	; 0xc0
 8000672:	00d2      	lsls	r2, r2, #3
 8000674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	0021      	movs	r1, r4
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2202      	movs	r2, #2
 800067c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2203      	movs	r2, #3
 8000688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	187a      	adds	r2, r7, r1
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	0011      	movs	r1, r2
 8000698:	0018      	movs	r0, r3
 800069a:	f000 faa9 	bl	8000bf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	201b      	movs	r0, #27
 80006a4:	f000 f9f4 	bl	8000a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a8:	201b      	movs	r0, #27
 80006aa:	f000 fa06 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006ae:	e03f      	b.n	8000730 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <HAL_UART_MspInit+0x12c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d13a      	bne.n	8000730 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <HAL_UART_MspInit+0x128>)
 80006bc:	69da      	ldr	r2, [r3, #28]
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <HAL_UART_MspInit+0x128>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	61da      	str	r2, [r3, #28]
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_UART_MspInit+0x128>)
 80006ca:	69da      	ldr	r2, [r3, #28]
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4013      	ands	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_UART_MspInit+0x128>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_UART_MspInit+0x128>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0289      	lsls	r1, r1, #10
 80006e0:	430a      	orrs	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_UART_MspInit+0x128>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006f2:	211c      	movs	r1, #28
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2203      	movs	r2, #3
 800070a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2201      	movs	r2, #1
 8000710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	187a      	adds	r2, r7, r1
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fa68 	bl	8000bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	201c      	movs	r0, #28
 8000726:	f000 f9b3 	bl	8000a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800072a:	201c      	movs	r0, #28
 800072c:	f000 f9c5 	bl	8000aba <HAL_NVIC_EnableIRQ>
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b00d      	add	sp, #52	; 0x34
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	40021000 	.word	0x40021000
 8000740:	40004400 	.word	0x40004400

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f8ca 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <USART1_IRQHandler+0x14>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fa54 	bl	8001c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000078 	.word	0x20000078

0800078c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <USART2_IRQHandler+0x14>)
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fa48 	bl	8001c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000100 	.word	0x20000100

080007a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <_sbrk+0x5c>)
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <_sbrk+0x60>)
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <_sbrk+0x64>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <_sbrk+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d207      	bcs.n	80007e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d4:	f002 fb7a 	bl	8002ecc <__errno>
 80007d8:	0003      	movs	r3, r0
 80007da:	220c      	movs	r2, #12
 80007dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007de:	2301      	movs	r3, #1
 80007e0:	425b      	negs	r3, r3
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	18d2      	adds	r2, r2, r3
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <_sbrk+0x64>)
 80007f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b006      	add	sp, #24
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20004000 	.word	0x20004000
 8000804:	00000400 	.word	0x00000400
 8000808:	20000190 	.word	0x20000190
 800080c:	200002e0 	.word	0x200002e0

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000820:	f7ff fff6 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084a:	f002 fb45 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fcf1 	bl	8000234 <main>

08000852 <LoopForever>:

LoopForever:
    b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000860:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000864:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000868:	200002e0 	.word	0x200002e0

0800086c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_IRQHandler>
	...

08000870 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_Init+0x24>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_Init+0x24>)
 800087a:	2110      	movs	r1, #16
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f809 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000886:	f7ff fea1 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x5c>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	0019      	movs	r1, r3
 80008aa:	23fa      	movs	r3, #250	; 0xfa
 80008ac:	0098      	lsls	r0, r3, #2
 80008ae:	f7ff fc35 	bl	800011c <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	0019      	movs	r1, r3
 80008b6:	0020      	movs	r0, r4
 80008b8:	f7ff fc30 	bl	800011c <__udivsi3>
 80008bc:	0003      	movs	r3, r0
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f90b 	bl	8000ada <HAL_SYSTICK_Config>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e00f      	b.n	80008ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d80b      	bhi.n	80008ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 f8d8 	bl	8000a90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_InitTick+0x64>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	18d2      	adds	r2, r2, r3
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000008 	.word	0x20000008
 8000920:	20000194 	.word	0x20000194

08000924 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000194 	.word	0x20000194

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	0002      	movs	r2, r0
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b7f      	cmp	r3, #127	; 0x7f
 800094a:	d809      	bhi.n	8000960 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	001a      	movs	r2, r3
 8000952:	231f      	movs	r3, #31
 8000954:	401a      	ands	r2, r3
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_EnableIRQ+0x30>)
 8000958:	2101      	movs	r1, #1
 800095a:	4091      	lsls	r1, r2
 800095c:	000a      	movs	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
  }
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b7f      	cmp	r3, #127	; 0x7f
 8000980:	d828      	bhi.n	80009d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	33c0      	adds	r3, #192	; 0xc0
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	589b      	ldr	r3, [r3, r2]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	481f      	ldr	r0, [pc, #124]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	430a      	orrs	r2, r1
 80009cc:	33c0      	adds	r3, #192	; 0xc0
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009d2:	e031      	b.n	8000a38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0019      	movs	r1, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	400b      	ands	r3, r1
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3306      	adds	r3, #6
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	18d3      	adds	r3, r2, r3
 80009ea:	3304      	adds	r3, #4
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	0011      	movs	r1, r2
 80009f4:	2203      	movs	r2, #3
 80009f6:	400a      	ands	r2, r1
 80009f8:	00d2      	lsls	r2, r2, #3
 80009fa:	21ff      	movs	r1, #255	; 0xff
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	401a      	ands	r2, r3
 8000a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	2303      	movs	r3, #3
 8000a16:	4003      	ands	r3, r0
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001c      	movs	r4, r3
 8000a24:	230f      	movs	r3, #15
 8000a26:	4023      	ands	r3, r4
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	3306      	adds	r3, #6
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	18c3      	adds	r3, r0, r3
 8000a34:	3304      	adds	r3, #4
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b003      	add	sp, #12
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	045b      	lsls	r3, r3, #17
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d301      	bcc.n	8000a60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e010      	b.n	8000a82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <SysTick_Config+0x44>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	3a01      	subs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff7c 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x44>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	1c02      	adds	r2, r0, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ff33 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ffaf 	bl	8000a48 <SysTick_Config>
 8000aea:	0003      	movs	r3, r0
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2221      	movs	r2, #33	; 0x21
 8000b00:	5c9b      	ldrb	r3, [r3, r2]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d008      	beq.n	8000b1a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	2100      	movs	r1, #0
 8000b14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e020      	b.n	8000b5c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	210e      	movs	r1, #14
 8000b26:	438a      	bics	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	438a      	bics	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b42:	2101      	movs	r1, #1
 8000b44:	4091      	lsls	r1, r2
 8000b46:	000a      	movs	r2, r1
 8000b48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2221      	movs	r2, #33	; 0x21
 8000b4e:	2101      	movs	r1, #1
 8000b50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2220      	movs	r2, #32
 8000b56:	2100      	movs	r1, #0
 8000b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2221      	movs	r2, #33	; 0x21
 8000b78:	5c9b      	ldrb	r3, [r3, r2]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d006      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2204      	movs	r2, #4
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e028      	b.n	8000be0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	210e      	movs	r1, #14
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	438a      	bics	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2221      	movs	r2, #33	; 0x21
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2220      	movs	r2, #32
 8000bca:	2100      	movs	r1, #0
 8000bcc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	0010      	movs	r0, r2
 8000bde:	4798      	blx	r3
    }
  }
  return status;
 8000be0:	230f      	movs	r3, #15
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	781b      	ldrb	r3, [r3, #0]
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e14f      	b.n	8000ea0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x28>
 8000c16:	e140      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	43da      	mvns	r2, r3
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	58d3      	ldr	r3, [r2, r3]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2207      	movs	r2, #7
 8000cec:	4013      	ands	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2107      	movs	r1, #7
 8000d06:	400b      	ands	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	401a      	ands	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	029b      	lsls	r3, r3, #10
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x174>
 8000d62:	e09a      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d66:	699a      	ldr	r2, [r3, #24]
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1de>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a43      	ldr	r2, [pc, #268]	; (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1da>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	400a      	ands	r2, r1
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	035b      	lsls	r3, r3, #13
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	039b      	lsls	r3, r3, #14
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	029b      	lsls	r3, r3, #10
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	40da      	lsrs	r2, r3
 8000ea8:	1e13      	subs	r3, r2, #0
 8000eaa:	d000      	beq.n	8000eae <HAL_GPIO_Init+0x2be>
 8000eac:	e6a8      	b.n	8000c00 <HAL_GPIO_Init+0x10>
  } 
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	0008      	movs	r0, r1
 8000eda:	0011      	movs	r1, r2
 8000edc:	1cbb      	adds	r3, r7, #2
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	1c7b      	adds	r3, r7, #1
 8000ee4:	1c0a      	adds	r2, r1, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef0:	1cbb      	adds	r3, r7, #2
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e003      	b.n	8000f02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e305      	b.n	800152a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x1e>
 8000f28:	e08d      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2a:	4bc5      	ldr	r3, [pc, #788]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00e      	beq.n	8000f54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f36:	4bc2      	ldr	r3, [pc, #776]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
 8000f42:	4bbf      	ldr	r3, [pc, #764]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d10d      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	4bba      	ldr	r3, [pc, #744]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x56>
 8000f60:	e070      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d000      	beq.n	8000f6c <HAL_RCC_OscConfig+0x60>
 8000f6a:	e06b      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e2dc      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x7c>
 8000f78:	4bb1      	ldr	r3, [pc, #708]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4bb0      	ldr	r3, [pc, #704]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0249      	lsls	r1, r1, #9
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e02f      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x9e>
 8000f90:	4bab      	ldr	r3, [pc, #684]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4baa      	ldr	r3, [pc, #680]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f96:	49ab      	ldr	r1, [pc, #684]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	4ba8      	ldr	r3, [pc, #672]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4ba7      	ldr	r3, [pc, #668]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fa2:	49a9      	ldr	r1, [pc, #676]	; (8001248 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e01e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xc4>
 8000fb2:	4ba3      	ldr	r3, [pc, #652]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4ba2      	ldr	r3, [pc, #648]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	4b9f      	ldr	r3, [pc, #636]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b9e      	ldr	r3, [pc, #632]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000fd0:	4b9b      	ldr	r3, [pc, #620]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b9a      	ldr	r3, [pc, #616]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fd6:	499b      	ldr	r1, [pc, #620]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	4b98      	ldr	r3, [pc, #608]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b97      	ldr	r3, [pc, #604]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fe2:	4999      	ldr	r1, [pc, #612]	; (8001248 <HAL_RCC_OscConfig+0x33c>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d014      	beq.n	800101a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc98 	bl	8000924 <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fc93 	bl	8000924 <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e28e      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100c:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0xee>
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fc83 	bl	8000924 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc7e 	bl	8000924 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e279      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b82      	ldr	r3, [pc, #520]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x118>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x146>
 8001050:	e06c      	b.n	800112c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001052:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	220c      	movs	r2, #12
 8001058:	4013      	ands	r3, r2
 800105a:	d00e      	beq.n	800107a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
 8001064:	2b08      	cmp	r3, #8
 8001066:	d11f      	bne.n	80010a8 <HAL_RCC_OscConfig+0x19c>
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	401a      	ands	r2, r3
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	429a      	cmp	r2, r3
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x184>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d001      	beq.n	8001090 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e24c      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	22f8      	movs	r2, #248	; 0xf8
 8001096:	4393      	bics	r3, r2
 8001098:	0019      	movs	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00da      	lsls	r2, r3, #3
 80010a0:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e041      	b.n	800112c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d024      	beq.n	80010fa <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc32 	bl	8000924 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fc2d 	bl	8000924 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e228      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f1      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	22f8      	movs	r2, #248	; 0xf8
 80010e8:	4393      	bics	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	00da      	lsls	r2, r3, #3
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e018      	b.n	800112c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001100:	2101      	movs	r1, #1
 8001102:	438a      	bics	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc0d 	bl	8000924 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fc08 	bl	8000924 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e203      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d1f1      	bne.n	8001110 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2208      	movs	r2, #8
 8001132:	4013      	ands	r3, r2
 8001134:	d036      	beq.n	80011a4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001144:	2101      	movs	r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fbeb 	bl	8000924 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fbe6 	bl	8000924 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1e1      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d0f1      	beq.n	8001154 <HAL_RCC_OscConfig+0x248>
 8001170:	e018      	b.n	80011a4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001178:	2101      	movs	r1, #1
 800117a:	438a      	bics	r2, r1
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbd1 	bl	8000924 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fbcc 	bl	8000924 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1c7      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d1f1      	bne.n	8001188 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2204      	movs	r2, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2a4>
 80011ae:	e0b5      	b.n	800131c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b0:	201f      	movs	r0, #31
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011ba:	69da      	ldr	r2, [r3, #28]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	055b      	lsls	r3, r3, #21
 80011c0:	4013      	ands	r3, r2
 80011c2:	d110      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0549      	lsls	r1, r1, #21
 80011ce:	430a      	orrs	r2, r1
 80011d0:	61da      	str	r2, [r3, #28]
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	055b      	lsls	r3, r3, #21
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	d11a      	bne.n	8001228 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0049      	lsls	r1, r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001200:	f7ff fb90 	bl	8000924 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fb8b 	bl	8000924 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e186      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x340>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10f      	bne.n	8001250 <HAL_RCC_OscConfig+0x344>
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	e036      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	fffeffff 	.word	0xfffeffff
 8001248:	fffbffff 	.word	0xfffbffff
 800124c:	40007000 	.word	0x40007000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x366>
 8001258:	4bb6      	ldr	r3, [pc, #728]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4bb5      	ldr	r3, [pc, #724]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800125e:	2101      	movs	r1, #1
 8001260:	438a      	bics	r2, r1
 8001262:	621a      	str	r2, [r3, #32]
 8001264:	4bb3      	ldr	r3, [pc, #716]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4bb2      	ldr	r3, [pc, #712]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800126a:	2104      	movs	r1, #4
 800126c:	438a      	bics	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x388>
 800127a:	4bae      	ldr	r3, [pc, #696]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	4bad      	ldr	r3, [pc, #692]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001280:	2104      	movs	r1, #4
 8001282:	430a      	orrs	r2, r1
 8001284:	621a      	str	r2, [r3, #32]
 8001286:	4bab      	ldr	r3, [pc, #684]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	4baa      	ldr	r3, [pc, #680]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	621a      	str	r2, [r3, #32]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 8001294:	4ba7      	ldr	r3, [pc, #668]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	4ba6      	ldr	r3, [pc, #664]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	621a      	str	r2, [r3, #32]
 80012a0:	4ba4      	ldr	r3, [pc, #656]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	438a      	bics	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d014      	beq.n	80012de <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fb36 	bl	8000924 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	e009      	b.n	80012d2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb31 	bl	8000924 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a9b      	ldr	r2, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e12b      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4b98      	ldr	r3, [pc, #608]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x3b2>
 80012dc:	e013      	b.n	8001306 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fb21 	bl	8000924 <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	e009      	b.n	80012fc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fb1c 	bl	8000924 <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a91      	ldr	r2, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e116      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b8d      	ldr	r3, [pc, #564]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001306:	231f      	movs	r3, #31
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	4b87      	ldr	r3, [pc, #540]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001316:	4989      	ldr	r1, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x630>)
 8001318:	400a      	ands	r2, r1
 800131a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2210      	movs	r2, #16
 8001322:	4013      	ands	r3, r2
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d12a      	bne.n	8001384 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132e:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001332:	4b80      	ldr	r3, [pc, #512]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001334:	2104      	movs	r1, #4
 8001336:	430a      	orrs	r2, r1
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800133a:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001340:	2101      	movs	r1, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff faed 	bl	8000924 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001350:	f7ff fae8 	bl	8000924 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0e3      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d0f1      	beq.n	8001350 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800136c:	4b71      	ldr	r3, [pc, #452]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	22f8      	movs	r2, #248	; 0xf8
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	00da      	lsls	r2, r3, #3
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
 8001382:	e034      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	3305      	adds	r3, #5
 800138a:	d111      	bne.n	80013b0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800138e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001390:	4b68      	ldr	r3, [pc, #416]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001392:	2104      	movs	r1, #4
 8001394:	438a      	bics	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	22f8      	movs	r2, #248	; 0xf8
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	00da      	lsls	r2, r3, #3
 80013a8:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
 80013ae:	e01e      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013b0:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013b6:	2104      	movs	r1, #4
 80013b8:	430a      	orrs	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013bc:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c0:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	438a      	bics	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff faac 	bl	8000924 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013d2:	f7ff faa7 	bl	8000924 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0a2      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d1f1      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4ec>
 80013f6:	e097      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x4fa>
 8001404:	e06b      	b.n	80014de <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d14c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001414:	494a      	ldr	r1, [pc, #296]	; (8001540 <HAL_RCC_OscConfig+0x634>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fa83 	bl	8000924 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fa7e 	bl	8000924 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e079      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	049b      	lsls	r3, r3, #18
 800143e:	4013      	ands	r3, r2
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	220f      	movs	r2, #15
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001452:	430a      	orrs	r2, r1
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a3a      	ldr	r2, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x638>)
 800145c:	4013      	ands	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	431a      	orrs	r2, r3
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0449      	lsls	r1, r1, #17
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fa51 	bl	8000924 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fa4c 	bl	8000924 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e047      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	049b      	lsls	r3, r3, #18
 80014a2:	4013      	ands	r3, r2
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x57c>
 80014a6:	e03f      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014ae:	4924      	ldr	r1, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x634>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fa36 	bl	8000924 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fa31 	bl	8000924 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e02c      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	049b      	lsls	r3, r3, #18
 80014d8:	4013      	ands	r3, r2
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x5b2>
 80014dc:	e024      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e01f      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	23c0      	movs	r3, #192	; 0xc0
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	429a      	cmp	r2, r3
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	220f      	movs	r2, #15
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	23f0      	movs	r3, #240	; 0xf0
 8001518:	039b      	lsls	r3, r3, #14
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b008      	add	sp, #32
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40021000 	.word	0x40021000
 8001538:	00001388 	.word	0x00001388
 800153c:	efffffff 	.word	0xefffffff
 8001540:	feffffff 	.word	0xfeffffff
 8001544:	ffc27fff 	.word	0xffc27fff

08001548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b3      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d911      	bls.n	800158e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	4013      	ands	r3, r2
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e09a      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d015      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	d006      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015a8:	21e0      	movs	r1, #224	; 0xe0
 80015aa:	00c9      	lsls	r1, r1, #3
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	22f0      	movs	r2, #240	; 0xf0
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d040      	beq.n	8001650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d114      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06e      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	049b      	lsls	r3, r3, #18
 80015f6:	4013      	ands	r3, r2
 80015f8:	d108      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e062      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e05b      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff f980 	bl	8000924 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001628:	e009      	b.n	800163e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff f97b 	bl	8000924 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x18c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e042      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	220c      	movs	r2, #12
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1ec      	bne.n	800162a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d211      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_RCC_ClockConfig+0x190>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016a0:	f000 f820 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a4:	0001      	movs	r1, r0
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	220f      	movs	r2, #15
 80016ae:	4013      	ands	r3, r2
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x194>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	000a      	movs	r2, r1
 80016b6:	40da      	lsrs	r2, r3
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x198>)
 80016ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff f8eb 	bl	8000898 <HAL_InitTick>
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	fffff8ff 	.word	0xfffff8ff
 80016dc:	080037f0 	.word	0x080037f0
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	220c      	movs	r2, #12
 8001708:	4013      	ands	r3, r2
 800170a:	2b04      	cmp	r3, #4
 800170c:	d002      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x30>
 800170e:	2b08      	cmp	r3, #8
 8001710:	d003      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0x36>
 8001712:	e02e      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001716:	613b      	str	r3, [r7, #16]
      break;
 8001718:	e02e      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	220f      	movs	r2, #15
 8001720:	4013      	ands	r3, r2
 8001722:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_RCC_GetSysClockFreq+0xa0>)
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	220f      	movs	r2, #15
 800172e:	4013      	ands	r3, r2
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_RCC_GetSysClockFreq+0xac>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	23c0      	movs	r3, #192	; 0xc0
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	401a      	ands	r2, r3
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	429a      	cmp	r2, r3
 8001744:	d109      	bne.n	800175a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	480f      	ldr	r0, [pc, #60]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa4>)
 800174a:	f7fe fce7 	bl	800011c <__udivsi3>
 800174e:	0003      	movs	r3, r0
 8001750:	001a      	movs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4353      	muls	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e008      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa4>)
 800175e:	f7fe fcdd 	bl	800011c <__udivsi3>
 8001762:	0003      	movs	r3, r0
 8001764:	001a      	movs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4353      	muls	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
      break;
 8001770:	e002      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001774:	613b      	str	r3, [r7, #16]
      break;
 8001776:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001778:	693b      	ldr	r3, [r7, #16]
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b006      	add	sp, #24
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	40021000 	.word	0x40021000
 8001788:	007a1200 	.word	0x007a1200
 800178c:	08003808 	.word	0x08003808
 8001790:	08003818 	.word	0x08003818

08001794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000000 	.word	0x20000000

080017a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017ac:	f7ff fff2 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b0:	0001      	movs	r1, r0
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	2207      	movs	r2, #7
 80017ba:	4013      	ands	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	40d9      	lsrs	r1, r3
 80017c2:	000b      	movs	r3, r1
}    
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08003800 	.word	0x08003800

080017d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80017f0:	e08e      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2017      	movs	r0, #23
 80017f4:	183b      	adds	r3, r7, r0
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	055b      	lsls	r3, r3, #21
 8001802:	4013      	ands	r3, r2
 8001804:	d110      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0549      	lsls	r1, r1, #21
 8001810:	430a      	orrs	r2, r1
 8001812:	61da      	str	r2, [r3, #28]
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	055b      	lsls	r3, r3, #21
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	183b      	adds	r3, r7, r0
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d11a      	bne.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001834:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0049      	lsls	r1, r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff f86f 	bl	8000924 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff f86a 	bl	8000924 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e087      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4013      	ands	r3, r2
 8001868:	d0f0      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4013      	ands	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d034      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4013      	ands	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d02c      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0249      	lsls	r1, r1, #9
 80018a0:	430a      	orrs	r2, r1
 80018a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018aa:	4936      	ldr	r1, [pc, #216]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff f831 	bl	8000924 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e009      	b.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f82c 	bl	8000924 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e048      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018fa:	2317      	movs	r3, #23
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800190a:	4920      	ldr	r1, [pc, #128]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800190c:	400a      	ands	r2, r1
 800190e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	2203      	movs	r2, #3
 8001920:	4393      	bics	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800192a:	430a      	orrs	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2220      	movs	r2, #32
 8001934:	4013      	ands	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	2210      	movs	r2, #16
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001948:	430a      	orrs	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	4013      	ands	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	4393      	bics	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001968:	430a      	orrs	r2, r1
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	fffffcff 	.word	0xfffffcff
 8001984:	fffeffff 	.word	0xfffeffff
 8001988:	00001388 	.word	0x00001388
 800198c:	efffffff 	.word	0xefffffff

08001990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e044      	b.n	8001a2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2278      	movs	r2, #120	; 0x78
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7fe fe2d 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2224      	movs	r2, #36	; 0x24
 80019be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2101      	movs	r1, #1
 80019cc:	438a      	bics	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 fc0c 	bl	80021f0 <UART_SetConfig>
 80019d8:	0003      	movs	r3, r0
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e024      	b.n	8001a2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fd57 	bl	80024a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	490d      	ldr	r1, [pc, #52]	; (8001a34 <HAL_UART_Init+0xa4>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	438a      	bics	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f000 fdef 	bl	8002608 <UART_CheckIdleState>
 8001a2a:	0003      	movs	r3, r0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	fffff7ff 	.word	0xfffff7ff

08001a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d000      	beq.n	8001a52 <HAL_UART_Transmit+0x1a>
 8001a50:	e08d      	b.n	8001b6e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_UART_Transmit+0x28>
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e085      	b.n	8001b70 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d109      	bne.n	8001a84 <HAL_UART_Transmit+0x4c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e075      	b.n	8001b70 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2284      	movs	r2, #132	; 0x84
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a92:	f7fe ff47 	bl	8000924 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1dba      	adds	r2, r7, #6
 8001a9e:	2150      	movs	r1, #80	; 0x50
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1dba      	adds	r2, r7, #6
 8001aa8:	2152      	movs	r1, #82	; 0x52
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d108      	bne.n	8001acc <HAL_UART_Transmit+0x94>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	e003      	b.n	8001ad4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ad4:	e030      	b.n	8001b38 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	0013      	movs	r3, r2
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	f000 fe38 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e03c      	b.n	8001b70 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	05d2      	lsls	r2, r2, #23
 8001b06:	0dd2      	lsrs	r2, r2, #23
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	e008      	b.n	8001b26 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2252      	movs	r2, #82	; 0x52
 8001b2a:	5a9b      	ldrh	r3, [r3, r2]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b299      	uxth	r1, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2252      	movs	r2, #82	; 0x52
 8001b36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2252      	movs	r2, #82	; 0x52
 8001b3c:	5a9b      	ldrh	r3, [r3, r2]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1c8      	bne.n	8001ad6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	f000 fe01 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e005      	b.n	8001b70 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b008      	add	sp, #32
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	1dbb      	adds	r3, r7, #6
 8001b84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	589b      	ldr	r3, [r3, r2]
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d145      	bne.n	8001c1c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_UART_Receive_IT+0x26>
 8001b96:	1dbb      	adds	r3, r7, #6
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e03d      	b.n	8001c1e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d109      	bne.n	8001bc2 <HAL_UART_Receive_IT+0x4a>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02d      	b.n	8001c1e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bda:	613b      	str	r3, [r7, #16]
  return(result);
 8001bdc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f383 8810 	msr	PRIMASK, r3
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	04c9      	lsls	r1, r1, #19
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f383 8810 	msr	PRIMASK, r3
}
 8001c08:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c0a:	1dbb      	adds	r3, r7, #6
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fe0a 	bl	800282c <UART_Start_Receive_IT>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	e000      	b.n	8001c1e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b008      	add	sp, #32
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b0ab      	sub	sp, #172	; 0xac
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	22a4      	movs	r2, #164	; 0xa4
 8001c38:	18b9      	adds	r1, r7, r2
 8001c3a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	20a0      	movs	r0, #160	; 0xa0
 8001c44:	1839      	adds	r1, r7, r0
 8001c46:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	219c      	movs	r1, #156	; 0x9c
 8001c50:	1879      	adds	r1, r7, r1
 8001c52:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c54:	0011      	movs	r1, r2
 8001c56:	18bb      	adds	r3, r7, r2
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a99      	ldr	r2, [pc, #612]	; (8001ec0 <HAL_UART_IRQHandler+0x298>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2298      	movs	r2, #152	; 0x98
 8001c60:	18bc      	adds	r4, r7, r2
 8001c62:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001c64:	18bb      	adds	r3, r7, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d114      	bne.n	8001c96 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	4013      	ands	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d00a      	beq.n	8001c96 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <HAL_UART_IRQHandler+0x62>
 8001c88:	e286      	b.n	8002198 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	0010      	movs	r0, r2
 8001c92:	4798      	blx	r3
      }
      return;
 8001c94:	e280      	b.n	8002198 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001c96:	2398      	movs	r3, #152	; 0x98
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d100      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x7a>
 8001ca0:	e114      	b.n	8001ecc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ca2:	239c      	movs	r3, #156	; 0x9c
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d106      	bne.n	8001cbc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001cae:	23a0      	movs	r3, #160	; 0xa0
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a83      	ldr	r2, [pc, #524]	; (8001ec4 <HAL_UART_IRQHandler+0x29c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_UART_IRQHandler+0x94>
 8001cba:	e107      	b.n	8001ecc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001cbc:	23a4      	movs	r3, #164	; 0xa4
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d012      	beq.n	8001cee <HAL_UART_IRQHandler+0xc6>
 8001cc8:	23a0      	movs	r3, #160	; 0xa0
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00b      	beq.n	8001cee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2284      	movs	r2, #132	; 0x84
 8001ce2:	589b      	ldr	r3, [r3, r2]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2184      	movs	r1, #132	; 0x84
 8001cec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cee:	23a4      	movs	r3, #164	; 0xa4
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d011      	beq.n	8001d1e <HAL_UART_IRQHandler+0xf6>
 8001cfa:	239c      	movs	r3, #156	; 0x9c
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d00b      	beq.n	8001d1e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2284      	movs	r2, #132	; 0x84
 8001d12:	589b      	ldr	r3, [r3, r2]
 8001d14:	2204      	movs	r2, #4
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2184      	movs	r1, #132	; 0x84
 8001d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d1e:	23a4      	movs	r3, #164	; 0xa4
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2204      	movs	r2, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d011      	beq.n	8001d4e <HAL_UART_IRQHandler+0x126>
 8001d2a:	239c      	movs	r3, #156	; 0x9c
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2284      	movs	r2, #132	; 0x84
 8001d42:	589b      	ldr	r3, [r3, r2]
 8001d44:	2202      	movs	r2, #2
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2184      	movs	r1, #132	; 0x84
 8001d4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d4e:	23a4      	movs	r3, #164	; 0xa4
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2208      	movs	r2, #8
 8001d56:	4013      	ands	r3, r2
 8001d58:	d017      	beq.n	8001d8a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d5a:	23a0      	movs	r3, #160	; 0xa0
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
 8001d64:	d105      	bne.n	8001d72 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001d66:	239c      	movs	r3, #156	; 0x9c
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d70:	d00b      	beq.n	8001d8a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2284      	movs	r2, #132	; 0x84
 8001d7e:	589b      	ldr	r3, [r3, r2]
 8001d80:	2208      	movs	r2, #8
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2184      	movs	r1, #132	; 0x84
 8001d88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d8a:	23a4      	movs	r3, #164	; 0xa4
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4013      	ands	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x198>
 8001d98:	23a0      	movs	r3, #160	; 0xa0
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	04db      	lsls	r3, r3, #19
 8001da2:	4013      	ands	r3, r2
 8001da4:	d00c      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2284      	movs	r2, #132	; 0x84
 8001db4:	589b      	ldr	r3, [r3, r2]
 8001db6:	2220      	movs	r2, #32
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2184      	movs	r1, #132	; 0x84
 8001dbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2284      	movs	r2, #132	; 0x84
 8001dc4:	589b      	ldr	r3, [r3, r2]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d100      	bne.n	8001dcc <HAL_UART_IRQHandler+0x1a4>
 8001dca:	e1e7      	b.n	800219c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dcc:	23a4      	movs	r3, #164	; 0xa4
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dd8:	23a0      	movs	r3, #160	; 0xa0
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	d008      	beq.n	8001df6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	0010      	movs	r0, r2
 8001df4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2284      	movs	r2, #132	; 0x84
 8001dfa:	589b      	ldr	r3, [r3, r2]
 8001dfc:	2194      	movs	r1, #148	; 0x94
 8001dfe:	187a      	adds	r2, r7, r1
 8001e00:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d004      	beq.n	8001e1a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2228      	movs	r2, #40	; 0x28
 8001e16:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e18:	d047      	beq.n	8001eaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fdcf 	bl	80029c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d137      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e30:	f3ef 8310 	mrs	r3, PRIMASK
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e38:	2090      	movs	r0, #144	; 0x90
 8001e3a:	183a      	adds	r2, r7, r0
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e44:	f383 8810 	msr	PRIMASK, r3
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	438a      	bics	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e62:	f383 8810 	msr	PRIMASK, r3
}
 8001e66:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_UART_IRQHandler+0x2a0>)
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7fe fe71 	bl	8000b64 <HAL_DMA_Abort_IT>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d01a      	beq.n	8001ebc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	0018      	movs	r0, r3
 8001e92:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e94:	e012      	b.n	8001ebc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 f995 	bl	80021c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9e:	e00d      	b.n	8001ebc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f990 	bl	80021c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	e008      	b.n	8001ebc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 f98b 	bl	80021c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2284      	movs	r2, #132	; 0x84
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001eba:	e16f      	b.n	800219c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	46c0      	nop			; (mov r8, r8)
    return;
 8001ebe:	e16d      	b.n	800219c <HAL_UART_IRQHandler+0x574>
 8001ec0:	0000080f 	.word	0x0000080f
 8001ec4:	04000120 	.word	0x04000120
 8001ec8:	08002a89 	.word	0x08002a89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d000      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x2ae>
 8001ed4:	e139      	b.n	800214a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ed6:	23a4      	movs	r3, #164	; 0xa4
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <HAL_UART_IRQHandler+0x2bc>
 8001ee2:	e132      	b.n	800214a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ee4:	23a0      	movs	r3, #160	; 0xa0
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2210      	movs	r2, #16
 8001eec:	4013      	ands	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <HAL_UART_IRQHandler+0x2ca>
 8001ef0:	e12b      	b.n	800214a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d000      	beq.n	8001f0a <HAL_UART_IRQHandler+0x2e2>
 8001f08:	e09f      	b.n	800204a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	217e      	movs	r1, #126	; 0x7e
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d100      	bne.n	8001f22 <HAL_UART_IRQHandler+0x2fa>
 8001f20:	e13e      	b.n	80021a0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2258      	movs	r2, #88	; 0x58
 8001f26:	5a9b      	ldrh	r3, [r3, r2]
 8001f28:	187a      	adds	r2, r7, r1
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d300      	bcc.n	8001f32 <HAL_UART_IRQHandler+0x30a>
 8001f30:	e136      	b.n	80021a0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	187a      	adds	r2, r7, r1
 8001f36:	215a      	movs	r1, #90	; 0x5a
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d06f      	beq.n	8002026 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f46:	f3ef 8310 	mrs	r3, PRIMASK
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f50:	2301      	movs	r3, #1
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	f383 8810 	msr	PRIMASK, r3
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4992      	ldr	r1, [pc, #584]	; (80021b0 <HAL_UART_IRQHandler+0x588>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	f383 8810 	msr	PRIMASK, r3
}
 8001f76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f78:	f3ef 8310 	mrs	r3, PRIMASK
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f80:	677b      	str	r3, [r7, #116]	; 0x74
 8001f82:	2301      	movs	r3, #1
 8001f84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f88:	f383 8810 	msr	PRIMASK, r3
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	438a      	bics	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa4:	f383 8810 	msr	PRIMASK, r3
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001faa:	f3ef 8310 	mrs	r3, PRIMASK
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fba:	f383 8810 	msr	PRIMASK, r3
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	438a      	bics	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd6:	f383 8810 	msr	PRIMASK, r3
}
 8001fda:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fea:	f3ef 8310 	mrs	r3, PRIMASK
 8001fee:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffa:	f383 8810 	msr	PRIMASK, r3
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2110      	movs	r1, #16
 800200c:	438a      	bics	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002012:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002016:	f383 8810 	msr	PRIMASK, r3
}
 800201a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe fd67 	bl	8000af4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2258      	movs	r2, #88	; 0x58
 8002030:	5a9a      	ldrh	r2, [r3, r2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	215a      	movs	r1, #90	; 0x5a
 8002036:	5a5b      	ldrh	r3, [r3, r1]
 8002038:	b29b      	uxth	r3, r3
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	b29a      	uxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f8c8 	bl	80021d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002048:	e0aa      	b.n	80021a0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2258      	movs	r2, #88	; 0x58
 800204e:	5a99      	ldrh	r1, [r3, r2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	225a      	movs	r2, #90	; 0x5a
 8002054:	5a9b      	ldrh	r3, [r3, r2]
 8002056:	b29a      	uxth	r2, r3
 8002058:	208e      	movs	r0, #142	; 0x8e
 800205a:	183b      	adds	r3, r7, r0
 800205c:	1a8a      	subs	r2, r1, r2
 800205e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	225a      	movs	r2, #90	; 0x5a
 8002064:	5a9b      	ldrh	r3, [r3, r2]
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d100      	bne.n	800206e <HAL_UART_IRQHandler+0x446>
 800206c:	e09a      	b.n	80021a4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800206e:	183b      	adds	r3, r7, r0
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <HAL_UART_IRQHandler+0x450>
 8002076:	e095      	b.n	80021a4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002078:	f3ef 8310 	mrs	r3, PRIMASK
 800207c:	60fb      	str	r3, [r7, #12]
  return(result);
 800207e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002080:	2488      	movs	r4, #136	; 0x88
 8002082:	193a      	adds	r2, r7, r4
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	2301      	movs	r3, #1
 8002088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f383 8810 	msr	PRIMASK, r3
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4945      	ldr	r1, [pc, #276]	; (80021b4 <HAL_UART_IRQHandler+0x58c>)
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f383 8810 	msr	PRIMASK, r3
}
 80020ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b0:	f3ef 8310 	mrs	r3, PRIMASK
 80020b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80020b6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b8:	2484      	movs	r4, #132	; 0x84
 80020ba:	193a      	adds	r2, r7, r4
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f383 8810 	msr	PRIMASK, r3
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	438a      	bics	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f383 8810 	msr	PRIMASK, r3
}
 80020e6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	2120      	movs	r1, #32
 80020ee:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002104:	2480      	movs	r4, #128	; 0x80
 8002106:	193a      	adds	r2, r7, r4
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	f383 8810 	msr	PRIMASK, r3
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2110      	movs	r1, #16
 8002122:	438a      	bics	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	193b      	adds	r3, r7, r4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	f383 8810 	msr	PRIMASK, r3
}
 8002132:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800213a:	183b      	adds	r3, r7, r0
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0011      	movs	r1, r2
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f848 	bl	80021d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002148:	e02c      	b.n	80021a4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800214a:	23a4      	movs	r3, #164	; 0xa4
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	4013      	ands	r3, r2
 8002154:	d00f      	beq.n	8002176 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002156:	23a0      	movs	r3, #160	; 0xa0
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	4013      	ands	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01e      	beq.n	80021a8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	0010      	movs	r0, r2
 8002172:	4798      	blx	r3
    }
    return;
 8002174:	e018      	b.n	80021a8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002176:	23a4      	movs	r3, #164	; 0xa4
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	4013      	ands	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_UART_IRQHandler+0x582>
 8002182:	23a0      	movs	r3, #160	; 0xa0
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	4013      	ands	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fc90 	bl	8002ab6 <UART_EndTransmit_IT>
    return;
 8002196:	e008      	b.n	80021aa <HAL_UART_IRQHandler+0x582>
      return;
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	e006      	b.n	80021aa <HAL_UART_IRQHandler+0x582>
    return;
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	e004      	b.n	80021aa <HAL_UART_IRQHandler+0x582>
      return;
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	e002      	b.n	80021aa <HAL_UART_IRQHandler+0x582>
      return;
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	e000      	b.n	80021aa <HAL_UART_IRQHandler+0x582>
    return;
 80021a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b02b      	add	sp, #172	; 0xac
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	fffffeff 	.word	0xfffffeff
 80021b4:	fffffedf 	.word	0xfffffedf

080021b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	000a      	movs	r2, r1
 80021e2:	1cbb      	adds	r3, r7, #2
 80021e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b002      	add	sp, #8
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021f8:	231e      	movs	r3, #30
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a97      	ldr	r2, [pc, #604]	; (800247c <UART_SetConfig+0x28c>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a92      	ldr	r2, [pc, #584]	; (8002480 <UART_SetConfig+0x290>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a89      	ldr	r2, [pc, #548]	; (8002484 <UART_SetConfig+0x294>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a85      	ldr	r2, [pc, #532]	; (8002488 <UART_SetConfig+0x298>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d127      	bne.n	80022c6 <UART_SetConfig+0xd6>
 8002276:	4b85      	ldr	r3, [pc, #532]	; (800248c <UART_SetConfig+0x29c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	2203      	movs	r2, #3
 800227c:	4013      	ands	r3, r2
 800227e:	2b03      	cmp	r3, #3
 8002280:	d00d      	beq.n	800229e <UART_SetConfig+0xae>
 8002282:	d81b      	bhi.n	80022bc <UART_SetConfig+0xcc>
 8002284:	2b02      	cmp	r3, #2
 8002286:	d014      	beq.n	80022b2 <UART_SetConfig+0xc2>
 8002288:	d818      	bhi.n	80022bc <UART_SetConfig+0xcc>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <UART_SetConfig+0xa4>
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00a      	beq.n	80022a8 <UART_SetConfig+0xb8>
 8002292:	e013      	b.n	80022bc <UART_SetConfig+0xcc>
 8002294:	231f      	movs	r3, #31
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e035      	b.n	800230a <UART_SetConfig+0x11a>
 800229e:	231f      	movs	r3, #31
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e030      	b.n	800230a <UART_SetConfig+0x11a>
 80022a8:	231f      	movs	r3, #31
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2204      	movs	r2, #4
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e02b      	b.n	800230a <UART_SetConfig+0x11a>
 80022b2:	231f      	movs	r3, #31
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2208      	movs	r2, #8
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e026      	b.n	800230a <UART_SetConfig+0x11a>
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2210      	movs	r2, #16
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e021      	b.n	800230a <UART_SetConfig+0x11a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a71      	ldr	r2, [pc, #452]	; (8002490 <UART_SetConfig+0x2a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d104      	bne.n	80022da <UART_SetConfig+0xea>
 80022d0:	231f      	movs	r3, #31
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e017      	b.n	800230a <UART_SetConfig+0x11a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <UART_SetConfig+0x2a4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d104      	bne.n	80022ee <UART_SetConfig+0xfe>
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e00d      	b.n	800230a <UART_SetConfig+0x11a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <UART_SetConfig+0x2a8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d104      	bne.n	8002302 <UART_SetConfig+0x112>
 80022f8:	231f      	movs	r3, #31
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e003      	b.n	800230a <UART_SetConfig+0x11a>
 8002302:	231f      	movs	r3, #31
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2210      	movs	r2, #16
 8002308:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	429a      	cmp	r2, r3
 8002314:	d15c      	bne.n	80023d0 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8002316:	231f      	movs	r3, #31
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d015      	beq.n	800234c <UART_SetConfig+0x15c>
 8002320:	dc18      	bgt.n	8002354 <UART_SetConfig+0x164>
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00d      	beq.n	8002342 <UART_SetConfig+0x152>
 8002326:	dc15      	bgt.n	8002354 <UART_SetConfig+0x164>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <UART_SetConfig+0x142>
 800232c:	2b02      	cmp	r3, #2
 800232e:	d005      	beq.n	800233c <UART_SetConfig+0x14c>
 8002330:	e010      	b.n	8002354 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002332:	f7ff fa39 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]
        break;
 800233a:	e012      	b.n	8002362 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <UART_SetConfig+0x2ac>)
 800233e:	61bb      	str	r3, [r7, #24]
        break;
 8002340:	e00f      	b.n	8002362 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002342:	f7ff f9cf 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8002346:	0003      	movs	r3, r0
 8002348:	61bb      	str	r3, [r7, #24]
        break;
 800234a:	e00a      	b.n	8002362 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	61bb      	str	r3, [r7, #24]
        break;
 8002352:	e006      	b.n	8002362 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002358:	231e      	movs	r3, #30
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
        break;
 8002360:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d100      	bne.n	800236a <UART_SetConfig+0x17a>
 8002368:	e07a      	b.n	8002460 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	005a      	lsls	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	18d2      	adds	r2, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0019      	movs	r1, r3
 800237c:	0010      	movs	r0, r2
 800237e:	f7fd fecd 	bl	800011c <__udivsi3>
 8002382:	0003      	movs	r3, r0
 8002384:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d91c      	bls.n	80023c6 <UART_SetConfig+0x1d6>
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	429a      	cmp	r2, r3
 8002394:	d217      	bcs.n	80023c6 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	b29a      	uxth	r2, r3
 800239a:	200e      	movs	r0, #14
 800239c:	183b      	adds	r3, r7, r0
 800239e:	210f      	movs	r1, #15
 80023a0:	438a      	bics	r2, r1
 80023a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2207      	movs	r2, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	b299      	uxth	r1, r3
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	183a      	adds	r2, r7, r0
 80023b4:	8812      	ldrh	r2, [r2, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	183a      	adds	r2, r7, r0
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	e04c      	b.n	8002460 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80023c6:	231e      	movs	r3, #30
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e047      	b.n	8002460 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023d0:	231f      	movs	r3, #31
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d015      	beq.n	8002406 <UART_SetConfig+0x216>
 80023da:	dc18      	bgt.n	800240e <UART_SetConfig+0x21e>
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d00d      	beq.n	80023fc <UART_SetConfig+0x20c>
 80023e0:	dc15      	bgt.n	800240e <UART_SetConfig+0x21e>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <UART_SetConfig+0x1fc>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d005      	beq.n	80023f6 <UART_SetConfig+0x206>
 80023ea:	e010      	b.n	800240e <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023ec:	f7ff f9dc 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
 80023f0:	0003      	movs	r3, r0
 80023f2:	61bb      	str	r3, [r7, #24]
        break;
 80023f4:	e012      	b.n	800241c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <UART_SetConfig+0x2ac>)
 80023f8:	61bb      	str	r3, [r7, #24]
        break;
 80023fa:	e00f      	b.n	800241c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023fc:	f7ff f972 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8002400:	0003      	movs	r3, r0
 8002402:	61bb      	str	r3, [r7, #24]
        break;
 8002404:	e00a      	b.n	800241c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	61bb      	str	r3, [r7, #24]
        break;
 800240c:	e006      	b.n	800241c <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002412:	231e      	movs	r3, #30
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
        break;
 800241a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01e      	beq.n	8002460 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	085a      	lsrs	r2, r3, #1
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	18d2      	adds	r2, r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0019      	movs	r1, r3
 8002432:	0010      	movs	r0, r2
 8002434:	f7fd fe72 	bl	800011c <__udivsi3>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	d90a      	bls.n	8002458 <UART_SetConfig+0x268>
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	429a      	cmp	r2, r3
 800244a:	d205      	bcs.n	8002458 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	e003      	b.n	8002460 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002458:	231e      	movs	r3, #30
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800246c:	231e      	movs	r3, #30
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	781b      	ldrb	r3, [r3, #0]
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b008      	add	sp, #32
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	efff69f3 	.word	0xefff69f3
 8002480:	ffffcfff 	.word	0xffffcfff
 8002484:	fffff4ff 	.word	0xfffff4ff
 8002488:	40013800 	.word	0x40013800
 800248c:	40021000 	.word	0x40021000
 8002490:	40004400 	.word	0x40004400
 8002494:	40004800 	.word	0x40004800
 8002498:	40004c00 	.word	0x40004c00
 800249c:	007a1200 	.word	0x007a1200

080024a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2201      	movs	r2, #1
 80024ae:	4013      	ands	r3, r2
 80024b0:	d00b      	beq.n	80024ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <UART_AdvFeatureConfig+0x144>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00b      	beq.n	80024ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <UART_AdvFeatureConfig+0x148>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2204      	movs	r2, #4
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00b      	beq.n	800250e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <UART_AdvFeatureConfig+0x14c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2208      	movs	r2, #8
 8002514:	4013      	ands	r3, r2
 8002516:	d00b      	beq.n	8002530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <UART_AdvFeatureConfig+0x150>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2210      	movs	r2, #16
 8002536:	4013      	ands	r3, r2
 8002538:	d00b      	beq.n	8002552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <UART_AdvFeatureConfig+0x154>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	d00b      	beq.n	8002574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <UART_AdvFeatureConfig+0x158>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	d01d      	beq.n	80025ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <UART_AdvFeatureConfig+0x15c>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10b      	bne.n	80025ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <UART_AdvFeatureConfig+0x160>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	4013      	ands	r3, r2
 80025c2:	d00b      	beq.n	80025dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <UART_AdvFeatureConfig+0x164>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
  }
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fffdffff 	.word	0xfffdffff
 80025e8:	fffeffff 	.word	0xfffeffff
 80025ec:	fffbffff 	.word	0xfffbffff
 80025f0:	ffff7fff 	.word	0xffff7fff
 80025f4:	ffffefff 	.word	0xffffefff
 80025f8:	ffffdfff 	.word	0xffffdfff
 80025fc:	ffefffff 	.word	0xffefffff
 8002600:	ff9fffff 	.word	0xff9fffff
 8002604:	fff7ffff 	.word	0xfff7ffff

08002608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b092      	sub	sp, #72	; 0x48
 800260c:	af02      	add	r7, sp, #8
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2284      	movs	r2, #132	; 0x84
 8002614:	2100      	movs	r1, #0
 8002616:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002618:	f7fe f984 	bl	8000924 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2208      	movs	r2, #8
 8002628:	4013      	ands	r3, r2
 800262a:	2b08      	cmp	r3, #8
 800262c:	d12c      	bne.n	8002688 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	0391      	lsls	r1, r2, #14
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4a46      	ldr	r2, [pc, #280]	; (8002750 <UART_CheckIdleState+0x148>)
 8002638:	9200      	str	r2, [sp, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	f000 f88c 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d021      	beq.n	8002688 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002644:	f3ef 8310 	mrs	r3, PRIMASK
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
 800264e:	2301      	movs	r3, #1
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	f383 8810 	msr	PRIMASK, r3
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	438a      	bics	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	f383 8810 	msr	PRIMASK, r3
}
 8002674:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2278      	movs	r2, #120	; 0x78
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e05f      	b.n	8002748 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	2b04      	cmp	r3, #4
 8002694:	d146      	bne.n	8002724 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	03d1      	lsls	r1, r2, #15
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <UART_CheckIdleState+0x148>)
 80026a0:	9200      	str	r2, [sp, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f000 f858 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 80026a8:	1e03      	subs	r3, r0, #0
 80026aa:	d03b      	beq.n	8002724 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ac:	f3ef 8310 	mrs	r3, PRIMASK
 80026b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80026b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
 80026b6:	2301      	movs	r3, #1
 80026b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4921      	ldr	r1, [pc, #132]	; (8002754 <UART_CheckIdleState+0x14c>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f383 8810 	msr	PRIMASK, r3
}
 80026dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026de:	f3ef 8310 	mrs	r3, PRIMASK
 80026e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80026e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
 80026e8:	2301      	movs	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	2120      	movs	r1, #32
 8002716:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2278      	movs	r2, #120	; 0x78
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e011      	b.n	8002748 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	2120      	movs	r1, #32
 8002730:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2278      	movs	r2, #120	; 0x78
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b010      	add	sp, #64	; 0x40
 800274e:	bd80      	pop	{r7, pc}
 8002750:	01ffffff 	.word	0x01ffffff
 8002754:	fffffedf 	.word	0xfffffedf

08002758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002768:	e04b      	b.n	8002802 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	3301      	adds	r3, #1
 800276e:	d048      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002770:	f7fe f8d8 	bl	8000924 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04b      	b.n	8002822 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2204      	movs	r2, #4
 8002792:	4013      	ands	r3, r2
 8002794:	d035      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2208      	movs	r2, #8
 800279e:	4013      	ands	r3, r2
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d111      	bne.n	80027c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2208      	movs	r2, #8
 80027aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f906 	bl	80029c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2284      	movs	r2, #132	; 0x84
 80027b8:	2108      	movs	r1, #8
 80027ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2278      	movs	r2, #120	; 0x78
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e02c      	b.n	8002822 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	429a      	cmp	r2, r3
 80027da:	d112      	bne.n	8002802 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 f8e9 	bl	80029c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2284      	movs	r2, #132	; 0x84
 80027f2:	2120      	movs	r1, #32
 80027f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2278      	movs	r2, #120	; 0x78
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	425a      	negs	r2, r3
 8002812:	4153      	adcs	r3, r2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	001a      	movs	r2, r3
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d0a4      	beq.n	800276a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b004      	add	sp, #16
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	1dbb      	adds	r3, r7, #6
 8002838:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1dba      	adds	r2, r7, #6
 8002844:	2158      	movs	r1, #88	; 0x58
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1dba      	adds	r2, r7, #6
 800284e:	215a      	movs	r1, #90	; 0x5a
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	429a      	cmp	r2, r3
 8002864:	d10d      	bne.n	8002882 <UART_Start_Receive_IT+0x56>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <UART_Start_Receive_IT+0x4c>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	225c      	movs	r2, #92	; 0x5c
 8002872:	4950      	ldr	r1, [pc, #320]	; (80029b4 <UART_Start_Receive_IT+0x188>)
 8002874:	5299      	strh	r1, [r3, r2]
 8002876:	e02e      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	225c      	movs	r2, #92	; 0x5c
 800287c:	21ff      	movs	r1, #255	; 0xff
 800287e:	5299      	strh	r1, [r3, r2]
 8002880:	e029      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <UART_Start_Receive_IT+0x7a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <UART_Start_Receive_IT+0x70>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	225c      	movs	r2, #92	; 0x5c
 8002896:	21ff      	movs	r1, #255	; 0xff
 8002898:	5299      	strh	r1, [r3, r2]
 800289a:	e01c      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	225c      	movs	r2, #92	; 0x5c
 80028a0:	217f      	movs	r1, #127	; 0x7f
 80028a2:	5299      	strh	r1, [r3, r2]
 80028a4:	e017      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	055b      	lsls	r3, r3, #21
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10d      	bne.n	80028ce <UART_Start_Receive_IT+0xa2>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <UART_Start_Receive_IT+0x98>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	225c      	movs	r2, #92	; 0x5c
 80028be:	217f      	movs	r1, #127	; 0x7f
 80028c0:	5299      	strh	r1, [r3, r2]
 80028c2:	e008      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	225c      	movs	r2, #92	; 0x5c
 80028c8:	213f      	movs	r1, #63	; 0x3f
 80028ca:	5299      	strh	r1, [r3, r2]
 80028cc:	e003      	b.n	80028d6 <UART_Start_Receive_IT+0xaa>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	225c      	movs	r2, #92	; 0x5c
 80028d2:	2100      	movs	r1, #0
 80028d4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2284      	movs	r2, #132	; 0x84
 80028da:	2100      	movs	r1, #0
 80028dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	2122      	movs	r1, #34	; 0x22
 80028e4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f0:	2301      	movs	r3, #1
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	f383 8810 	msr	PRIMASK, r3
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <UART_Start_Receive_IT+0x108>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <UART_Start_Receive_IT+0x18c>)
 8002930:	669a      	str	r2, [r3, #104]	; 0x68
 8002932:	e002      	b.n	800293a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <UART_Start_Receive_IT+0x190>)
 8002938:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d019      	beq.n	8002976 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	61fb      	str	r3, [r7, #28]
  return(result);
 8002948:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2190      	movs	r1, #144	; 0x90
 8002964:	0049      	lsls	r1, r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	e018      	b.n	80029a8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002976:	f3ef 8310 	mrs	r3, PRIMASK
 800297a:	613b      	str	r3, [r7, #16]
  return(result);
 800297c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f383 8810 	msr	PRIMASK, r3
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2120      	movs	r1, #32
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b010      	add	sp, #64	; 0x40
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	000001ff 	.word	0x000001ff
 80029b8:	08002cc5 	.word	0x08002cc5
 80029bc:	08002b0d 	.word	0x08002b0d

080029c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c8:	f3ef 8310 	mrs	r3, PRIMASK
 80029cc:	617b      	str	r3, [r7, #20]
  return(result);
 80029ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
 80029d2:	2301      	movs	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f383 8810 	msr	PRIMASK, r3
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4926      	ldr	r1, [pc, #152]	; (8002a84 <UART_EndRxTransfer+0xc4>)
 80029ea:	400a      	ands	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fa:	f3ef 8310 	mrs	r3, PRIMASK
 80029fe:	623b      	str	r3, [r7, #32]
  return(result);
 8002a00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f383 8810 	msr	PRIMASK, r3
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	f383 8810 	msr	PRIMASK, r3
}
 8002a2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d118      	bne.n	8002a66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3e:	2301      	movs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2110      	movs	r1, #16
 8002a56:	438a      	bics	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	2120      	movs	r1, #32
 8002a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b00e      	add	sp, #56	; 0x38
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	fffffedf 	.word	0xfffffedf

08002a88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	225a      	movs	r2, #90	; 0x5a
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2252      	movs	r2, #82	; 0x52
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fb8d 	bl	80021c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f383 8810 	msr	PRIMASK, r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fb5a 	bl	80021b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b006      	add	sp, #24
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b094      	sub	sp, #80	; 0x50
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002b14:	204e      	movs	r0, #78	; 0x4e
 8002b16:	183b      	adds	r3, r7, r0
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	215c      	movs	r1, #92	; 0x5c
 8002b1c:	5a52      	ldrh	r2, [r2, r1]
 8002b1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	589b      	ldr	r3, [r3, r2]
 8002b26:	2b22      	cmp	r3, #34	; 0x22
 8002b28:	d000      	beq.n	8002b2c <UART_RxISR_8BIT+0x20>
 8002b2a:	e0ba      	b.n	8002ca2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	214c      	movs	r1, #76	; 0x4c
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002b36:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	400a      	ands	r2, r1
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	225a      	movs	r2, #90	; 0x5a
 8002b5c:	5a9b      	ldrh	r3, [r3, r2]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b299      	uxth	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	225a      	movs	r2, #90	; 0x5a
 8002b68:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	225a      	movs	r2, #90	; 0x5a
 8002b6e:	5a9b      	ldrh	r3, [r3, r2]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d000      	beq.n	8002b78 <UART_RxISR_8BIT+0x6c>
 8002b76:	e09c      	b.n	8002cb2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b78:	f3ef 8310 	mrs	r3, PRIMASK
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b82:	2301      	movs	r3, #1
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	f383 8810 	msr	PRIMASK, r3
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4948      	ldr	r1, [pc, #288]	; (8002cbc <UART_RxISR_8BIT+0x1b0>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	f383 8810 	msr	PRIMASK, r3
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	f383 8810 	msr	PRIMASK, r3
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	438a      	bics	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	2120      	movs	r1, #32
 8002be2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c04:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
 8002c08:	2301      	movs	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4928      	ldr	r1, [pc, #160]	; (8002cc0 <UART_RxISR_8BIT+0x1b4>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d12f      	bne.n	8002c98 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c44:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c48:	2301      	movs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2110      	movs	r1, #16
 8002c60:	438a      	bics	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d103      	bne.n	8002c86 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2258      	movs	r2, #88	; 0x58
 8002c8a:	5a9a      	ldrh	r2, [r3, r2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff faa1 	bl	80021d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c96:	e00c      	b.n	8002cb2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fd fc3c 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 8002ca0:	e007      	b.n	8002cb2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2108      	movs	r1, #8
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	619a      	str	r2, [r3, #24]
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b014      	add	sp, #80	; 0x50
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	fffffedf 	.word	0xfffffedf
 8002cc0:	fbffffff 	.word	0xfbffffff

08002cc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b094      	sub	sp, #80	; 0x50
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ccc:	204e      	movs	r0, #78	; 0x4e
 8002cce:	183b      	adds	r3, r7, r0
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	215c      	movs	r1, #92	; 0x5c
 8002cd4:	5a52      	ldrh	r2, [r2, r1]
 8002cd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	2b22      	cmp	r3, #34	; 0x22
 8002ce0:	d000      	beq.n	8002ce4 <UART_RxISR_16BIT+0x20>
 8002ce2:	e0ba      	b.n	8002e5a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	214c      	movs	r1, #76	; 0x4c
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002cee:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	183a      	adds	r2, r7, r0
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	225a      	movs	r2, #90	; 0x5a
 8002d14:	5a9b      	ldrh	r3, [r3, r2]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b299      	uxth	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	225a      	movs	r2, #90	; 0x5a
 8002d20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	225a      	movs	r2, #90	; 0x5a
 8002d26:	5a9b      	ldrh	r3, [r3, r2]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d000      	beq.n	8002d30 <UART_RxISR_16BIT+0x6c>
 8002d2e:	e09c      	b.n	8002e6a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d30:	f3ef 8310 	mrs	r3, PRIMASK
 8002d34:	623b      	str	r3, [r7, #32]
  return(result);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4948      	ldr	r1, [pc, #288]	; (8002e74 <UART_RxISR_16BIT+0x1b0>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d62:	f3ef 8310 	mrs	r3, PRIMASK
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	f383 8810 	msr	PRIMASK, r3
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	438a      	bics	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	f383 8810 	msr	PRIMASK, r3
}
 8002d92:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d018      	beq.n	8002de8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	617b      	str	r3, [r7, #20]
  return(result);
 8002dbc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4928      	ldr	r1, [pc, #160]	; (8002e78 <UART_RxISR_16BIT+0x1b4>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d12f      	bne.n	8002e50 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dfc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e00:	2301      	movs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2110      	movs	r1, #16
 8002e18:	438a      	bics	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2210      	movs	r2, #16
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d103      	bne.n	8002e3e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2258      	movs	r2, #88	; 0x58
 8002e42:	5a9a      	ldrh	r2, [r3, r2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7ff f9c5 	bl	80021d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e4e:	e00c      	b.n	8002e6a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fd fb60 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 8002e58:	e007      	b.n	8002e6a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2108      	movs	r1, #8
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b014      	add	sp, #80	; 0x50
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	fffffedf 	.word	0xfffffedf
 8002e78:	fbffffff 	.word	0xfbffffff

08002e7c <siprintf>:
 8002e7c:	b40e      	push	{r1, r2, r3}
 8002e7e:	b500      	push	{lr}
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <siprintf+0x34>)
 8002e82:	b09c      	sub	sp, #112	; 0x70
 8002e84:	ab1d      	add	r3, sp, #116	; 0x74
 8002e86:	9002      	str	r0, [sp, #8]
 8002e88:	9006      	str	r0, [sp, #24]
 8002e8a:	9107      	str	r1, [sp, #28]
 8002e8c:	9104      	str	r1, [sp, #16]
 8002e8e:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <siprintf+0x38>)
 8002e90:	4909      	ldr	r1, [pc, #36]	; (8002eb8 <siprintf+0x3c>)
 8002e92:	cb04      	ldmia	r3!, {r2}
 8002e94:	9105      	str	r1, [sp, #20]
 8002e96:	6800      	ldr	r0, [r0, #0]
 8002e98:	a902      	add	r1, sp, #8
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	f000 f9a2 	bl	80031e4 <_svfiprintf_r>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	9b02      	ldr	r3, [sp, #8]
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	b01c      	add	sp, #112	; 0x70
 8002ea8:	bc08      	pop	{r3}
 8002eaa:	b003      	add	sp, #12
 8002eac:	4718      	bx	r3
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	7fffffff 	.word	0x7fffffff
 8002eb4:	20000058 	.word	0x20000058
 8002eb8:	ffff0208 	.word	0xffff0208

08002ebc <memset>:
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	1882      	adds	r2, r0, r2
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__errno>:
 8002ecc:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <__errno+0x8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	20000058 	.word	0x20000058

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2600      	movs	r6, #0
 8002edc:	4c0c      	ldr	r4, [pc, #48]	; (8002f10 <__libc_init_array+0x38>)
 8002ede:	4d0d      	ldr	r5, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	f000 fc6d 	bl	80037c8 <_init>
 8002eee:	4c0a      	ldr	r4, [pc, #40]	; (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4d0a      	ldr	r5, [pc, #40]	; (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	00b3      	lsls	r3, r6, #2
 8002efe:	58eb      	ldr	r3, [r5, r3]
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	00b3      	lsls	r3, r6, #2
 8002f08:	58eb      	ldr	r3, [r5, r3]
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	0800385c 	.word	0x0800385c
 8002f14:	0800385c 	.word	0x0800385c
 8002f18:	08003860 	.word	0x08003860
 8002f1c:	0800385c 	.word	0x0800385c

08002f20 <__retarget_lock_acquire_recursive>:
 8002f20:	4770      	bx	lr

08002f22 <__retarget_lock_release_recursive>:
 8002f22:	4770      	bx	lr

08002f24 <_free_r>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	0005      	movs	r5, r0
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d010      	beq.n	8002f4e <_free_r+0x2a>
 8002f2c:	1f0c      	subs	r4, r1, #4
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da00      	bge.n	8002f36 <_free_r+0x12>
 8002f34:	18e4      	adds	r4, r4, r3
 8002f36:	0028      	movs	r0, r5
 8002f38:	f000 f8e2 	bl	8003100 <__malloc_lock>
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <_free_r+0x90>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <_free_r+0x2c>
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	6014      	str	r4, [r2, #0]
 8002f48:	0028      	movs	r0, r5
 8002f4a:	f000 f8e1 	bl	8003110 <__malloc_unlock>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	d908      	bls.n	8002f66 <_free_r+0x42>
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	1821      	adds	r1, r4, r0
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d1f3      	bne.n	8002f44 <_free_r+0x20>
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	1809      	adds	r1, r1, r0
 8002f62:	6021      	str	r1, [r4, #0]
 8002f64:	e7ee      	b.n	8002f44 <_free_r+0x20>
 8002f66:	001a      	movs	r2, r3
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <_free_r+0x4e>
 8002f6e:	42a3      	cmp	r3, r4
 8002f70:	d9f9      	bls.n	8002f66 <_free_r+0x42>
 8002f72:	6811      	ldr	r1, [r2, #0]
 8002f74:	1850      	adds	r0, r2, r1
 8002f76:	42a0      	cmp	r0, r4
 8002f78:	d10b      	bne.n	8002f92 <_free_r+0x6e>
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	1809      	adds	r1, r1, r0
 8002f7e:	1850      	adds	r0, r2, r1
 8002f80:	6011      	str	r1, [r2, #0]
 8002f82:	4283      	cmp	r3, r0
 8002f84:	d1e0      	bne.n	8002f48 <_free_r+0x24>
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	1841      	adds	r1, r0, r1
 8002f8c:	6011      	str	r1, [r2, #0]
 8002f8e:	6053      	str	r3, [r2, #4]
 8002f90:	e7da      	b.n	8002f48 <_free_r+0x24>
 8002f92:	42a0      	cmp	r0, r4
 8002f94:	d902      	bls.n	8002f9c <_free_r+0x78>
 8002f96:	230c      	movs	r3, #12
 8002f98:	602b      	str	r3, [r5, #0]
 8002f9a:	e7d5      	b.n	8002f48 <_free_r+0x24>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	d103      	bne.n	8002fac <_free_r+0x88>
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	1809      	adds	r1, r1, r0
 8002faa:	6021      	str	r1, [r4, #0]
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6054      	str	r4, [r2, #4]
 8002fb0:	e7ca      	b.n	8002f48 <_free_r+0x24>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	200002d8 	.word	0x200002d8

08002fb8 <sbrk_aligned>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4e0f      	ldr	r6, [pc, #60]	; (8002ff8 <sbrk_aligned+0x40>)
 8002fbc:	000d      	movs	r5, r1
 8002fbe:	6831      	ldr	r1, [r6, #0]
 8002fc0:	0004      	movs	r4, r0
 8002fc2:	2900      	cmp	r1, #0
 8002fc4:	d102      	bne.n	8002fcc <sbrk_aligned+0x14>
 8002fc6:	f000 fba1 	bl	800370c <_sbrk_r>
 8002fca:	6030      	str	r0, [r6, #0]
 8002fcc:	0029      	movs	r1, r5
 8002fce:	0020      	movs	r0, r4
 8002fd0:	f000 fb9c 	bl	800370c <_sbrk_r>
 8002fd4:	1c43      	adds	r3, r0, #1
 8002fd6:	d00a      	beq.n	8002fee <sbrk_aligned+0x36>
 8002fd8:	2303      	movs	r3, #3
 8002fda:	1cc5      	adds	r5, r0, #3
 8002fdc:	439d      	bics	r5, r3
 8002fde:	42a8      	cmp	r0, r5
 8002fe0:	d007      	beq.n	8002ff2 <sbrk_aligned+0x3a>
 8002fe2:	1a29      	subs	r1, r5, r0
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	f000 fb91 	bl	800370c <_sbrk_r>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d101      	bne.n	8002ff2 <sbrk_aligned+0x3a>
 8002fee:	2501      	movs	r5, #1
 8002ff0:	426d      	negs	r5, r5
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	200002dc 	.word	0x200002dc

08002ffc <_malloc_r>:
 8002ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ffe:	2203      	movs	r2, #3
 8003000:	1ccb      	adds	r3, r1, #3
 8003002:	4393      	bics	r3, r2
 8003004:	3308      	adds	r3, #8
 8003006:	0006      	movs	r6, r0
 8003008:	001f      	movs	r7, r3
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d238      	bcs.n	8003080 <_malloc_r+0x84>
 800300e:	270c      	movs	r7, #12
 8003010:	42b9      	cmp	r1, r7
 8003012:	d837      	bhi.n	8003084 <_malloc_r+0x88>
 8003014:	0030      	movs	r0, r6
 8003016:	f000 f873 	bl	8003100 <__malloc_lock>
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <_malloc_r+0x100>)
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	001c      	movs	r4, r3
 8003022:	2c00      	cmp	r4, #0
 8003024:	d133      	bne.n	800308e <_malloc_r+0x92>
 8003026:	0039      	movs	r1, r7
 8003028:	0030      	movs	r0, r6
 800302a:	f7ff ffc5 	bl	8002fb8 <sbrk_aligned>
 800302e:	0004      	movs	r4, r0
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d15e      	bne.n	80030f2 <_malloc_r+0xf6>
 8003034:	9b00      	ldr	r3, [sp, #0]
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	0025      	movs	r5, r4
 800303a:	2d00      	cmp	r5, #0
 800303c:	d14e      	bne.n	80030dc <_malloc_r+0xe0>
 800303e:	2c00      	cmp	r4, #0
 8003040:	d051      	beq.n	80030e6 <_malloc_r+0xea>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	0029      	movs	r1, r5
 8003046:	18e3      	adds	r3, r4, r3
 8003048:	0030      	movs	r0, r6
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	f000 fb5e 	bl	800370c <_sbrk_r>
 8003050:	9b01      	ldr	r3, [sp, #4]
 8003052:	4283      	cmp	r3, r0
 8003054:	d147      	bne.n	80030e6 <_malloc_r+0xea>
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	0030      	movs	r0, r6
 800305a:	1aff      	subs	r7, r7, r3
 800305c:	0039      	movs	r1, r7
 800305e:	f7ff ffab 	bl	8002fb8 <sbrk_aligned>
 8003062:	3001      	adds	r0, #1
 8003064:	d03f      	beq.n	80030e6 <_malloc_r+0xea>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	19db      	adds	r3, r3, r7
 800306a:	6023      	str	r3, [r4, #0]
 800306c:	9b00      	ldr	r3, [sp, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d040      	beq.n	80030f6 <_malloc_r+0xfa>
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	42a2      	cmp	r2, r4
 8003078:	d133      	bne.n	80030e2 <_malloc_r+0xe6>
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e014      	b.n	80030aa <_malloc_r+0xae>
 8003080:	2b00      	cmp	r3, #0
 8003082:	dac5      	bge.n	8003010 <_malloc_r+0x14>
 8003084:	230c      	movs	r3, #12
 8003086:	2500      	movs	r5, #0
 8003088:	6033      	str	r3, [r6, #0]
 800308a:	0028      	movs	r0, r5
 800308c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800308e:	6821      	ldr	r1, [r4, #0]
 8003090:	1bc9      	subs	r1, r1, r7
 8003092:	d420      	bmi.n	80030d6 <_malloc_r+0xda>
 8003094:	290b      	cmp	r1, #11
 8003096:	d918      	bls.n	80030ca <_malloc_r+0xce>
 8003098:	19e2      	adds	r2, r4, r7
 800309a:	6027      	str	r7, [r4, #0]
 800309c:	42a3      	cmp	r3, r4
 800309e:	d112      	bne.n	80030c6 <_malloc_r+0xca>
 80030a0:	9b00      	ldr	r3, [sp, #0]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	6011      	str	r1, [r2, #0]
 80030a8:	6053      	str	r3, [r2, #4]
 80030aa:	0030      	movs	r0, r6
 80030ac:	0025      	movs	r5, r4
 80030ae:	f000 f82f 	bl	8003110 <__malloc_unlock>
 80030b2:	2207      	movs	r2, #7
 80030b4:	350b      	adds	r5, #11
 80030b6:	1d23      	adds	r3, r4, #4
 80030b8:	4395      	bics	r5, r2
 80030ba:	1aea      	subs	r2, r5, r3
 80030bc:	429d      	cmp	r5, r3
 80030be:	d0e4      	beq.n	800308a <_malloc_r+0x8e>
 80030c0:	1b5b      	subs	r3, r3, r5
 80030c2:	50a3      	str	r3, [r4, r2]
 80030c4:	e7e1      	b.n	800308a <_malloc_r+0x8e>
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	e7ec      	b.n	80030a4 <_malloc_r+0xa8>
 80030ca:	6862      	ldr	r2, [r4, #4]
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d1d5      	bne.n	800307c <_malloc_r+0x80>
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e7e9      	b.n	80030aa <_malloc_r+0xae>
 80030d6:	0023      	movs	r3, r4
 80030d8:	6864      	ldr	r4, [r4, #4]
 80030da:	e7a2      	b.n	8003022 <_malloc_r+0x26>
 80030dc:	002c      	movs	r4, r5
 80030de:	686d      	ldr	r5, [r5, #4]
 80030e0:	e7ab      	b.n	800303a <_malloc_r+0x3e>
 80030e2:	0013      	movs	r3, r2
 80030e4:	e7c4      	b.n	8003070 <_malloc_r+0x74>
 80030e6:	230c      	movs	r3, #12
 80030e8:	0030      	movs	r0, r6
 80030ea:	6033      	str	r3, [r6, #0]
 80030ec:	f000 f810 	bl	8003110 <__malloc_unlock>
 80030f0:	e7cb      	b.n	800308a <_malloc_r+0x8e>
 80030f2:	6027      	str	r7, [r4, #0]
 80030f4:	e7d9      	b.n	80030aa <_malloc_r+0xae>
 80030f6:	605b      	str	r3, [r3, #4]
 80030f8:	deff      	udf	#255	; 0xff
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	200002d8 	.word	0x200002d8

08003100 <__malloc_lock>:
 8003100:	b510      	push	{r4, lr}
 8003102:	4802      	ldr	r0, [pc, #8]	; (800310c <__malloc_lock+0xc>)
 8003104:	f7ff ff0c 	bl	8002f20 <__retarget_lock_acquire_recursive>
 8003108:	bd10      	pop	{r4, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	200002d4 	.word	0x200002d4

08003110 <__malloc_unlock>:
 8003110:	b510      	push	{r4, lr}
 8003112:	4802      	ldr	r0, [pc, #8]	; (800311c <__malloc_unlock+0xc>)
 8003114:	f7ff ff05 	bl	8002f22 <__retarget_lock_release_recursive>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	200002d4 	.word	0x200002d4

08003120 <__ssputs_r>:
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	9203      	str	r2, [sp, #12]
 8003128:	688e      	ldr	r6, [r1, #8]
 800312a:	9a01      	ldr	r2, [sp, #4]
 800312c:	0007      	movs	r7, r0
 800312e:	000c      	movs	r4, r1
 8003130:	680b      	ldr	r3, [r1, #0]
 8003132:	4296      	cmp	r6, r2
 8003134:	d831      	bhi.n	800319a <__ssputs_r+0x7a>
 8003136:	898a      	ldrh	r2, [r1, #12]
 8003138:	2190      	movs	r1, #144	; 0x90
 800313a:	00c9      	lsls	r1, r1, #3
 800313c:	420a      	tst	r2, r1
 800313e:	d029      	beq.n	8003194 <__ssputs_r+0x74>
 8003140:	2003      	movs	r0, #3
 8003142:	6921      	ldr	r1, [r4, #16]
 8003144:	1a5b      	subs	r3, r3, r1
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	6963      	ldr	r3, [r4, #20]
 800314a:	4343      	muls	r3, r0
 800314c:	0fdd      	lsrs	r5, r3, #31
 800314e:	18ed      	adds	r5, r5, r3
 8003150:	9b01      	ldr	r3, [sp, #4]
 8003152:	9802      	ldr	r0, [sp, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	181b      	adds	r3, r3, r0
 8003158:	106d      	asrs	r5, r5, #1
 800315a:	42ab      	cmp	r3, r5
 800315c:	d900      	bls.n	8003160 <__ssputs_r+0x40>
 800315e:	001d      	movs	r5, r3
 8003160:	0552      	lsls	r2, r2, #21
 8003162:	d529      	bpl.n	80031b8 <__ssputs_r+0x98>
 8003164:	0029      	movs	r1, r5
 8003166:	0038      	movs	r0, r7
 8003168:	f7ff ff48 	bl	8002ffc <_malloc_r>
 800316c:	1e06      	subs	r6, r0, #0
 800316e:	d02d      	beq.n	80031cc <__ssputs_r+0xac>
 8003170:	9a02      	ldr	r2, [sp, #8]
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	f000 fae7 	bl	8003746 <memcpy>
 8003178:	89a2      	ldrh	r2, [r4, #12]
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <__ssputs_r+0xc0>)
 800317c:	401a      	ands	r2, r3
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	4313      	orrs	r3, r2
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	9b02      	ldr	r3, [sp, #8]
 8003186:	6126      	str	r6, [r4, #16]
 8003188:	18f6      	adds	r6, r6, r3
 800318a:	6026      	str	r6, [r4, #0]
 800318c:	6165      	str	r5, [r4, #20]
 800318e:	9e01      	ldr	r6, [sp, #4]
 8003190:	1aed      	subs	r5, r5, r3
 8003192:	60a5      	str	r5, [r4, #8]
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	429e      	cmp	r6, r3
 8003198:	d900      	bls.n	800319c <__ssputs_r+0x7c>
 800319a:	9e01      	ldr	r6, [sp, #4]
 800319c:	0032      	movs	r2, r6
 800319e:	9903      	ldr	r1, [sp, #12]
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	f000 fa9f 	bl	80036e4 <memmove>
 80031a6:	2000      	movs	r0, #0
 80031a8:	68a3      	ldr	r3, [r4, #8]
 80031aa:	1b9b      	subs	r3, r3, r6
 80031ac:	60a3      	str	r3, [r4, #8]
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	199b      	adds	r3, r3, r6
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	b005      	add	sp, #20
 80031b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b8:	002a      	movs	r2, r5
 80031ba:	0038      	movs	r0, r7
 80031bc:	f000 facc 	bl	8003758 <_realloc_r>
 80031c0:	1e06      	subs	r6, r0, #0
 80031c2:	d1df      	bne.n	8003184 <__ssputs_r+0x64>
 80031c4:	0038      	movs	r0, r7
 80031c6:	6921      	ldr	r1, [r4, #16]
 80031c8:	f7ff feac 	bl	8002f24 <_free_r>
 80031cc:	230c      	movs	r3, #12
 80031ce:	2001      	movs	r0, #1
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	89a2      	ldrh	r2, [r4, #12]
 80031d4:	3334      	adds	r3, #52	; 0x34
 80031d6:	4313      	orrs	r3, r2
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	4240      	negs	r0, r0
 80031dc:	e7ea      	b.n	80031b4 <__ssputs_r+0x94>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	fffffb7f 	.word	0xfffffb7f

080031e4 <_svfiprintf_r>:
 80031e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e6:	b0a1      	sub	sp, #132	; 0x84
 80031e8:	9003      	str	r0, [sp, #12]
 80031ea:	001d      	movs	r5, r3
 80031ec:	898b      	ldrh	r3, [r1, #12]
 80031ee:	000f      	movs	r7, r1
 80031f0:	0016      	movs	r6, r2
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	d511      	bpl.n	800321a <_svfiprintf_r+0x36>
 80031f6:	690b      	ldr	r3, [r1, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <_svfiprintf_r+0x36>
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	f7ff fefd 	bl	8002ffc <_malloc_r>
 8003202:	6038      	str	r0, [r7, #0]
 8003204:	6138      	str	r0, [r7, #16]
 8003206:	2800      	cmp	r0, #0
 8003208:	d105      	bne.n	8003216 <_svfiprintf_r+0x32>
 800320a:	230c      	movs	r3, #12
 800320c:	9a03      	ldr	r2, [sp, #12]
 800320e:	3801      	subs	r0, #1
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	b021      	add	sp, #132	; 0x84
 8003214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003216:	2340      	movs	r3, #64	; 0x40
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	2300      	movs	r3, #0
 800321c:	ac08      	add	r4, sp, #32
 800321e:	6163      	str	r3, [r4, #20]
 8003220:	3320      	adds	r3, #32
 8003222:	7663      	strb	r3, [r4, #25]
 8003224:	3310      	adds	r3, #16
 8003226:	76a3      	strb	r3, [r4, #26]
 8003228:	9507      	str	r5, [sp, #28]
 800322a:	0035      	movs	r5, r6
 800322c:	782b      	ldrb	r3, [r5, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <_svfiprintf_r+0x52>
 8003232:	2b25      	cmp	r3, #37	; 0x25
 8003234:	d148      	bne.n	80032c8 <_svfiprintf_r+0xe4>
 8003236:	1bab      	subs	r3, r5, r6
 8003238:	9305      	str	r3, [sp, #20]
 800323a:	42b5      	cmp	r5, r6
 800323c:	d00b      	beq.n	8003256 <_svfiprintf_r+0x72>
 800323e:	0032      	movs	r2, r6
 8003240:	0039      	movs	r1, r7
 8003242:	9803      	ldr	r0, [sp, #12]
 8003244:	f7ff ff6c 	bl	8003120 <__ssputs_r>
 8003248:	3001      	adds	r0, #1
 800324a:	d100      	bne.n	800324e <_svfiprintf_r+0x6a>
 800324c:	e0af      	b.n	80033ae <_svfiprintf_r+0x1ca>
 800324e:	6963      	ldr	r3, [r4, #20]
 8003250:	9a05      	ldr	r2, [sp, #20]
 8003252:	189b      	adds	r3, r3, r2
 8003254:	6163      	str	r3, [r4, #20]
 8003256:	782b      	ldrb	r3, [r5, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d100      	bne.n	800325e <_svfiprintf_r+0x7a>
 800325c:	e0a7      	b.n	80033ae <_svfiprintf_r+0x1ca>
 800325e:	2201      	movs	r2, #1
 8003260:	2300      	movs	r3, #0
 8003262:	4252      	negs	r2, r2
 8003264:	6062      	str	r2, [r4, #4]
 8003266:	a904      	add	r1, sp, #16
 8003268:	3254      	adds	r2, #84	; 0x54
 800326a:	1852      	adds	r2, r2, r1
 800326c:	1c6e      	adds	r6, r5, #1
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	60e3      	str	r3, [r4, #12]
 8003272:	60a3      	str	r3, [r4, #8]
 8003274:	7013      	strb	r3, [r2, #0]
 8003276:	65a3      	str	r3, [r4, #88]	; 0x58
 8003278:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <_svfiprintf_r+0x1ec>)
 800327a:	2205      	movs	r2, #5
 800327c:	0018      	movs	r0, r3
 800327e:	7831      	ldrb	r1, [r6, #0]
 8003280:	9305      	str	r3, [sp, #20]
 8003282:	f000 fa55 	bl	8003730 <memchr>
 8003286:	1c75      	adds	r5, r6, #1
 8003288:	2800      	cmp	r0, #0
 800328a:	d11f      	bne.n	80032cc <_svfiprintf_r+0xe8>
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	06d3      	lsls	r3, r2, #27
 8003290:	d504      	bpl.n	800329c <_svfiprintf_r+0xb8>
 8003292:	2353      	movs	r3, #83	; 0x53
 8003294:	a904      	add	r1, sp, #16
 8003296:	185b      	adds	r3, r3, r1
 8003298:	2120      	movs	r1, #32
 800329a:	7019      	strb	r1, [r3, #0]
 800329c:	0713      	lsls	r3, r2, #28
 800329e:	d504      	bpl.n	80032aa <_svfiprintf_r+0xc6>
 80032a0:	2353      	movs	r3, #83	; 0x53
 80032a2:	a904      	add	r1, sp, #16
 80032a4:	185b      	adds	r3, r3, r1
 80032a6:	212b      	movs	r1, #43	; 0x2b
 80032a8:	7019      	strb	r1, [r3, #0]
 80032aa:	7833      	ldrb	r3, [r6, #0]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d016      	beq.n	80032de <_svfiprintf_r+0xfa>
 80032b0:	0035      	movs	r5, r6
 80032b2:	2100      	movs	r1, #0
 80032b4:	200a      	movs	r0, #10
 80032b6:	68e3      	ldr	r3, [r4, #12]
 80032b8:	782a      	ldrb	r2, [r5, #0]
 80032ba:	1c6e      	adds	r6, r5, #1
 80032bc:	3a30      	subs	r2, #48	; 0x30
 80032be:	2a09      	cmp	r2, #9
 80032c0:	d94e      	bls.n	8003360 <_svfiprintf_r+0x17c>
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d111      	bne.n	80032ea <_svfiprintf_r+0x106>
 80032c6:	e017      	b.n	80032f8 <_svfiprintf_r+0x114>
 80032c8:	3501      	adds	r5, #1
 80032ca:	e7af      	b.n	800322c <_svfiprintf_r+0x48>
 80032cc:	9b05      	ldr	r3, [sp, #20]
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	1ac0      	subs	r0, r0, r3
 80032d2:	2301      	movs	r3, #1
 80032d4:	4083      	lsls	r3, r0
 80032d6:	4313      	orrs	r3, r2
 80032d8:	002e      	movs	r6, r5
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	e7cc      	b.n	8003278 <_svfiprintf_r+0x94>
 80032de:	9b07      	ldr	r3, [sp, #28]
 80032e0:	1d19      	adds	r1, r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	9107      	str	r1, [sp, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db01      	blt.n	80032ee <_svfiprintf_r+0x10a>
 80032ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ec:	e004      	b.n	80032f8 <_svfiprintf_r+0x114>
 80032ee:	425b      	negs	r3, r3
 80032f0:	60e3      	str	r3, [r4, #12]
 80032f2:	2302      	movs	r3, #2
 80032f4:	4313      	orrs	r3, r2
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	782b      	ldrb	r3, [r5, #0]
 80032fa:	2b2e      	cmp	r3, #46	; 0x2e
 80032fc:	d10a      	bne.n	8003314 <_svfiprintf_r+0x130>
 80032fe:	786b      	ldrb	r3, [r5, #1]
 8003300:	2b2a      	cmp	r3, #42	; 0x2a
 8003302:	d135      	bne.n	8003370 <_svfiprintf_r+0x18c>
 8003304:	9b07      	ldr	r3, [sp, #28]
 8003306:	3502      	adds	r5, #2
 8003308:	1d1a      	adds	r2, r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	9207      	str	r2, [sp, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db2b      	blt.n	800336a <_svfiprintf_r+0x186>
 8003312:	9309      	str	r3, [sp, #36]	; 0x24
 8003314:	4e2f      	ldr	r6, [pc, #188]	; (80033d4 <_svfiprintf_r+0x1f0>)
 8003316:	2203      	movs	r2, #3
 8003318:	0030      	movs	r0, r6
 800331a:	7829      	ldrb	r1, [r5, #0]
 800331c:	f000 fa08 	bl	8003730 <memchr>
 8003320:	2800      	cmp	r0, #0
 8003322:	d006      	beq.n	8003332 <_svfiprintf_r+0x14e>
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	1b80      	subs	r0, r0, r6
 8003328:	4083      	lsls	r3, r0
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	3501      	adds	r5, #1
 800332e:	4313      	orrs	r3, r2
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	7829      	ldrb	r1, [r5, #0]
 8003334:	2206      	movs	r2, #6
 8003336:	4828      	ldr	r0, [pc, #160]	; (80033d8 <_svfiprintf_r+0x1f4>)
 8003338:	1c6e      	adds	r6, r5, #1
 800333a:	7621      	strb	r1, [r4, #24]
 800333c:	f000 f9f8 	bl	8003730 <memchr>
 8003340:	2800      	cmp	r0, #0
 8003342:	d03c      	beq.n	80033be <_svfiprintf_r+0x1da>
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <_svfiprintf_r+0x1f8>)
 8003346:	2b00      	cmp	r3, #0
 8003348:	d125      	bne.n	8003396 <_svfiprintf_r+0x1b2>
 800334a:	2207      	movs	r2, #7
 800334c:	9b07      	ldr	r3, [sp, #28]
 800334e:	3307      	adds	r3, #7
 8003350:	4393      	bics	r3, r2
 8003352:	3308      	adds	r3, #8
 8003354:	9307      	str	r3, [sp, #28]
 8003356:	6963      	ldr	r3, [r4, #20]
 8003358:	9a04      	ldr	r2, [sp, #16]
 800335a:	189b      	adds	r3, r3, r2
 800335c:	6163      	str	r3, [r4, #20]
 800335e:	e764      	b.n	800322a <_svfiprintf_r+0x46>
 8003360:	4343      	muls	r3, r0
 8003362:	0035      	movs	r5, r6
 8003364:	2101      	movs	r1, #1
 8003366:	189b      	adds	r3, r3, r2
 8003368:	e7a6      	b.n	80032b8 <_svfiprintf_r+0xd4>
 800336a:	2301      	movs	r3, #1
 800336c:	425b      	negs	r3, r3
 800336e:	e7d0      	b.n	8003312 <_svfiprintf_r+0x12e>
 8003370:	2300      	movs	r3, #0
 8003372:	200a      	movs	r0, #10
 8003374:	001a      	movs	r2, r3
 8003376:	3501      	adds	r5, #1
 8003378:	6063      	str	r3, [r4, #4]
 800337a:	7829      	ldrb	r1, [r5, #0]
 800337c:	1c6e      	adds	r6, r5, #1
 800337e:	3930      	subs	r1, #48	; 0x30
 8003380:	2909      	cmp	r1, #9
 8003382:	d903      	bls.n	800338c <_svfiprintf_r+0x1a8>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0c5      	beq.n	8003314 <_svfiprintf_r+0x130>
 8003388:	9209      	str	r2, [sp, #36]	; 0x24
 800338a:	e7c3      	b.n	8003314 <_svfiprintf_r+0x130>
 800338c:	4342      	muls	r2, r0
 800338e:	0035      	movs	r5, r6
 8003390:	2301      	movs	r3, #1
 8003392:	1852      	adds	r2, r2, r1
 8003394:	e7f1      	b.n	800337a <_svfiprintf_r+0x196>
 8003396:	aa07      	add	r2, sp, #28
 8003398:	9200      	str	r2, [sp, #0]
 800339a:	0021      	movs	r1, r4
 800339c:	003a      	movs	r2, r7
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <_svfiprintf_r+0x1fc>)
 80033a0:	9803      	ldr	r0, [sp, #12]
 80033a2:	e000      	b.n	80033a6 <_svfiprintf_r+0x1c2>
 80033a4:	bf00      	nop
 80033a6:	9004      	str	r0, [sp, #16]
 80033a8:	9b04      	ldr	r3, [sp, #16]
 80033aa:	3301      	adds	r3, #1
 80033ac:	d1d3      	bne.n	8003356 <_svfiprintf_r+0x172>
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033b2:	065b      	lsls	r3, r3, #25
 80033b4:	d400      	bmi.n	80033b8 <_svfiprintf_r+0x1d4>
 80033b6:	e72c      	b.n	8003212 <_svfiprintf_r+0x2e>
 80033b8:	2001      	movs	r0, #1
 80033ba:	4240      	negs	r0, r0
 80033bc:	e729      	b.n	8003212 <_svfiprintf_r+0x2e>
 80033be:	aa07      	add	r2, sp, #28
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	0021      	movs	r1, r4
 80033c4:	003a      	movs	r2, r7
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <_svfiprintf_r+0x1fc>)
 80033c8:	9803      	ldr	r0, [sp, #12]
 80033ca:	f000 f87b 	bl	80034c4 <_printf_i>
 80033ce:	e7ea      	b.n	80033a6 <_svfiprintf_r+0x1c2>
 80033d0:	08003828 	.word	0x08003828
 80033d4:	0800382e 	.word	0x0800382e
 80033d8:	08003832 	.word	0x08003832
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003121 	.word	0x08003121

080033e4 <_printf_common>:
 80033e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e6:	0016      	movs	r6, r2
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	688a      	ldr	r2, [r1, #8]
 80033ec:	690b      	ldr	r3, [r1, #16]
 80033ee:	000c      	movs	r4, r1
 80033f0:	9000      	str	r0, [sp, #0]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	da00      	bge.n	80033f8 <_printf_common+0x14>
 80033f6:	0013      	movs	r3, r2
 80033f8:	0022      	movs	r2, r4
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	3243      	adds	r2, #67	; 0x43
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	2a00      	cmp	r2, #0
 8003402:	d001      	beq.n	8003408 <_printf_common+0x24>
 8003404:	3301      	adds	r3, #1
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	069b      	lsls	r3, r3, #26
 800340c:	d502      	bpl.n	8003414 <_printf_common+0x30>
 800340e:	6833      	ldr	r3, [r6, #0]
 8003410:	3302      	adds	r3, #2
 8003412:	6033      	str	r3, [r6, #0]
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	2306      	movs	r3, #6
 8003418:	0015      	movs	r5, r2
 800341a:	401d      	ands	r5, r3
 800341c:	421a      	tst	r2, r3
 800341e:	d027      	beq.n	8003470 <_printf_common+0x8c>
 8003420:	0023      	movs	r3, r4
 8003422:	3343      	adds	r3, #67	; 0x43
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	4193      	sbcs	r3, r2
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	0692      	lsls	r2, r2, #26
 800342e:	d430      	bmi.n	8003492 <_printf_common+0xae>
 8003430:	0022      	movs	r2, r4
 8003432:	9901      	ldr	r1, [sp, #4]
 8003434:	9800      	ldr	r0, [sp, #0]
 8003436:	9d08      	ldr	r5, [sp, #32]
 8003438:	3243      	adds	r2, #67	; 0x43
 800343a:	47a8      	blx	r5
 800343c:	3001      	adds	r0, #1
 800343e:	d025      	beq.n	800348c <_printf_common+0xa8>
 8003440:	2206      	movs	r2, #6
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	2500      	movs	r5, #0
 8003446:	4013      	ands	r3, r2
 8003448:	2b04      	cmp	r3, #4
 800344a:	d105      	bne.n	8003458 <_printf_common+0x74>
 800344c:	6833      	ldr	r3, [r6, #0]
 800344e:	68e5      	ldr	r5, [r4, #12]
 8003450:	1aed      	subs	r5, r5, r3
 8003452:	43eb      	mvns	r3, r5
 8003454:	17db      	asrs	r3, r3, #31
 8003456:	401d      	ands	r5, r3
 8003458:	68a3      	ldr	r3, [r4, #8]
 800345a:	6922      	ldr	r2, [r4, #16]
 800345c:	4293      	cmp	r3, r2
 800345e:	dd01      	ble.n	8003464 <_printf_common+0x80>
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	18ed      	adds	r5, r5, r3
 8003464:	2600      	movs	r6, #0
 8003466:	42b5      	cmp	r5, r6
 8003468:	d120      	bne.n	80034ac <_printf_common+0xc8>
 800346a:	2000      	movs	r0, #0
 800346c:	e010      	b.n	8003490 <_printf_common+0xac>
 800346e:	3501      	adds	r5, #1
 8003470:	68e3      	ldr	r3, [r4, #12]
 8003472:	6832      	ldr	r2, [r6, #0]
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	42ab      	cmp	r3, r5
 8003478:	ddd2      	ble.n	8003420 <_printf_common+0x3c>
 800347a:	0022      	movs	r2, r4
 800347c:	2301      	movs	r3, #1
 800347e:	9901      	ldr	r1, [sp, #4]
 8003480:	9800      	ldr	r0, [sp, #0]
 8003482:	9f08      	ldr	r7, [sp, #32]
 8003484:	3219      	adds	r2, #25
 8003486:	47b8      	blx	r7
 8003488:	3001      	adds	r0, #1
 800348a:	d1f0      	bne.n	800346e <_printf_common+0x8a>
 800348c:	2001      	movs	r0, #1
 800348e:	4240      	negs	r0, r0
 8003490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003492:	2030      	movs	r0, #48	; 0x30
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	3143      	adds	r1, #67	; 0x43
 8003498:	7008      	strb	r0, [r1, #0]
 800349a:	0021      	movs	r1, r4
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	3145      	adds	r1, #69	; 0x45
 80034a0:	7809      	ldrb	r1, [r1, #0]
 80034a2:	18a2      	adds	r2, r4, r2
 80034a4:	3243      	adds	r2, #67	; 0x43
 80034a6:	3302      	adds	r3, #2
 80034a8:	7011      	strb	r1, [r2, #0]
 80034aa:	e7c1      	b.n	8003430 <_printf_common+0x4c>
 80034ac:	0022      	movs	r2, r4
 80034ae:	2301      	movs	r3, #1
 80034b0:	9901      	ldr	r1, [sp, #4]
 80034b2:	9800      	ldr	r0, [sp, #0]
 80034b4:	9f08      	ldr	r7, [sp, #32]
 80034b6:	321a      	adds	r2, #26
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	d0e6      	beq.n	800348c <_printf_common+0xa8>
 80034be:	3601      	adds	r6, #1
 80034c0:	e7d1      	b.n	8003466 <_printf_common+0x82>
	...

080034c4 <_printf_i>:
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	9206      	str	r2, [sp, #24]
 80034ca:	000a      	movs	r2, r1
 80034cc:	3243      	adds	r2, #67	; 0x43
 80034ce:	9307      	str	r3, [sp, #28]
 80034d0:	9005      	str	r0, [sp, #20]
 80034d2:	9204      	str	r2, [sp, #16]
 80034d4:	7e0a      	ldrb	r2, [r1, #24]
 80034d6:	000c      	movs	r4, r1
 80034d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034da:	2a78      	cmp	r2, #120	; 0x78
 80034dc:	d809      	bhi.n	80034f2 <_printf_i+0x2e>
 80034de:	2a62      	cmp	r2, #98	; 0x62
 80034e0:	d80b      	bhi.n	80034fa <_printf_i+0x36>
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d100      	bne.n	80034e8 <_printf_i+0x24>
 80034e6:	e0be      	b.n	8003666 <_printf_i+0x1a2>
 80034e8:	497c      	ldr	r1, [pc, #496]	; (80036dc <_printf_i+0x218>)
 80034ea:	9103      	str	r1, [sp, #12]
 80034ec:	2a58      	cmp	r2, #88	; 0x58
 80034ee:	d100      	bne.n	80034f2 <_printf_i+0x2e>
 80034f0:	e093      	b.n	800361a <_printf_i+0x156>
 80034f2:	0026      	movs	r6, r4
 80034f4:	3642      	adds	r6, #66	; 0x42
 80034f6:	7032      	strb	r2, [r6, #0]
 80034f8:	e022      	b.n	8003540 <_printf_i+0x7c>
 80034fa:	0010      	movs	r0, r2
 80034fc:	3863      	subs	r0, #99	; 0x63
 80034fe:	2815      	cmp	r0, #21
 8003500:	d8f7      	bhi.n	80034f2 <_printf_i+0x2e>
 8003502:	f7fc fe01 	bl	8000108 <__gnu_thumb1_case_shi>
 8003506:	0016      	.short	0x0016
 8003508:	fff6001f 	.word	0xfff6001f
 800350c:	fff6fff6 	.word	0xfff6fff6
 8003510:	001ffff6 	.word	0x001ffff6
 8003514:	fff6fff6 	.word	0xfff6fff6
 8003518:	fff6fff6 	.word	0xfff6fff6
 800351c:	003600a3 	.word	0x003600a3
 8003520:	fff60083 	.word	0xfff60083
 8003524:	00b4fff6 	.word	0x00b4fff6
 8003528:	0036fff6 	.word	0x0036fff6
 800352c:	fff6fff6 	.word	0xfff6fff6
 8003530:	0087      	.short	0x0087
 8003532:	0026      	movs	r6, r4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	3642      	adds	r6, #66	; 0x42
 8003538:	1d11      	adds	r1, r2, #4
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	7033      	strb	r3, [r6, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	e0a2      	b.n	800368a <_printf_i+0x1c6>
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	6809      	ldr	r1, [r1, #0]
 8003548:	1d02      	adds	r2, r0, #4
 800354a:	060d      	lsls	r5, r1, #24
 800354c:	d50b      	bpl.n	8003566 <_printf_i+0xa2>
 800354e:	6805      	ldr	r5, [r0, #0]
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	2d00      	cmp	r5, #0
 8003554:	da03      	bge.n	800355e <_printf_i+0x9a>
 8003556:	232d      	movs	r3, #45	; 0x2d
 8003558:	9a04      	ldr	r2, [sp, #16]
 800355a:	426d      	negs	r5, r5
 800355c:	7013      	strb	r3, [r2, #0]
 800355e:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <_printf_i+0x218>)
 8003560:	270a      	movs	r7, #10
 8003562:	9303      	str	r3, [sp, #12]
 8003564:	e01b      	b.n	800359e <_printf_i+0xda>
 8003566:	6805      	ldr	r5, [r0, #0]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	0649      	lsls	r1, r1, #25
 800356c:	d5f1      	bpl.n	8003552 <_printf_i+0x8e>
 800356e:	b22d      	sxth	r5, r5
 8003570:	e7ef      	b.n	8003552 <_printf_i+0x8e>
 8003572:	680d      	ldr	r5, [r1, #0]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	1d08      	adds	r0, r1, #4
 8003578:	6018      	str	r0, [r3, #0]
 800357a:	062e      	lsls	r6, r5, #24
 800357c:	d501      	bpl.n	8003582 <_printf_i+0xbe>
 800357e:	680d      	ldr	r5, [r1, #0]
 8003580:	e003      	b.n	800358a <_printf_i+0xc6>
 8003582:	066d      	lsls	r5, r5, #25
 8003584:	d5fb      	bpl.n	800357e <_printf_i+0xba>
 8003586:	680d      	ldr	r5, [r1, #0]
 8003588:	b2ad      	uxth	r5, r5
 800358a:	4b54      	ldr	r3, [pc, #336]	; (80036dc <_printf_i+0x218>)
 800358c:	2708      	movs	r7, #8
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	2a6f      	cmp	r2, #111	; 0x6f
 8003592:	d000      	beq.n	8003596 <_printf_i+0xd2>
 8003594:	3702      	adds	r7, #2
 8003596:	0023      	movs	r3, r4
 8003598:	2200      	movs	r2, #0
 800359a:	3343      	adds	r3, #67	; 0x43
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	60a3      	str	r3, [r4, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db03      	blt.n	80035ae <_printf_i+0xea>
 80035a6:	2104      	movs	r1, #4
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	438a      	bics	r2, r1
 80035ac:	6022      	str	r2, [r4, #0]
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	d102      	bne.n	80035b8 <_printf_i+0xf4>
 80035b2:	9e04      	ldr	r6, [sp, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00c      	beq.n	80035d2 <_printf_i+0x10e>
 80035b8:	9e04      	ldr	r6, [sp, #16]
 80035ba:	0028      	movs	r0, r5
 80035bc:	0039      	movs	r1, r7
 80035be:	f7fc fe33 	bl	8000228 <__aeabi_uidivmod>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	3e01      	subs	r6, #1
 80035c6:	5c5b      	ldrb	r3, [r3, r1]
 80035c8:	7033      	strb	r3, [r6, #0]
 80035ca:	002b      	movs	r3, r5
 80035cc:	0005      	movs	r5, r0
 80035ce:	429f      	cmp	r7, r3
 80035d0:	d9f3      	bls.n	80035ba <_printf_i+0xf6>
 80035d2:	2f08      	cmp	r7, #8
 80035d4:	d109      	bne.n	80035ea <_printf_i+0x126>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	07db      	lsls	r3, r3, #31
 80035da:	d506      	bpl.n	80035ea <_printf_i+0x126>
 80035dc:	6862      	ldr	r2, [r4, #4]
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dc02      	bgt.n	80035ea <_printf_i+0x126>
 80035e4:	2330      	movs	r3, #48	; 0x30
 80035e6:	3e01      	subs	r6, #1
 80035e8:	7033      	strb	r3, [r6, #0]
 80035ea:	9b04      	ldr	r3, [sp, #16]
 80035ec:	1b9b      	subs	r3, r3, r6
 80035ee:	6123      	str	r3, [r4, #16]
 80035f0:	9b07      	ldr	r3, [sp, #28]
 80035f2:	0021      	movs	r1, r4
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	9805      	ldr	r0, [sp, #20]
 80035f8:	9b06      	ldr	r3, [sp, #24]
 80035fa:	aa09      	add	r2, sp, #36	; 0x24
 80035fc:	f7ff fef2 	bl	80033e4 <_printf_common>
 8003600:	3001      	adds	r0, #1
 8003602:	d147      	bne.n	8003694 <_printf_i+0x1d0>
 8003604:	2001      	movs	r0, #1
 8003606:	4240      	negs	r0, r0
 8003608:	b00b      	add	sp, #44	; 0x2c
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	2220      	movs	r2, #32
 800360e:	6809      	ldr	r1, [r1, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	6022      	str	r2, [r4, #0]
 8003614:	2278      	movs	r2, #120	; 0x78
 8003616:	4932      	ldr	r1, [pc, #200]	; (80036e0 <_printf_i+0x21c>)
 8003618:	9103      	str	r1, [sp, #12]
 800361a:	0021      	movs	r1, r4
 800361c:	3145      	adds	r1, #69	; 0x45
 800361e:	700a      	strb	r2, [r1, #0]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	c920      	ldmia	r1!, {r5}
 8003626:	0610      	lsls	r0, r2, #24
 8003628:	d402      	bmi.n	8003630 <_printf_i+0x16c>
 800362a:	0650      	lsls	r0, r2, #25
 800362c:	d500      	bpl.n	8003630 <_printf_i+0x16c>
 800362e:	b2ad      	uxth	r5, r5
 8003630:	6019      	str	r1, [r3, #0]
 8003632:	07d3      	lsls	r3, r2, #31
 8003634:	d502      	bpl.n	800363c <_printf_i+0x178>
 8003636:	2320      	movs	r3, #32
 8003638:	4313      	orrs	r3, r2
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	2710      	movs	r7, #16
 800363e:	2d00      	cmp	r5, #0
 8003640:	d1a9      	bne.n	8003596 <_printf_i+0xd2>
 8003642:	2220      	movs	r2, #32
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	4393      	bics	r3, r2
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	e7a4      	b.n	8003596 <_printf_i+0xd2>
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	680d      	ldr	r5, [r1, #0]
 8003650:	1d10      	adds	r0, r2, #4
 8003652:	6949      	ldr	r1, [r1, #20]
 8003654:	6018      	str	r0, [r3, #0]
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	062e      	lsls	r6, r5, #24
 800365a:	d501      	bpl.n	8003660 <_printf_i+0x19c>
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	e002      	b.n	8003666 <_printf_i+0x1a2>
 8003660:	066d      	lsls	r5, r5, #25
 8003662:	d5fb      	bpl.n	800365c <_printf_i+0x198>
 8003664:	8019      	strh	r1, [r3, #0]
 8003666:	2300      	movs	r3, #0
 8003668:	9e04      	ldr	r6, [sp, #16]
 800366a:	6123      	str	r3, [r4, #16]
 800366c:	e7c0      	b.n	80035f0 <_printf_i+0x12c>
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	1d11      	adds	r1, r2, #4
 8003672:	6019      	str	r1, [r3, #0]
 8003674:	6816      	ldr	r6, [r2, #0]
 8003676:	2100      	movs	r1, #0
 8003678:	0030      	movs	r0, r6
 800367a:	6862      	ldr	r2, [r4, #4]
 800367c:	f000 f858 	bl	8003730 <memchr>
 8003680:	2800      	cmp	r0, #0
 8003682:	d001      	beq.n	8003688 <_printf_i+0x1c4>
 8003684:	1b80      	subs	r0, r0, r6
 8003686:	6060      	str	r0, [r4, #4]
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	6123      	str	r3, [r4, #16]
 800368c:	2300      	movs	r3, #0
 800368e:	9a04      	ldr	r2, [sp, #16]
 8003690:	7013      	strb	r3, [r2, #0]
 8003692:	e7ad      	b.n	80035f0 <_printf_i+0x12c>
 8003694:	0032      	movs	r2, r6
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	9906      	ldr	r1, [sp, #24]
 800369a:	9805      	ldr	r0, [sp, #20]
 800369c:	9d07      	ldr	r5, [sp, #28]
 800369e:	47a8      	blx	r5
 80036a0:	3001      	adds	r0, #1
 80036a2:	d0af      	beq.n	8003604 <_printf_i+0x140>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	079b      	lsls	r3, r3, #30
 80036a8:	d415      	bmi.n	80036d6 <_printf_i+0x212>
 80036aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ac:	68e0      	ldr	r0, [r4, #12]
 80036ae:	4298      	cmp	r0, r3
 80036b0:	daaa      	bge.n	8003608 <_printf_i+0x144>
 80036b2:	0018      	movs	r0, r3
 80036b4:	e7a8      	b.n	8003608 <_printf_i+0x144>
 80036b6:	0022      	movs	r2, r4
 80036b8:	2301      	movs	r3, #1
 80036ba:	9906      	ldr	r1, [sp, #24]
 80036bc:	9805      	ldr	r0, [sp, #20]
 80036be:	9e07      	ldr	r6, [sp, #28]
 80036c0:	3219      	adds	r2, #25
 80036c2:	47b0      	blx	r6
 80036c4:	3001      	adds	r0, #1
 80036c6:	d09d      	beq.n	8003604 <_printf_i+0x140>
 80036c8:	3501      	adds	r5, #1
 80036ca:	68e3      	ldr	r3, [r4, #12]
 80036cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	42ab      	cmp	r3, r5
 80036d2:	dcf0      	bgt.n	80036b6 <_printf_i+0x1f2>
 80036d4:	e7e9      	b.n	80036aa <_printf_i+0x1e6>
 80036d6:	2500      	movs	r5, #0
 80036d8:	e7f7      	b.n	80036ca <_printf_i+0x206>
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	08003839 	.word	0x08003839
 80036e0:	0800384a 	.word	0x0800384a

080036e4 <memmove>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4288      	cmp	r0, r1
 80036e8:	d902      	bls.n	80036f0 <memmove+0xc>
 80036ea:	188b      	adds	r3, r1, r2
 80036ec:	4298      	cmp	r0, r3
 80036ee:	d303      	bcc.n	80036f8 <memmove+0x14>
 80036f0:	2300      	movs	r3, #0
 80036f2:	e007      	b.n	8003704 <memmove+0x20>
 80036f4:	5c8b      	ldrb	r3, [r1, r2]
 80036f6:	5483      	strb	r3, [r0, r2]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	d2fb      	bcs.n	80036f4 <memmove+0x10>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	5ccc      	ldrb	r4, [r1, r3]
 8003700:	54c4      	strb	r4, [r0, r3]
 8003702:	3301      	adds	r3, #1
 8003704:	429a      	cmp	r2, r3
 8003706:	d1fa      	bne.n	80036fe <memmove+0x1a>
 8003708:	e7f8      	b.n	80036fc <memmove+0x18>
	...

0800370c <_sbrk_r>:
 800370c:	2300      	movs	r3, #0
 800370e:	b570      	push	{r4, r5, r6, lr}
 8003710:	4d06      	ldr	r5, [pc, #24]	; (800372c <_sbrk_r+0x20>)
 8003712:	0004      	movs	r4, r0
 8003714:	0008      	movs	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd f844 	bl	80007a4 <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d103      	bne.n	8003728 <_sbrk_r+0x1c>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d000      	beq.n	8003728 <_sbrk_r+0x1c>
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	200002d0 	.word	0x200002d0

08003730 <memchr>:
 8003730:	b2c9      	uxtb	r1, r1
 8003732:	1882      	adds	r2, r0, r2
 8003734:	4290      	cmp	r0, r2
 8003736:	d101      	bne.n	800373c <memchr+0xc>
 8003738:	2000      	movs	r0, #0
 800373a:	4770      	bx	lr
 800373c:	7803      	ldrb	r3, [r0, #0]
 800373e:	428b      	cmp	r3, r1
 8003740:	d0fb      	beq.n	800373a <memchr+0xa>
 8003742:	3001      	adds	r0, #1
 8003744:	e7f6      	b.n	8003734 <memchr+0x4>

08003746 <memcpy>:
 8003746:	2300      	movs	r3, #0
 8003748:	b510      	push	{r4, lr}
 800374a:	429a      	cmp	r2, r3
 800374c:	d100      	bne.n	8003750 <memcpy+0xa>
 800374e:	bd10      	pop	{r4, pc}
 8003750:	5ccc      	ldrb	r4, [r1, r3]
 8003752:	54c4      	strb	r4, [r0, r3]
 8003754:	3301      	adds	r3, #1
 8003756:	e7f8      	b.n	800374a <memcpy+0x4>

08003758 <_realloc_r>:
 8003758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375a:	0007      	movs	r7, r0
 800375c:	000e      	movs	r6, r1
 800375e:	0014      	movs	r4, r2
 8003760:	2900      	cmp	r1, #0
 8003762:	d105      	bne.n	8003770 <_realloc_r+0x18>
 8003764:	0011      	movs	r1, r2
 8003766:	f7ff fc49 	bl	8002ffc <_malloc_r>
 800376a:	0005      	movs	r5, r0
 800376c:	0028      	movs	r0, r5
 800376e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003770:	2a00      	cmp	r2, #0
 8003772:	d103      	bne.n	800377c <_realloc_r+0x24>
 8003774:	f7ff fbd6 	bl	8002f24 <_free_r>
 8003778:	0025      	movs	r5, r4
 800377a:	e7f7      	b.n	800376c <_realloc_r+0x14>
 800377c:	f000 f81b 	bl	80037b6 <_malloc_usable_size_r>
 8003780:	9001      	str	r0, [sp, #4]
 8003782:	4284      	cmp	r4, r0
 8003784:	d803      	bhi.n	800378e <_realloc_r+0x36>
 8003786:	0035      	movs	r5, r6
 8003788:	0843      	lsrs	r3, r0, #1
 800378a:	42a3      	cmp	r3, r4
 800378c:	d3ee      	bcc.n	800376c <_realloc_r+0x14>
 800378e:	0021      	movs	r1, r4
 8003790:	0038      	movs	r0, r7
 8003792:	f7ff fc33 	bl	8002ffc <_malloc_r>
 8003796:	1e05      	subs	r5, r0, #0
 8003798:	d0e8      	beq.n	800376c <_realloc_r+0x14>
 800379a:	9b01      	ldr	r3, [sp, #4]
 800379c:	0022      	movs	r2, r4
 800379e:	429c      	cmp	r4, r3
 80037a0:	d900      	bls.n	80037a4 <_realloc_r+0x4c>
 80037a2:	001a      	movs	r2, r3
 80037a4:	0031      	movs	r1, r6
 80037a6:	0028      	movs	r0, r5
 80037a8:	f7ff ffcd 	bl	8003746 <memcpy>
 80037ac:	0031      	movs	r1, r6
 80037ae:	0038      	movs	r0, r7
 80037b0:	f7ff fbb8 	bl	8002f24 <_free_r>
 80037b4:	e7da      	b.n	800376c <_realloc_r+0x14>

080037b6 <_malloc_usable_size_r>:
 80037b6:	1f0b      	subs	r3, r1, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1f18      	subs	r0, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da01      	bge.n	80037c4 <_malloc_usable_size_r+0xe>
 80037c0:	580b      	ldr	r3, [r1, r0]
 80037c2:	18c0      	adds	r0, r0, r3
 80037c4:	4770      	bx	lr
	...

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
